import { Cell, Slice, Address, Builder, Dictionary, ContractProvider, Sender, Contract, ContractABI } from '@ton/core';
export type DataSize = {
    $$type: 'DataSize';
    cells: bigint;
    bits: bigint;
    refs: bigint;
};
export declare function storeDataSize(src: DataSize): (builder: Builder) => void;
export declare function loadDataSize(slice: Slice): {
    $$type: "DataSize";
    cells: bigint;
    bits: bigint;
    refs: bigint;
};
export type StateInit = {
    $$type: 'StateInit';
    code: Cell;
    data: Cell;
};
export declare function storeStateInit(src: StateInit): (builder: Builder) => void;
export declare function loadStateInit(slice: Slice): {
    $$type: "StateInit";
    code: Cell;
    data: Cell;
};
export type Context = {
    $$type: 'Context';
    bounceable: boolean;
    sender: Address;
    value: bigint;
    raw: Slice;
};
export declare function storeContext(src: Context): (builder: Builder) => void;
export declare function loadContext(slice: Slice): {
    $$type: "Context";
    bounceable: boolean;
    sender: Address;
    value: bigint;
    raw: Slice;
};
export type SendParameters = {
    $$type: 'SendParameters';
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
    value: bigint;
    to: Address;
    bounce: boolean;
};
export declare function storeSendParameters(src: SendParameters): (builder: Builder) => void;
export declare function loadSendParameters(slice: Slice): {
    $$type: "SendParameters";
    mode: bigint;
    body: Cell | null;
    code: Cell | null;
    data: Cell | null;
    value: bigint;
    to: Address;
    bounce: boolean;
};
export type DeployParameters = {
    $$type: 'DeployParameters';
    mode: bigint;
    body: Cell | null;
    value: bigint;
    bounce: boolean;
    init: StateInit;
};
export declare function storeDeployParameters(src: DeployParameters): (builder: Builder) => void;
export declare function loadDeployParameters(slice: Slice): {
    $$type: "DeployParameters";
    mode: bigint;
    body: Cell | null;
    value: bigint;
    bounce: boolean;
    init: {
        $$type: "StateInit";
        code: Cell;
        data: Cell;
    };
};
export type StdAddress = {
    $$type: 'StdAddress';
    workchain: bigint;
    address: bigint;
};
export declare function storeStdAddress(src: StdAddress): (builder: Builder) => void;
export declare function loadStdAddress(slice: Slice): {
    $$type: "StdAddress";
    workchain: bigint;
    address: bigint;
};
export type VarAddress = {
    $$type: 'VarAddress';
    workchain: bigint;
    address: Slice;
};
export declare function storeVarAddress(src: VarAddress): (builder: Builder) => void;
export declare function loadVarAddress(slice: Slice): {
    $$type: "VarAddress";
    workchain: bigint;
    address: Slice;
};
export type SomeStruct = {
    $$type: 'SomeStruct';
    int: bigint;
    bool: boolean;
    address: Address;
    a: bigint;
    b: bigint;
};
export declare function storeSomeStruct(src: SomeStruct): (builder: Builder) => void;
export declare function loadSomeStruct(slice: Slice): {
    $$type: "SomeStruct";
    int: bigint;
    bool: boolean;
    address: Address;
    a: bigint;
    b: bigint;
};
export type GetAllMapsResult = {
    $$type: 'GetAllMapsResult';
    int_int: bigint | null;
    int_int8: bigint | null;
    int_int42: bigint | null;
    int_int256: bigint | null;
    int_uint8: bigint | null;
    int_uint42: bigint | null;
    int_uint256: bigint | null;
    int_coins: bigint | null;
    int8_int: bigint | null;
    int8_int8: bigint | null;
    int8_int42: bigint | null;
    int8_int256: bigint | null;
    int8_uint8: bigint | null;
    int8_uint42: bigint | null;
    int8_uint256: bigint | null;
    int8_coins: bigint | null;
    int42_int: bigint | null;
    int42_int8: bigint | null;
    int42_int42: bigint | null;
    int42_int256: bigint | null;
    int42_uint8: bigint | null;
    int42_uint42: bigint | null;
    int42_uint256: bigint | null;
    int42_coins: bigint | null;
    int256_int: bigint | null;
    int256_int8: bigint | null;
    int256_int42: bigint | null;
    int256_int256: bigint | null;
    int256_uint8: bigint | null;
    int256_uint42: bigint | null;
    int256_uint256: bigint | null;
    int256_coins: bigint | null;
    uint8_int: bigint | null;
    uint8_int8: bigint | null;
    uint8_int42: bigint | null;
    uint8_int256: bigint | null;
    uint8_uint8: bigint | null;
    uint8_uint42: bigint | null;
    uint8_uint256: bigint | null;
    uint8_coins: bigint | null;
    uint42_int: bigint | null;
    uint42_int8: bigint | null;
    uint42_int42: bigint | null;
    uint42_int256: bigint | null;
    uint42_uint8: bigint | null;
    uint42_uint42: bigint | null;
    uint42_uint256: bigint | null;
    uint42_coins: bigint | null;
    uint256_int: bigint | null;
    uint256_int8: bigint | null;
    uint256_int42: bigint | null;
    uint256_int256: bigint | null;
    uint256_uint8: bigint | null;
    uint256_uint42: bigint | null;
    uint256_uint256: bigint | null;
    uint256_coins: bigint | null;
    address_int: bigint | null;
    address_int8: bigint | null;
    address_int42: bigint | null;
    address_int256: bigint | null;
    address_uint8: bigint | null;
    address_uint42: bigint | null;
    address_uint256: bigint | null;
    address_coins: bigint | null;
};
export declare function storeGetAllMapsResult(src: GetAllMapsResult): (builder: Builder) => void;
export declare function loadGetAllMapsResult(slice: Slice): {
    $$type: "GetAllMapsResult";
    int_int: bigint | null;
    int_int8: bigint | null;
    int_int42: bigint | null;
    int_int256: bigint | null;
    int_uint8: bigint | null;
    int_uint42: bigint | null;
    int_uint256: bigint | null;
    int_coins: bigint | null;
    int8_int: bigint | null;
    int8_int8: bigint | null;
    int8_int42: bigint | null;
    int8_int256: bigint | null;
    int8_uint8: bigint | null;
    int8_uint42: bigint | null;
    int8_uint256: bigint | null;
    int8_coins: bigint | null;
    int42_int: bigint | null;
    int42_int8: bigint | null;
    int42_int42: bigint | null;
    int42_int256: bigint | null;
    int42_uint8: bigint | null;
    int42_uint42: bigint | null;
    int42_uint256: bigint | null;
    int42_coins: bigint | null;
    int256_int: bigint | null;
    int256_int8: bigint | null;
    int256_int42: bigint | null;
    int256_int256: bigint | null;
    int256_uint8: bigint | null;
    int256_uint42: bigint | null;
    int256_uint256: bigint | null;
    int256_coins: bigint | null;
    uint8_int: bigint | null;
    uint8_int8: bigint | null;
    uint8_int42: bigint | null;
    uint8_int256: bigint | null;
    uint8_uint8: bigint | null;
    uint8_uint42: bigint | null;
    uint8_uint256: bigint | null;
    uint8_coins: bigint | null;
    uint42_int: bigint | null;
    uint42_int8: bigint | null;
    uint42_int42: bigint | null;
    uint42_int256: bigint | null;
    uint42_uint8: bigint | null;
    uint42_uint42: bigint | null;
    uint42_uint256: bigint | null;
    uint42_coins: bigint | null;
    uint256_int: bigint | null;
    uint256_int8: bigint | null;
    uint256_int42: bigint | null;
    uint256_int256: bigint | null;
    uint256_uint8: bigint | null;
    uint256_uint42: bigint | null;
    uint256_uint256: bigint | null;
    uint256_coins: bigint | null;
    address_int: bigint | null;
    address_int8: bigint | null;
    address_int42: bigint | null;
    address_int256: bigint | null;
    address_uint8: bigint | null;
    address_uint42: bigint | null;
    address_uint256: bigint | null;
    address_coins: bigint | null;
};
export type ReplaceAllMapsResult = {
    $$type: 'ReplaceAllMapsResult';
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export declare function storeReplaceAllMapsResult(src: ReplaceAllMapsResult): (builder: Builder) => void;
export declare function loadReplaceAllMapsResult(slice: Slice): {
    $$type: "ReplaceAllMapsResult";
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export type ReplaceGetAllMapsResult = {
    $$type: 'ReplaceGetAllMapsResult';
    int_int: bigint | null;
    int_int8: bigint | null;
    int_int42: bigint | null;
    int_int256: bigint | null;
    int_uint8: bigint | null;
    int_uint42: bigint | null;
    int_uint256: bigint | null;
    int_coins: bigint | null;
    int8_int: bigint | null;
    int8_int8: bigint | null;
    int8_int42: bigint | null;
    int8_int256: bigint | null;
    int8_uint8: bigint | null;
    int8_uint42: bigint | null;
    int8_uint256: bigint | null;
    int8_coins: bigint | null;
    int42_int: bigint | null;
    int42_int8: bigint | null;
    int42_int42: bigint | null;
    int42_int256: bigint | null;
    int42_uint8: bigint | null;
    int42_uint42: bigint | null;
    int42_uint256: bigint | null;
    int42_coins: bigint | null;
    int256_int: bigint | null;
    int256_int8: bigint | null;
    int256_int42: bigint | null;
    int256_int256: bigint | null;
    int256_uint8: bigint | null;
    int256_uint42: bigint | null;
    int256_uint256: bigint | null;
    int256_coins: bigint | null;
    uint8_int: bigint | null;
    uint8_int8: bigint | null;
    uint8_int42: bigint | null;
    uint8_int256: bigint | null;
    uint8_uint8: bigint | null;
    uint8_uint42: bigint | null;
    uint8_uint256: bigint | null;
    uint8_coins: bigint | null;
    uint42_int: bigint | null;
    uint42_int8: bigint | null;
    uint42_int42: bigint | null;
    uint42_int256: bigint | null;
    uint42_uint8: bigint | null;
    uint42_uint42: bigint | null;
    uint42_uint256: bigint | null;
    uint42_coins: bigint | null;
    uint256_int: bigint | null;
    uint256_int8: bigint | null;
    uint256_int42: bigint | null;
    uint256_int256: bigint | null;
    uint256_uint8: bigint | null;
    uint256_uint42: bigint | null;
    uint256_uint256: bigint | null;
    uint256_coins: bigint | null;
    address_int: bigint | null;
    address_int8: bigint | null;
    address_int42: bigint | null;
    address_int256: bigint | null;
    address_uint8: bigint | null;
    address_uint42: bigint | null;
    address_uint256: bigint | null;
    address_coins: bigint | null;
};
export declare function storeReplaceGetAllMapsResult(src: ReplaceGetAllMapsResult): (builder: Builder) => void;
export declare function loadReplaceGetAllMapsResult(slice: Slice): {
    $$type: "ReplaceGetAllMapsResult";
    int_int: bigint | null;
    int_int8: bigint | null;
    int_int42: bigint | null;
    int_int256: bigint | null;
    int_uint8: bigint | null;
    int_uint42: bigint | null;
    int_uint256: bigint | null;
    int_coins: bigint | null;
    int8_int: bigint | null;
    int8_int8: bigint | null;
    int8_int42: bigint | null;
    int8_int256: bigint | null;
    int8_uint8: bigint | null;
    int8_uint42: bigint | null;
    int8_uint256: bigint | null;
    int8_coins: bigint | null;
    int42_int: bigint | null;
    int42_int8: bigint | null;
    int42_int42: bigint | null;
    int42_int256: bigint | null;
    int42_uint8: bigint | null;
    int42_uint42: bigint | null;
    int42_uint256: bigint | null;
    int42_coins: bigint | null;
    int256_int: bigint | null;
    int256_int8: bigint | null;
    int256_int42: bigint | null;
    int256_int256: bigint | null;
    int256_uint8: bigint | null;
    int256_uint42: bigint | null;
    int256_uint256: bigint | null;
    int256_coins: bigint | null;
    uint8_int: bigint | null;
    uint8_int8: bigint | null;
    uint8_int42: bigint | null;
    uint8_int256: bigint | null;
    uint8_uint8: bigint | null;
    uint8_uint42: bigint | null;
    uint8_uint256: bigint | null;
    uint8_coins: bigint | null;
    uint42_int: bigint | null;
    uint42_int8: bigint | null;
    uint42_int42: bigint | null;
    uint42_int256: bigint | null;
    uint42_uint8: bigint | null;
    uint42_uint42: bigint | null;
    uint42_uint256: bigint | null;
    uint42_coins: bigint | null;
    uint256_int: bigint | null;
    uint256_int8: bigint | null;
    uint256_int42: bigint | null;
    uint256_int256: bigint | null;
    uint256_uint8: bigint | null;
    uint256_uint42: bigint | null;
    uint256_uint256: bigint | null;
    uint256_coins: bigint | null;
    address_int: bigint | null;
    address_int8: bigint | null;
    address_int42: bigint | null;
    address_int256: bigint | null;
    address_uint8: bigint | null;
    address_uint42: bigint | null;
    address_uint256: bigint | null;
    address_coins: bigint | null;
};
export type ExistsAllMapsResult = {
    $$type: 'ExistsAllMapsResult';
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export declare function storeExistsAllMapsResult(src: ExistsAllMapsResult): (builder: Builder) => void;
export declare function loadExistsAllMapsResult(slice: Slice): {
    $$type: "ExistsAllMapsResult";
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export type IsEmptyAllMapsResult = {
    $$type: 'IsEmptyAllMapsResult';
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export declare function storeIsEmptyAllMapsResult(src: IsEmptyAllMapsResult): (builder: Builder) => void;
export declare function loadIsEmptyAllMapsResult(slice: Slice): {
    $$type: "IsEmptyAllMapsResult";
    int_int: boolean;
    int_int8: boolean;
    int_int42: boolean;
    int_int256: boolean;
    int_uint8: boolean;
    int_uint42: boolean;
    int_uint256: boolean;
    int_coins: boolean;
    int8_int: boolean;
    int8_int8: boolean;
    int8_int42: boolean;
    int8_int256: boolean;
    int8_uint8: boolean;
    int8_uint42: boolean;
    int8_uint256: boolean;
    int8_coins: boolean;
    int42_int: boolean;
    int42_int8: boolean;
    int42_int42: boolean;
    int42_int256: boolean;
    int42_uint8: boolean;
    int42_uint42: boolean;
    int42_uint256: boolean;
    int42_coins: boolean;
    int256_int: boolean;
    int256_int8: boolean;
    int256_int42: boolean;
    int256_int256: boolean;
    int256_uint8: boolean;
    int256_uint42: boolean;
    int256_uint256: boolean;
    int256_coins: boolean;
    uint8_int: boolean;
    uint8_int8: boolean;
    uint8_int42: boolean;
    uint8_int256: boolean;
    uint8_uint8: boolean;
    uint8_uint42: boolean;
    uint8_uint256: boolean;
    uint8_coins: boolean;
    uint42_int: boolean;
    uint42_int8: boolean;
    uint42_int42: boolean;
    uint42_int256: boolean;
    uint42_uint8: boolean;
    uint42_uint42: boolean;
    uint42_uint256: boolean;
    uint42_coins: boolean;
    uint256_int: boolean;
    uint256_int8: boolean;
    uint256_int42: boolean;
    uint256_int256: boolean;
    uint256_uint8: boolean;
    uint256_uint42: boolean;
    uint256_uint256: boolean;
    uint256_coins: boolean;
    address_int: boolean;
    address_int8: boolean;
    address_int42: boolean;
    address_int256: boolean;
    address_uint8: boolean;
    address_uint42: boolean;
    address_uint256: boolean;
    address_coins: boolean;
};
export type AsCellAllMapsResult = {
    $$type: 'AsCellAllMapsResult';
    int_int: Cell | null;
    int_int8: Cell | null;
    int_int42: Cell | null;
    int_int256: Cell | null;
    int_uint8: Cell | null;
    int_uint42: Cell | null;
    int_uint256: Cell | null;
    int_coins: Cell | null;
    int8_int: Cell | null;
    int8_int8: Cell | null;
    int8_int42: Cell | null;
    int8_int256: Cell | null;
    int8_uint8: Cell | null;
    int8_uint42: Cell | null;
    int8_uint256: Cell | null;
    int8_coins: Cell | null;
    int42_int: Cell | null;
    int42_int8: Cell | null;
    int42_int42: Cell | null;
    int42_int256: Cell | null;
    int42_uint8: Cell | null;
    int42_uint42: Cell | null;
    int42_uint256: Cell | null;
    int42_coins: Cell | null;
    int256_int: Cell | null;
    int256_int8: Cell | null;
    int256_int42: Cell | null;
    int256_int256: Cell | null;
    int256_uint8: Cell | null;
    int256_uint42: Cell | null;
    int256_uint256: Cell | null;
    int256_coins: Cell | null;
    uint8_int: Cell | null;
    uint8_int8: Cell | null;
    uint8_int42: Cell | null;
    uint8_int256: Cell | null;
    uint8_uint8: Cell | null;
    uint8_uint42: Cell | null;
    uint8_uint256: Cell | null;
    uint8_coins: Cell | null;
    uint42_int: Cell | null;
    uint42_int8: Cell | null;
    uint42_int42: Cell | null;
    uint42_int256: Cell | null;
    uint42_uint8: Cell | null;
    uint42_uint42: Cell | null;
    uint42_uint256: Cell | null;
    uint42_coins: Cell | null;
    uint256_int: Cell | null;
    uint256_int8: Cell | null;
    uint256_int42: Cell | null;
    uint256_int256: Cell | null;
    uint256_uint8: Cell | null;
    uint256_uint42: Cell | null;
    uint256_uint256: Cell | null;
    uint256_coins: Cell | null;
    address_int: Cell | null;
    address_int8: Cell | null;
    address_int42: Cell | null;
    address_int256: Cell | null;
    address_uint8: Cell | null;
    address_uint42: Cell | null;
    address_uint256: Cell | null;
    address_coins: Cell | null;
};
export declare function storeAsCellAllMapsResult(src: AsCellAllMapsResult): (builder: Builder) => void;
export declare function loadAsCellAllMapsResult(slice: Slice): {
    $$type: "AsCellAllMapsResult";
    int_int: Cell | null;
    int_int8: Cell | null;
    int_int42: Cell | null;
    int_int256: Cell | null;
    int_uint8: Cell | null;
    int_uint42: Cell | null;
    int_uint256: Cell | null;
    int_coins: Cell | null;
    int8_int: Cell | null;
    int8_int8: Cell | null;
    int8_int42: Cell | null;
    int8_int256: Cell | null;
    int8_uint8: Cell | null;
    int8_uint42: Cell | null;
    int8_uint256: Cell | null;
    int8_coins: Cell | null;
    int42_int: Cell | null;
    int42_int8: Cell | null;
    int42_int42: Cell | null;
    int42_int256: Cell | null;
    int42_uint8: Cell | null;
    int42_uint42: Cell | null;
    int42_uint256: Cell | null;
    int42_coins: Cell | null;
    int256_int: Cell | null;
    int256_int8: Cell | null;
    int256_int42: Cell | null;
    int256_int256: Cell | null;
    int256_uint8: Cell | null;
    int256_uint42: Cell | null;
    int256_uint256: Cell | null;
    int256_coins: Cell | null;
    uint8_int: Cell | null;
    uint8_int8: Cell | null;
    uint8_int42: Cell | null;
    uint8_int256: Cell | null;
    uint8_uint8: Cell | null;
    uint8_uint42: Cell | null;
    uint8_uint256: Cell | null;
    uint8_coins: Cell | null;
    uint42_int: Cell | null;
    uint42_int8: Cell | null;
    uint42_int42: Cell | null;
    uint42_int256: Cell | null;
    uint42_uint8: Cell | null;
    uint42_uint42: Cell | null;
    uint42_uint256: Cell | null;
    uint42_coins: Cell | null;
    uint256_int: Cell | null;
    uint256_int8: Cell | null;
    uint256_int42: Cell | null;
    uint256_int256: Cell | null;
    uint256_uint8: Cell | null;
    uint256_uint42: Cell | null;
    uint256_uint256: Cell | null;
    uint256_coins: Cell | null;
    address_int: Cell | null;
    address_int8: Cell | null;
    address_int42: Cell | null;
    address_int256: Cell | null;
    address_uint8: Cell | null;
    address_uint42: Cell | null;
    address_uint256: Cell | null;
    address_coins: Cell | null;
};
export type SetAllMaps = {
    $$type: 'SetAllMaps';
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export declare function storeSetAllMaps(src: SetAllMaps): (builder: Builder) => void;
export declare function loadSetAllMaps(slice: Slice): {
    $$type: "SetAllMaps";
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export type DelAllMaps = {
    $$type: 'DelAllMaps';
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
};
export declare function storeDelAllMaps(src: DelAllMaps): (builder: Builder) => void;
export declare function loadDelAllMaps(slice: Slice): {
    $$type: "DelAllMaps";
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
};
export type ReplaceAllMaps = {
    $$type: 'ReplaceAllMaps';
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export declare function storeReplaceAllMaps(src: ReplaceAllMaps): (builder: Builder) => void;
export declare function loadReplaceAllMaps(slice: Slice): {
    $$type: "ReplaceAllMaps";
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export type ReplaceGetAllMaps = {
    $$type: 'ReplaceGetAllMaps';
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export declare function storeReplaceGetAllMaps(src: ReplaceGetAllMaps): (builder: Builder) => void;
export declare function loadReplaceGetAllMaps(slice: Slice): {
    $$type: "ReplaceGetAllMaps";
    keyInt: bigint;
    keyInt8: bigint;
    keyInt42: bigint;
    keyInt256: bigint;
    keyUint8: bigint;
    keyUint42: bigint;
    keyUint256: bigint;
    keyAddress: Address;
    valueInt: bigint | null;
    valueInt8: bigint | null;
    valueInt42: bigint | null;
    valueInt256: bigint | null;
    valueUint8: bigint | null;
    valueUint42: bigint | null;
    valueUint256: bigint | null;
    valueCoins: bigint | null;
};
export type CheckNullReference = {
    $$type: 'CheckNullReference';
};
export declare function storeCheckNullReference(src: CheckNullReference): (builder: Builder) => void;
export declare function loadCheckNullReference(slice: Slice): {
    $$type: "CheckNullReference";
};
export type MapTestContract$Data = {
    $$type: 'MapTestContract$Data';
    int_int: Dictionary<bigint, bigint>;
    int_int8: Dictionary<bigint, number>;
    int_int42: Dictionary<bigint, bigint>;
    int_int256: Dictionary<bigint, bigint>;
    int_uint8: Dictionary<bigint, number>;
    int_uint42: Dictionary<bigint, bigint>;
    int_uint256: Dictionary<bigint, bigint>;
    int_coins: Dictionary<bigint, bigint>;
    int8_int: Dictionary<number, bigint>;
    int8_int8: Dictionary<number, number>;
    int8_int42: Dictionary<number, bigint>;
    int8_int256: Dictionary<number, bigint>;
    int8_uint8: Dictionary<number, number>;
    int8_uint42: Dictionary<number, bigint>;
    int8_uint256: Dictionary<number, bigint>;
    int8_coins: Dictionary<number, bigint>;
    int42_int: Dictionary<bigint, bigint>;
    int42_int8: Dictionary<bigint, number>;
    int42_int42: Dictionary<bigint, bigint>;
    int42_int256: Dictionary<bigint, bigint>;
    int42_uint8: Dictionary<bigint, number>;
    int42_uint42: Dictionary<bigint, bigint>;
    int42_uint256: Dictionary<bigint, bigint>;
    int42_coins: Dictionary<bigint, bigint>;
    int256_int: Dictionary<bigint, bigint>;
    int256_int8: Dictionary<bigint, number>;
    int256_int42: Dictionary<bigint, bigint>;
    int256_int256: Dictionary<bigint, bigint>;
    int256_uint8: Dictionary<bigint, number>;
    int256_uint42: Dictionary<bigint, bigint>;
    int256_uint256: Dictionary<bigint, bigint>;
    int256_coins: Dictionary<bigint, bigint>;
    uint8_int: Dictionary<number, bigint>;
    uint8_int8: Dictionary<number, number>;
    uint8_int42: Dictionary<number, bigint>;
    uint8_int256: Dictionary<number, bigint>;
    uint8_uint8: Dictionary<number, number>;
    uint8_uint42: Dictionary<number, bigint>;
    uint8_uint256: Dictionary<number, bigint>;
    uint8_coins: Dictionary<number, bigint>;
    uint42_int: Dictionary<bigint, bigint>;
    uint42_int8: Dictionary<bigint, number>;
    uint42_int42: Dictionary<bigint, bigint>;
    uint42_int256: Dictionary<bigint, bigint>;
    uint42_uint8: Dictionary<bigint, number>;
    uint42_uint42: Dictionary<bigint, bigint>;
    uint42_uint256: Dictionary<bigint, bigint>;
    uint42_coins: Dictionary<bigint, bigint>;
    uint256_int: Dictionary<bigint, bigint>;
    uint256_int8: Dictionary<bigint, number>;
    uint256_int42: Dictionary<bigint, bigint>;
    uint256_int256: Dictionary<bigint, bigint>;
    uint256_uint8: Dictionary<bigint, number>;
    uint256_uint42: Dictionary<bigint, bigint>;
    uint256_uint256: Dictionary<bigint, bigint>;
    uint256_coins: Dictionary<bigint, bigint>;
    address_int: Dictionary<Address, bigint>;
    address_int8: Dictionary<Address, number>;
    address_int42: Dictionary<Address, bigint>;
    address_int256: Dictionary<Address, bigint>;
    address_uint8: Dictionary<Address, number>;
    address_uint42: Dictionary<Address, bigint>;
    address_uint256: Dictionary<Address, bigint>;
    address_coins: Dictionary<Address, bigint>;
};
export declare function storeMapTestContract$Data(src: MapTestContract$Data): (builder: Builder) => void;
export declare function loadMapTestContract$Data(slice: Slice): {
    $$type: "MapTestContract$Data";
    int_int: Dictionary<bigint, bigint>;
    int_int8: Dictionary<bigint, number>;
    int_int42: Dictionary<bigint, bigint>;
    int_int256: Dictionary<bigint, bigint>;
    int_uint8: Dictionary<bigint, number>;
    int_uint42: Dictionary<bigint, bigint>;
    int_uint256: Dictionary<bigint, bigint>;
    int_coins: Dictionary<bigint, bigint>;
    int8_int: Dictionary<number, bigint>;
    int8_int8: Dictionary<number, number>;
    int8_int42: Dictionary<number, bigint>;
    int8_int256: Dictionary<number, bigint>;
    int8_uint8: Dictionary<number, number>;
    int8_uint42: Dictionary<number, bigint>;
    int8_uint256: Dictionary<number, bigint>;
    int8_coins: Dictionary<number, bigint>;
    int42_int: Dictionary<bigint, bigint>;
    int42_int8: Dictionary<bigint, number>;
    int42_int42: Dictionary<bigint, bigint>;
    int42_int256: Dictionary<bigint, bigint>;
    int42_uint8: Dictionary<bigint, number>;
    int42_uint42: Dictionary<bigint, bigint>;
    int42_uint256: Dictionary<bigint, bigint>;
    int42_coins: Dictionary<bigint, bigint>;
    int256_int: Dictionary<bigint, bigint>;
    int256_int8: Dictionary<bigint, number>;
    int256_int42: Dictionary<bigint, bigint>;
    int256_int256: Dictionary<bigint, bigint>;
    int256_uint8: Dictionary<bigint, number>;
    int256_uint42: Dictionary<bigint, bigint>;
    int256_uint256: Dictionary<bigint, bigint>;
    int256_coins: Dictionary<bigint, bigint>;
    uint8_int: Dictionary<number, bigint>;
    uint8_int8: Dictionary<number, number>;
    uint8_int42: Dictionary<number, bigint>;
    uint8_int256: Dictionary<number, bigint>;
    uint8_uint8: Dictionary<number, number>;
    uint8_uint42: Dictionary<number, bigint>;
    uint8_uint256: Dictionary<number, bigint>;
    uint8_coins: Dictionary<number, bigint>;
    uint42_int: Dictionary<bigint, bigint>;
    uint42_int8: Dictionary<bigint, number>;
    uint42_int42: Dictionary<bigint, bigint>;
    uint42_int256: Dictionary<bigint, bigint>;
    uint42_uint8: Dictionary<bigint, number>;
    uint42_uint42: Dictionary<bigint, bigint>;
    uint42_uint256: Dictionary<bigint, bigint>;
    uint42_coins: Dictionary<bigint, bigint>;
    uint256_int: Dictionary<bigint, bigint>;
    uint256_int8: Dictionary<bigint, number>;
    uint256_int42: Dictionary<bigint, bigint>;
    uint256_int256: Dictionary<bigint, bigint>;
    uint256_uint8: Dictionary<bigint, number>;
    uint256_uint42: Dictionary<bigint, bigint>;
    uint256_uint256: Dictionary<bigint, bigint>;
    uint256_coins: Dictionary<bigint, bigint>;
    address_int: Dictionary<Address, bigint>;
    address_int8: Dictionary<Address, number>;
    address_int42: Dictionary<Address, bigint>;
    address_int256: Dictionary<Address, bigint>;
    address_uint8: Dictionary<Address, number>;
    address_uint42: Dictionary<Address, bigint>;
    address_uint256: Dictionary<Address, bigint>;
    address_coins: Dictionary<Address, bigint>;
};
export declare const MapTestContract_getterMapping: {
    [key: string]: string;
};
export declare class MapTestContract implements Contract {
    static init(): Promise<{
        code: Cell;
        data: Cell;
    }>;
    static fromInit(): Promise<MapTestContract>;
    static fromAddress(address: Address): MapTestContract;
    readonly address: Address;
    readonly init?: {
        code: Cell;
        data: Cell;
    };
    readonly abi: ContractABI;
    private constructor();
    send(provider: ContractProvider, via: Sender, args: {
        value: bigint;
        bounce?: boolean | null | undefined;
    }, message: null | SetAllMaps | DelAllMaps | ReplaceAllMaps | ReplaceGetAllMaps | CheckNullReference): Promise<void>;
    getAllMaps(provider: ContractProvider): Promise<{
        $$type: "MapTestContract$Data";
        int_int: Dictionary<bigint, bigint>;
        int_int8: Dictionary<bigint, number>;
        int_int42: Dictionary<bigint, bigint>;
        int_int256: Dictionary<bigint, bigint>;
        int_uint8: Dictionary<bigint, number>;
        int_uint42: Dictionary<bigint, bigint>;
        int_uint256: Dictionary<bigint, bigint>;
        int_coins: Dictionary<bigint, bigint>;
        int8_int: Dictionary<number, bigint>;
        int8_int8: Dictionary<number, number>;
        int8_int42: Dictionary<number, bigint>;
        int8_int256: Dictionary<number, bigint>;
        int8_uint8: Dictionary<number, number>;
        int8_uint42: Dictionary<number, bigint>;
        int8_uint256: Dictionary<number, bigint>;
        int8_coins: Dictionary<number, bigint>;
        int42_int: Dictionary<bigint, bigint>;
        int42_int8: Dictionary<bigint, number>;
        int42_int42: Dictionary<bigint, bigint>;
        int42_int256: Dictionary<bigint, bigint>;
        int42_uint8: Dictionary<bigint, number>;
        int42_uint42: Dictionary<bigint, bigint>;
        int42_uint256: Dictionary<bigint, bigint>;
        int42_coins: Dictionary<bigint, bigint>;
        int256_int: Dictionary<bigint, bigint>;
        int256_int8: Dictionary<bigint, number>;
        int256_int42: Dictionary<bigint, bigint>;
        int256_int256: Dictionary<bigint, bigint>;
        int256_uint8: Dictionary<bigint, number>;
        int256_uint42: Dictionary<bigint, bigint>;
        int256_uint256: Dictionary<bigint, bigint>;
        int256_coins: Dictionary<bigint, bigint>;
        uint8_int: Dictionary<number, bigint>;
        uint8_int8: Dictionary<number, number>;
        uint8_int42: Dictionary<number, bigint>;
        uint8_int256: Dictionary<number, bigint>;
        uint8_uint8: Dictionary<number, number>;
        uint8_uint42: Dictionary<number, bigint>;
        uint8_uint256: Dictionary<number, bigint>;
        uint8_coins: Dictionary<number, bigint>;
        uint42_int: Dictionary<bigint, bigint>;
        uint42_int8: Dictionary<bigint, number>;
        uint42_int42: Dictionary<bigint, bigint>;
        uint42_int256: Dictionary<bigint, bigint>;
        uint42_uint8: Dictionary<bigint, number>;
        uint42_uint42: Dictionary<bigint, bigint>;
        uint42_uint256: Dictionary<bigint, bigint>;
        uint42_coins: Dictionary<bigint, bigint>;
        uint256_int: Dictionary<bigint, bigint>;
        uint256_int8: Dictionary<bigint, number>;
        uint256_int42: Dictionary<bigint, bigint>;
        uint256_int256: Dictionary<bigint, bigint>;
        uint256_uint8: Dictionary<bigint, number>;
        uint256_uint42: Dictionary<bigint, bigint>;
        uint256_uint256: Dictionary<bigint, bigint>;
        uint256_coins: Dictionary<bigint, bigint>;
        address_int: Dictionary<Address, bigint>;
        address_int8: Dictionary<Address, number>;
        address_int42: Dictionary<Address, bigint>;
        address_int256: Dictionary<Address, bigint>;
        address_uint8: Dictionary<Address, number>;
        address_uint42: Dictionary<Address, bigint>;
        address_uint256: Dictionary<Address, bigint>;
        address_coins: Dictionary<Address, bigint>;
    }>;
    getGetAllMaps(provider: ContractProvider, keyInt: bigint, keyInt8: bigint, keyInt42: bigint, keyInt256: bigint, keyUint8: bigint, keyUint42: bigint, keyUint256: bigint, keyAddress: Address): Promise<{
        $$type: "GetAllMapsResult";
        int_int: bigint | null;
        int_int8: bigint | null;
        int_int42: bigint | null;
        int_int256: bigint | null;
        int_uint8: bigint | null;
        int_uint42: bigint | null;
        int_uint256: bigint | null;
        int_coins: bigint | null;
        int8_int: bigint | null;
        int8_int8: bigint | null;
        int8_int42: bigint | null;
        int8_int256: bigint | null;
        int8_uint8: bigint | null;
        int8_uint42: bigint | null;
        int8_uint256: bigint | null;
        int8_coins: bigint | null;
        int42_int: bigint | null;
        int42_int8: bigint | null;
        int42_int42: bigint | null;
        int42_int256: bigint | null;
        int42_uint8: bigint | null;
        int42_uint42: bigint | null;
        int42_uint256: bigint | null;
        int42_coins: bigint | null;
        int256_int: bigint | null;
        int256_int8: bigint | null;
        int256_int42: bigint | null;
        int256_int256: bigint | null;
        int256_uint8: bigint | null;
        int256_uint42: bigint | null;
        int256_uint256: bigint | null;
        int256_coins: bigint | null;
        uint8_int: bigint | null;
        uint8_int8: bigint | null;
        uint8_int42: bigint | null;
        uint8_int256: bigint | null;
        uint8_uint8: bigint | null;
        uint8_uint42: bigint | null;
        uint8_uint256: bigint | null;
        uint8_coins: bigint | null;
        uint42_int: bigint | null;
        uint42_int8: bigint | null;
        uint42_int42: bigint | null;
        uint42_int256: bigint | null;
        uint42_uint8: bigint | null;
        uint42_uint42: bigint | null;
        uint42_uint256: bigint | null;
        uint42_coins: bigint | null;
        uint256_int: bigint | null;
        uint256_int8: bigint | null;
        uint256_int42: bigint | null;
        uint256_int256: bigint | null;
        uint256_uint8: bigint | null;
        uint256_uint42: bigint | null;
        uint256_uint256: bigint | null;
        uint256_coins: bigint | null;
        address_int: bigint | null;
        address_int8: bigint | null;
        address_int42: bigint | null;
        address_int256: bigint | null;
        address_uint8: bigint | null;
        address_uint42: bigint | null;
        address_uint256: bigint | null;
        address_coins: bigint | null;
    }>;
    getReplaceAllMaps(provider: ContractProvider, keyInt: bigint, keyInt8: bigint, keyInt42: bigint, keyInt256: bigint, keyUint8: bigint, keyUint42: bigint, keyUint256: bigint, keyAddress: Address, valueInt: bigint, valueInt8: bigint, valueInt42: bigint, valueInt256: bigint, valueUint8: bigint, valueUint42: bigint, valueUint256: bigint, valueCoins: bigint): Promise<{
        $$type: "ReplaceAllMapsResult";
        int_int: boolean;
        int_int8: boolean;
        int_int42: boolean;
        int_int256: boolean;
        int_uint8: boolean;
        int_uint42: boolean;
        int_uint256: boolean;
        int_coins: boolean;
        int8_int: boolean;
        int8_int8: boolean;
        int8_int42: boolean;
        int8_int256: boolean;
        int8_uint8: boolean;
        int8_uint42: boolean;
        int8_uint256: boolean;
        int8_coins: boolean;
        int42_int: boolean;
        int42_int8: boolean;
        int42_int42: boolean;
        int42_int256: boolean;
        int42_uint8: boolean;
        int42_uint42: boolean;
        int42_uint256: boolean;
        int42_coins: boolean;
        int256_int: boolean;
        int256_int8: boolean;
        int256_int42: boolean;
        int256_int256: boolean;
        int256_uint8: boolean;
        int256_uint42: boolean;
        int256_uint256: boolean;
        int256_coins: boolean;
        uint8_int: boolean;
        uint8_int8: boolean;
        uint8_int42: boolean;
        uint8_int256: boolean;
        uint8_uint8: boolean;
        uint8_uint42: boolean;
        uint8_uint256: boolean;
        uint8_coins: boolean;
        uint42_int: boolean;
        uint42_int8: boolean;
        uint42_int42: boolean;
        uint42_int256: boolean;
        uint42_uint8: boolean;
        uint42_uint42: boolean;
        uint42_uint256: boolean;
        uint42_coins: boolean;
        uint256_int: boolean;
        uint256_int8: boolean;
        uint256_int42: boolean;
        uint256_int256: boolean;
        uint256_uint8: boolean;
        uint256_uint42: boolean;
        uint256_uint256: boolean;
        uint256_coins: boolean;
        address_int: boolean;
        address_int8: boolean;
        address_int42: boolean;
        address_int256: boolean;
        address_uint8: boolean;
        address_uint42: boolean;
        address_uint256: boolean;
        address_coins: boolean;
    }>;
    getReplaceGetAllMaps(provider: ContractProvider, keyInt: bigint, keyInt8: bigint, keyInt42: bigint, keyInt256: bigint, keyUint8: bigint, keyUint42: bigint, keyUint256: bigint, keyAddress: Address, valueInt: bigint, valueInt8: bigint, valueInt42: bigint, valueInt256: bigint, valueUint8: bigint, valueUint42: bigint, valueUint256: bigint, valueCoins: bigint): Promise<{
        $$type: "ReplaceGetAllMapsResult";
        int_int: bigint | null;
        int_int8: bigint | null;
        int_int42: bigint | null;
        int_int256: bigint | null;
        int_uint8: bigint | null;
        int_uint42: bigint | null;
        int_uint256: bigint | null;
        int_coins: bigint | null;
        int8_int: bigint | null;
        int8_int8: bigint | null;
        int8_int42: bigint | null;
        int8_int256: bigint | null;
        int8_uint8: bigint | null;
        int8_uint42: bigint | null;
        int8_uint256: bigint | null;
        int8_coins: bigint | null;
        int42_int: bigint | null;
        int42_int8: bigint | null;
        int42_int42: bigint | null;
        int42_int256: bigint | null;
        int42_uint8: bigint | null;
        int42_uint42: bigint | null;
        int42_uint256: bigint | null;
        int42_coins: bigint | null;
        int256_int: bigint | null;
        int256_int8: bigint | null;
        int256_int42: bigint | null;
        int256_int256: bigint | null;
        int256_uint8: bigint | null;
        int256_uint42: bigint | null;
        int256_uint256: bigint | null;
        int256_coins: bigint | null;
        uint8_int: bigint | null;
        uint8_int8: bigint | null;
        uint8_int42: bigint | null;
        uint8_int256: bigint | null;
        uint8_uint8: bigint | null;
        uint8_uint42: bigint | null;
        uint8_uint256: bigint | null;
        uint8_coins: bigint | null;
        uint42_int: bigint | null;
        uint42_int8: bigint | null;
        uint42_int42: bigint | null;
        uint42_int256: bigint | null;
        uint42_uint8: bigint | null;
        uint42_uint42: bigint | null;
        uint42_uint256: bigint | null;
        uint42_coins: bigint | null;
        uint256_int: bigint | null;
        uint256_int8: bigint | null;
        uint256_int42: bigint | null;
        uint256_int256: bigint | null;
        uint256_uint8: bigint | null;
        uint256_uint42: bigint | null;
        uint256_uint256: bigint | null;
        uint256_coins: bigint | null;
        address_int: bigint | null;
        address_int8: bigint | null;
        address_int42: bigint | null;
        address_int256: bigint | null;
        address_uint8: bigint | null;
        address_uint42: bigint | null;
        address_uint256: bigint | null;
        address_coins: bigint | null;
    }>;
    getExistsAllMaps(provider: ContractProvider, keyInt: bigint, keyInt8: bigint, keyInt42: bigint, keyInt256: bigint, keyUint8: bigint, keyUint42: bigint, keyUint256: bigint, keyAddress: Address): Promise<{
        $$type: "ExistsAllMapsResult";
        int_int: boolean;
        int_int8: boolean;
        int_int42: boolean;
        int_int256: boolean;
        int_uint8: boolean;
        int_uint42: boolean;
        int_uint256: boolean;
        int_coins: boolean;
        int8_int: boolean;
        int8_int8: boolean;
        int8_int42: boolean;
        int8_int256: boolean;
        int8_uint8: boolean;
        int8_uint42: boolean;
        int8_uint256: boolean;
        int8_coins: boolean;
        int42_int: boolean;
        int42_int8: boolean;
        int42_int42: boolean;
        int42_int256: boolean;
        int42_uint8: boolean;
        int42_uint42: boolean;
        int42_uint256: boolean;
        int42_coins: boolean;
        int256_int: boolean;
        int256_int8: boolean;
        int256_int42: boolean;
        int256_int256: boolean;
        int256_uint8: boolean;
        int256_uint42: boolean;
        int256_uint256: boolean;
        int256_coins: boolean;
        uint8_int: boolean;
        uint8_int8: boolean;
        uint8_int42: boolean;
        uint8_int256: boolean;
        uint8_uint8: boolean;
        uint8_uint42: boolean;
        uint8_uint256: boolean;
        uint8_coins: boolean;
        uint42_int: boolean;
        uint42_int8: boolean;
        uint42_int42: boolean;
        uint42_int256: boolean;
        uint42_uint8: boolean;
        uint42_uint42: boolean;
        uint42_uint256: boolean;
        uint42_coins: boolean;
        uint256_int: boolean;
        uint256_int8: boolean;
        uint256_int42: boolean;
        uint256_int256: boolean;
        uint256_uint8: boolean;
        uint256_uint42: boolean;
        uint256_uint256: boolean;
        uint256_coins: boolean;
        address_int: boolean;
        address_int8: boolean;
        address_int42: boolean;
        address_int256: boolean;
        address_uint8: boolean;
        address_uint42: boolean;
        address_uint256: boolean;
        address_coins: boolean;
    }>;
    getIsEmptyAllMaps(provider: ContractProvider): Promise<{
        $$type: "IsEmptyAllMapsResult";
        int_int: boolean;
        int_int8: boolean;
        int_int42: boolean;
        int_int256: boolean;
        int_uint8: boolean;
        int_uint42: boolean;
        int_uint256: boolean;
        int_coins: boolean;
        int8_int: boolean;
        int8_int8: boolean;
        int8_int42: boolean;
        int8_int256: boolean;
        int8_uint8: boolean;
        int8_uint42: boolean;
        int8_uint256: boolean;
        int8_coins: boolean;
        int42_int: boolean;
        int42_int8: boolean;
        int42_int42: boolean;
        int42_int256: boolean;
        int42_uint8: boolean;
        int42_uint42: boolean;
        int42_uint256: boolean;
        int42_coins: boolean;
        int256_int: boolean;
        int256_int8: boolean;
        int256_int42: boolean;
        int256_int256: boolean;
        int256_uint8: boolean;
        int256_uint42: boolean;
        int256_uint256: boolean;
        int256_coins: boolean;
        uint8_int: boolean;
        uint8_int8: boolean;
        uint8_int42: boolean;
        uint8_int256: boolean;
        uint8_uint8: boolean;
        uint8_uint42: boolean;
        uint8_uint256: boolean;
        uint8_coins: boolean;
        uint42_int: boolean;
        uint42_int8: boolean;
        uint42_int42: boolean;
        uint42_int256: boolean;
        uint42_uint8: boolean;
        uint42_uint42: boolean;
        uint42_uint256: boolean;
        uint42_coins: boolean;
        uint256_int: boolean;
        uint256_int8: boolean;
        uint256_int42: boolean;
        uint256_int256: boolean;
        uint256_uint8: boolean;
        uint256_uint42: boolean;
        uint256_uint256: boolean;
        uint256_coins: boolean;
        address_int: boolean;
        address_int8: boolean;
        address_int42: boolean;
        address_int256: boolean;
        address_uint8: boolean;
        address_uint42: boolean;
        address_uint256: boolean;
        address_coins: boolean;
    }>;
    getAsCellAllMaps(provider: ContractProvider): Promise<{
        $$type: "AsCellAllMapsResult";
        int_int: Cell | null;
        int_int8: Cell | null;
        int_int42: Cell | null;
        int_int256: Cell | null;
        int_uint8: Cell | null;
        int_uint42: Cell | null;
        int_uint256: Cell | null;
        int_coins: Cell | null;
        int8_int: Cell | null;
        int8_int8: Cell | null;
        int8_int42: Cell | null;
        int8_int256: Cell | null;
        int8_uint8: Cell | null;
        int8_uint42: Cell | null;
        int8_uint256: Cell | null;
        int8_coins: Cell | null;
        int42_int: Cell | null;
        int42_int8: Cell | null;
        int42_int42: Cell | null;
        int42_int256: Cell | null;
        int42_uint8: Cell | null;
        int42_uint42: Cell | null;
        int42_uint256: Cell | null;
        int42_coins: Cell | null;
        int256_int: Cell | null;
        int256_int8: Cell | null;
        int256_int42: Cell | null;
        int256_int256: Cell | null;
        int256_uint8: Cell | null;
        int256_uint42: Cell | null;
        int256_uint256: Cell | null;
        int256_coins: Cell | null;
        uint8_int: Cell | null;
        uint8_int8: Cell | null;
        uint8_int42: Cell | null;
        uint8_int256: Cell | null;
        uint8_uint8: Cell | null;
        uint8_uint42: Cell | null;
        uint8_uint256: Cell | null;
        uint8_coins: Cell | null;
        uint42_int: Cell | null;
        uint42_int8: Cell | null;
        uint42_int42: Cell | null;
        uint42_int256: Cell | null;
        uint42_uint8: Cell | null;
        uint42_uint42: Cell | null;
        uint42_uint256: Cell | null;
        uint42_coins: Cell | null;
        uint256_int: Cell | null;
        uint256_int8: Cell | null;
        uint256_int42: Cell | null;
        uint256_int256: Cell | null;
        uint256_uint8: Cell | null;
        uint256_uint42: Cell | null;
        uint256_uint256: Cell | null;
        uint256_coins: Cell | null;
        address_int: Cell | null;
        address_int8: Cell | null;
        address_int42: Cell | null;
        address_int256: Cell | null;
        address_uint8: Cell | null;
        address_uint42: Cell | null;
        address_uint256: Cell | null;
        address_coins: Cell | null;
    }>;
    getCheckNullReference(provider: ContractProvider): Promise<bigint>;
}
