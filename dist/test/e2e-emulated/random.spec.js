"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@ton/core");
const sandbox_1 = require("@ton/sandbox");
const random_RandomContract_1 = require("./contracts/output/random_RandomContract");
require("@ton/test-utils");
describe("random", () => {
    let blockchain;
    let treasure;
    let contract;
    beforeEach(async () => {
        blockchain = await sandbox_1.Blockchain.create();
        blockchain.verbosity.print = false;
        treasure = await blockchain.treasury("treasure");
        contract = blockchain.openContract(await random_RandomContract_1.RandomContract.fromInit());
        const deployResult = await contract.send(treasure.getSender(), { value: (0, core_1.toNano)("10") }, { $$type: "Deploy", queryId: 0n });
        expect(deployResult.transactions).toHaveTransaction({
            from: treasure.address,
            to: contract.address,
            success: true,
            deploy: true,
        });
    });
    it("should implement random correctly", async () => {
        // Check random values
        // NOTE: These values are generated by the emulator and are deterministic.
        //       They also ensure that `randomize_lt` was called, as without it,
        //       the values would differ.
        expect(await contract.getRandomInt()).toBe(12029244659758160506229899028078921673473662712472979861368849515350569944843n);
        expect(await contract.getRandom(0n, 10000n)).toBe(1038n);
    });
});
