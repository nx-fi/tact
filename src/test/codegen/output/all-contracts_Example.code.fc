#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; all-contracts_Example.headers.fc
;;
;; Header files for Example
;; NOTE: declarations are sorted for optimal order
;;

;; $Binary$_load_without_opcode
(slice, (tuple)) $Binary$_load_without_opcode(slice sc_0) inline;

;; $Octal$_load_without_opcode
(slice, (tuple)) $Octal$_load_without_opcode(slice sc_0) inline;

;; $Decimal$_load_without_opcode
(slice, (tuple)) $Decimal$_load_without_opcode(slice sc_0) inline;

;; $Hexadecimal$_load_without_opcode
(slice, (tuple)) $Hexadecimal$_load_without_opcode(slice sc_0) inline;

;; $Example$_contract_init
tuple $Example$_contract_init() impure inline;

;; $Example$_contract_load
tuple $Example$_contract_load() impure inline_ref;

;; $Example$_contract_store
() $Example$_contract_store(tuple v) impure inline;


;; all-contracts_Example.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; all-contracts_Example.native.fc
;; an empty FunC file to test imports of files with .func extension

;; all-contracts_Example.storage.fc
;;
;; Type: Binary
;; Header: 0x0000002a
;; TLB: binary#0000002a  = Binary
;;

(slice, (tuple)) $Binary$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Octal
;; Header: 0x0000002b
;; TLB: octal#0000002b  = Octal
;;

(slice, (tuple)) $Octal$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Decimal
;; Header: 0x0000002c
;; TLB: decimal#0000002c  = Decimal
;;

(slice, (tuple)) $Decimal$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Hexadecimal
;; Header: 0x0000002d
;; TLB: hexadecimal#0000002d  = Hexadecimal
;;

(slice, (tuple)) $Hexadecimal$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Example
;;

tuple $Example$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $Example$_contract_init();
    }
}

() $Example$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;;
;; Contract Example functions
;;

tuple $Example$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

;;
;; Get methods of a Contract Example
;;

;;
;; Routing of a Contract Example
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Example$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var (op, _) = in_msg~load_uint_quiet(32);
    ;; Receive Binary message
    if (op == 0x101010) {
        var $msg = in_msg~$Binary$_load_without_opcode();
        ;; Persist state
        $Example$_contract_store($self);
        return ();
    }
    
    ;; Receive Octal message
    if (op == 0x53) {
        var $msg = in_msg~$Octal$_load_without_opcode();
        ;; Persist state
        $Example$_contract_store($self);
        return ();
    }
    
    ;; Receive Decimal message
    if (op == 44) {
        var $msg = in_msg~$Decimal$_load_without_opcode();
        ;; Persist state
        $Example$_contract_store($self);
        return ();
    }
    
    ;; Receive Hexadecimal message
    if (op == 0x2d) {
        var $msg = in_msg~$Hexadecimal$_load_without_opcode();
        ;; Persist state
        $Example$_contract_store($self);
        return ();
    }
    
    throw(130);
}
