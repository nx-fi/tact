#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; all-contracts_Maps.headers.fc
;;
;; Header files for Maps
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_int_slice
slice __tact_dict_get_int_slice(cell d, int kl, int k) inline;

;; __tact_dict_set_int_slice
(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $TokenInfo$_store
builder $TokenInfo$_store(builder build_0, (slice, int) v) inline;

;; $TokenInfo$_store_cell
cell $TokenInfo$_store_cell((slice, int) v) inline;

;; $TokenInfo$_not_null
((slice, int)) $TokenInfo$_not_null(tuple v) inline;

;; $TokenInfo$_store_opt
cell $TokenInfo$_store_opt(tuple v) inline;

;; $TokenInfo$_load
(slice, ((slice, int))) $TokenInfo$_load(slice sc_0) inline;

;; $TokenInfo$_as_optional
tuple $TokenInfo$_as_optional((slice, int) v) inline;

;; $TokenInfo$_load_opt
tuple $TokenInfo$_load_opt(cell cl) inline;

;; $Replace$_load_without_opcode
(slice, ((cell))) $Replace$_load_without_opcode(slice sc_0) inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Maps$_store
builder $Maps$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell) v) inline;

;; $Maps$_load
(slice, ((cell, cell, cell, cell, cell, cell, cell, cell))) $Maps$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Maps$init$_load
(slice, ((cell))) $Maps$init$_load(slice sc_0) inline;

;; $Maps$_contract_init
(cell, cell, cell, cell, cell, cell, cell, cell) $Maps$_contract_init(cell $arg) impure inline;

;; $Maps$_contract_load
(cell, cell, cell, cell, cell, cell, cell, cell) $Maps$_contract_load() impure inline_ref;

;; $Maps$_contract_store
() $Maps$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Maps$_fun_oneItem
((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_oneItem((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref;

;; $Maps$_fun_itemCheck
((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_itemCheck((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Maps$_fun_allItems
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $Maps$_fun_allItems((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Maps$_fun_forward
((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_fun_forward((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Maps$_fun_notify
((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_fun_notify((cell, cell, cell, cell, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;

;; $TokenInfo$_constructor_ticker_decimals
((slice, int)) $TokenInfo$_constructor_ticker_decimals(slice $ticker, int $decimals) inline;


;; all-contracts_Maps.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) """
    DICTSETREF
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm """
    2 TUPLE
""";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

slice __tact_dict_get_int_slice(cell d, int kl, int k) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_slice(cell d, int kl, int k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set(d, kl, k, v), ());
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_fun_forward((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

((cell, cell, cell, cell, cell, cell, cell, cell), ()) $Maps$_fun_notify((cell, cell, cell, cell, cell, cell, cell, cell) $self, cell $body) impure inline {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)~$Maps$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), ());
}

;; all-contracts_Maps.native.fc
;; an empty FunC file to test imports of files with .func extension

;; all-contracts_Maps.constants.fc
;; String "not found"
slice __gen_slice_string_ef17d523607831d9b150cef9b36c6e32272887eac302eefcd2ca22fed29f4e21() asm """
    B{b5ee9c7241010101000b0000126e6f7420666f756e64de9b0ed2} B>boc <s PUSHSLICE
""";

;; String "SHIB"
slice __gen_slice_string_974f8ddbc705ede61e61b42cacf124a05423b9c40120e70d786f3889001bd327() asm """
    B{b5ee9c72410101010006000008534849429c299a01} B>boc <s PUSHSLICE
""";

;; EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N
slice __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc() asm """
    B{b5ee9c7241010101002400004380107bfaaa5cc6e5368e5f9799188bd798cd22e04ab16d1d8ea4fc37480741e6351064a3e1a6} B>boc <s PUSHSLICE
""";

;; String "DOGE"
slice __gen_slice_string_78fea0ad55f744389997adb1b2c7823104a9b1ad6443ff331d83f89f506d2239() asm """
    B{b5ee9c72410101010006000008444f474563b21fa5} B>boc <s PUSHSLICE
""";

;; all-contracts_Maps.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: TokenInfo
;; TLB: _ ticker:^string decimals:uint8 = TokenInfo
;;

builder $TokenInfo$_store(builder build_0, (slice, int) v) inline {
    var (v'ticker, v'decimals) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'ticker).end_cell());
    build_0 = build_0.store_uint(v'decimals, 8);
    return build_0;
}

cell $TokenInfo$_store_cell((slice, int) v) inline {
    return $TokenInfo$_store(begin_cell(), v).end_cell();
}

((slice, int)) $TokenInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'ticker, int vvv'decimals) = __tact_tuple_destroy_2(v);
    return (vvv'ticker, vvv'decimals);
}

cell $TokenInfo$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $TokenInfo$_store_cell($TokenInfo$_not_null(v));
}

(slice, ((slice, int))) $TokenInfo$_load(slice sc_0) inline {
    var v'ticker = sc_0~load_ref().begin_parse();
    var v'decimals = sc_0~load_uint(8);
    return (sc_0, (v'ticker, v'decimals));
}

tuple $TokenInfo$_as_optional((slice, int) v) inline {
    var (v'ticker, v'decimals) = v;
    return __tact_tuple_create_2(v'ticker, v'decimals);
}

tuple $TokenInfo$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenInfo$_as_optional(sc~$TokenInfo$_load());
}

((slice, int)) $TokenInfo$_constructor_ticker_decimals(slice $ticker, int $decimals) inline {
    return ($ticker, $decimals);
}

;;
;; Type: Replace
;; Header: 0x5285f402
;; TLB: replace#5285f402 items:dict<int, address> = Replace
;;

(slice, ((cell))) $Replace$_load_without_opcode(slice sc_0) inline {
    var v'items = sc_0~load_dict();
    return (sc_0, (v'items));
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Maps
;; TLB: _ mi1:dict<int, ^TokenInfo{ticker:^string,decimals:uint8}> mi2:dict<int, bool> mi3:dict<int, int> mi4:dict<int, address> ma1:dict<address, ^TokenInfo{ticker:^string,decimals:uint8}> ma2:dict<address, bool> ma3:dict<address, int> ma4:dict<address, address> = Maps
;;

builder $Maps$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'mi1, v'mi2, v'mi3, v'mi4, v'ma1, v'ma2, v'ma3, v'ma4) = v;
    build_0 = build_0.store_dict(v'mi1);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'mi2);
    build_1 = build_1.store_dict(v'mi3);
    build_1 = build_1.store_dict(v'mi4);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'ma1);
    build_2 = build_2.store_dict(v'ma2);
    build_2 = build_2.store_dict(v'ma3);
    build_2 = build_2.store_dict(v'ma4);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell, cell, cell, cell, cell))) $Maps$_load(slice sc_0) inline {
    var v'mi1 = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'mi2 = sc_1~load_dict();
    var v'mi3 = sc_1~load_dict();
    var v'mi4 = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'ma1 = sc_2~load_dict();
    var v'ma2 = sc_2~load_dict();
    var v'ma3 = sc_2~load_dict();
    var v'ma4 = sc_2~load_dict();
    return (sc_0, (v'mi1, v'mi2, v'mi3, v'mi4, v'ma1, v'ma2, v'ma3, v'ma4));
}

(slice, ((cell))) $Maps$init$_load(slice sc_0) inline {
    var v'arg = sc_0~load_dict();
    return (sc_0, (v'arg));
}

(cell, cell, cell, cell, cell, cell, cell, cell) $Maps$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Maps$_load();
    } else {
        (cell $arg) = $sc~$Maps$init$_load();
        $sc.end_parse();
        return $Maps$_contract_init($arg);
    }
}

() $Maps$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Maps$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Maps functions
;;

(cell, cell, cell, cell, cell, cell, cell, cell) $Maps$_contract_init(cell $arg) impure inline {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = (null(), null(), null(), null(), null(), null(), null(), null());
    $self'mi2 = $arg;
    return ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4);
}

((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_oneItem((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    var $fresh$ret_2804 = __tact_dict_get_int_slice($self'mi4, 257, $key);
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $fresh$ret_2804);
}

((cell, cell, cell, cell, cell, cell, cell, cell), slice) $Maps$_fun_itemCheck((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    if (null?($TokenInfo$_load_opt(__tact_dict_get_int_cell($self'mi1, 257, 17)))) {
        var $fresh$ret_2805 = __gen_slice_string_ef17d523607831d9b150cef9b36c6e32272887eac302eefcd2ca22fed29f4e21();
        return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $fresh$ret_2805);
    }
    var ($item'ticker, $item'decimals) = $TokenInfo$_not_null($TokenInfo$_load_opt(__tact_dict_get_int_cell($self'mi1, 257, 17)));
    var $fresh$ret_2806 = $item'ticker;
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $fresh$ret_2806);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $Maps$_fun_allItems((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)) = $self;
    var $fresh$ret_2807 = $self'ma1;
    return (($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4), $fresh$ret_2807);
}

;;
;; Get methods of a Contract Maps
;;

_ %oneItem(int $key) method_id(68660) {
    int $key = $key;
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_oneItem($key);
    return res;
}

_ %itemCheck() method_id(102138) {
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_itemCheck();
    return res;
}

_ %allItems() method_id(68968) {
    var self = $Maps$_contract_load();
    var res = self~$Maps$_fun_allItems();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract Maps
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4) = $Maps$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Replace message
        if (op == 1384510466) {
            var ($msg'items) = in_msg~$Replace$_load_without_opcode();
            $self'mi4 = $msg'items;
            ;; Persist state
            $Maps$_contract_store(($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4));
            return ();
        }
        
        ;; Receive Deploy message
        if (op == 2490013878) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            ($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4)~$Maps$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "set keys" message
    if (text_op == 0x00849f04b18beb272337fe85eef99c8f45d68e0f5301a5a2f49f416955649a95) {
        $self'mi1~__tact_dict_set_int_cell(257, 17, $TokenInfo$_store_cell($TokenInfo$_constructor_ticker_decimals(__gen_slice_string_974f8ddbc705ede61e61b42cacf124a05423b9c40120e70d786f3889001bd327(), 9)));
        $self'mi2~__tact_dict_set_int_int(257, 41507952295811122, true, 1);
        $self'mi3~__tact_dict_set_int_int(257, 1766847064778384329583297500742918515827483896875618958121606201292619776, 1725436586697640946858688965569256363112777243042596638790631055949824, 257);
        $self'mi4~__tact_dict_set_int_slice(257, -900, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc());
        $self'ma1~__tact_dict_set_slice_cell(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), $TokenInfo$_store_cell($TokenInfo$_constructor_ticker_decimals(__gen_slice_string_78fea0ad55f744389997adb1b2c7823104a9b1ad6443ff331d83f89f506d2239(), 18)));
        $self'ma2~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), true, 1);
        $self'ma3~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), 1230000000, 257);
        $self'ma4~__tact_dict_set_slice_slice(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), $global_myAddress());
        ;; Persist state
        $Maps$_contract_store(($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4));
        return ();
    }
    ;; Receive "delete keys" message
    if (text_op == 0x077ad9eb29d9aa49579300132df35485cd9fd98ef64a8a8d2c73324fea5d42b9) {
        $self'mi1~__tact_dict_set_int_cell(257, 17, $TokenInfo$_store_opt(null()));
        $self'mi2~__tact_dict_set_int_int(257, 41507952295811122, null(), 1);
        $self'mi3~__tact_dict_set_int_int(257, 1766847064778384329583297500742918515827483896875618958121606201292619776, null(), 257);
        $self'mi4~__tact_dict_set_int_slice(257, -900, null());
        $self'ma1~__tact_dict_set_slice_cell(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), $TokenInfo$_store_opt(null()));
        $self'ma2~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null(), 1);
        $self'ma3~__tact_dict_set_slice_int(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null(), 257);
        $self'ma4~__tact_dict_set_slice_slice(267, __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), null());
        ;; Persist state
        $Maps$_contract_store(($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4));
        return ();
    }
    ;; Receive "clear" message
    if (text_op == 0xd04643cce6cc8762961eb38d3a48f2f1f18c4e7585f5900b7371b83736007630) {
        $self'mi1 = null();
        $self'mi2 = null();
        $self'mi3 = null();
        $self'mi4 = null();
        $self'ma1 = null();
        $self'ma2 = null();
        $self'ma3 = null();
        $self'ma4 = null();
        ;; Persist state
        $Maps$_contract_store(($self'mi1, $self'mi2, $self'mi3, $self'mi4, $self'ma1, $self'ma2, $self'ma3, $self'ma4));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}