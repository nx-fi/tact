#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; math_MathTester.headers.fc
;;
;; Header files for MathTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable
int __tact_slice_eq_bits_nullable(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_int_neq_nullable_one
int __tact_int_neq_nullable_one(int a, int b) inline;

;; __tact_int_eq_nullable
int __tact_int_eq_nullable(int a, int b) inline;

;; __tact_int_neq_nullable
int __tact_int_neq_nullable(int a, int b) inline;

;; __tact_cell_eq
int __tact_cell_eq(cell a, cell b) inline;

;; __tact_cell_neq
int __tact_cell_neq(cell a, cell b) inline;

;; __tact_cell_eq_nullable_one
int __tact_cell_eq_nullable_one(cell a, cell b) inline;

;; __tact_cell_neq_nullable_one
int __tact_cell_neq_nullable_one(cell a, cell b) inline;

;; __tact_cell_eq_nullable
int __tact_cell_eq_nullable(cell a, cell b) inline;

;; __tact_cell_neq_nullable
int __tact_cell_neq_nullable(cell a, cell b) inline;

;; __tact_slice_eq
int __tact_slice_eq(slice a, slice b) inline;

;; __tact_slice_neq
int __tact_slice_neq(slice a, slice b) inline;

;; __tact_slice_eq_nullable_one
int __tact_slice_eq_nullable_one(slice a, slice b) inline;

;; __tact_slice_neq_nullable_one
int __tact_slice_neq_nullable_one(slice a, slice b) inline;

;; __tact_slice_eq_nullable
int __tact_slice_eq_nullable(slice a, slice b) inline;

;; __tact_slice_neq_nullable
int __tact_slice_neq_nullable(slice a, slice b) inline;

;; __tact_log
int __tact_log(int num, int base) inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $MathTester$_contract_init
tuple $MathTester$_contract_init() impure inline;

;; $MathTester$_contract_load
tuple $MathTester$_contract_load() impure inline;

;; $global_pow
int $global_pow(int $base, int $exp) impure inline;

;; $global_sqrt
int $global_sqrt(int $num) impure inline_ref;

;; $MathTester$_fun_add
(tuple, int) $MathTester$_fun_add(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_sub
(tuple, int) $MathTester$_fun_sub(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_mul
(tuple, int) $MathTester$_fun_mul(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_div
(tuple, int) $MathTester$_fun_div(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_mod
(tuple, int) $MathTester$_fun_mod(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_shr
(tuple, int) $MathTester$_fun_shr(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_shl
(tuple, int) $MathTester$_fun_shl(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_and
(tuple, int) $MathTester$_fun_and(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_or
(tuple, int) $MathTester$_fun_or(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_xor
(tuple, int) $MathTester$_fun_xor(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_bitwise_not
(tuple, int) $MathTester$_fun_bitwise_not(tuple $self, int $a) impure inline_ref;

;; $MathTester$_fun_addAug
(tuple, int) $MathTester$_fun_addAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_subAug
(tuple, int) $MathTester$_fun_subAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_mulAug
(tuple, int) $MathTester$_fun_mulAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_divAug
(tuple, int) $MathTester$_fun_divAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_modAug
(tuple, int) $MathTester$_fun_modAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_bitwiseOrAug
(tuple, int) $MathTester$_fun_bitwiseOrAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_bitwiseAndAug
(tuple, int) $MathTester$_fun_bitwiseAndAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_bitwiseXorAug
(tuple, int) $MathTester$_fun_bitwiseXorAug(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare1
(tuple, int) $MathTester$_fun_compare1(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare2
(tuple, int) $MathTester$_fun_compare2(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare3
(tuple, int) $MathTester$_fun_compare3(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare4
(tuple, int) $MathTester$_fun_compare4(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare5
(tuple, int) $MathTester$_fun_compare5(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare6
(tuple, int) $MathTester$_fun_compare6(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare7
(tuple, int) $MathTester$_fun_compare7(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare8
(tuple, int) $MathTester$_fun_compare8(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare9
(tuple, int) $MathTester$_fun_compare9(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare10
(tuple, int) $MathTester$_fun_compare10(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_compare11
(tuple, int) $MathTester$_fun_compare11(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare12
(tuple, int) $MathTester$_fun_compare12(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare13
(tuple, int) $MathTester$_fun_compare13(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare14
(tuple, int) $MathTester$_fun_compare14(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare15
(tuple, int) $MathTester$_fun_compare15(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare16
(tuple, int) $MathTester$_fun_compare16(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare17
(tuple, int) $MathTester$_fun_compare17(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare18
(tuple, int) $MathTester$_fun_compare18(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare19
(tuple, int) $MathTester$_fun_compare19(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare20
(tuple, int) $MathTester$_fun_compare20(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare21
(tuple, int) $MathTester$_fun_compare21(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare22
(tuple, int) $MathTester$_fun_compare22(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare23
(tuple, int) $MathTester$_fun_compare23(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare24
(tuple, int) $MathTester$_fun_compare24(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare25
(tuple, int) $MathTester$_fun_compare25(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare26
(tuple, int) $MathTester$_fun_compare26(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare27
(tuple, int) $MathTester$_fun_compare27(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare28
(tuple, int) $MathTester$_fun_compare28(tuple $self, cell $a, cell $b) impure inline_ref;

;; $MathTester$_fun_compare29
(tuple, int) $MathTester$_fun_compare29(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare30
(tuple, int) $MathTester$_fun_compare30(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare31
(tuple, int) $MathTester$_fun_compare31(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare32
(tuple, int) $MathTester$_fun_compare32(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare33
(tuple, int) $MathTester$_fun_compare33(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare34
(tuple, int) $MathTester$_fun_compare34(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare35
(tuple, int) $MathTester$_fun_compare35(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare36
(tuple, int) $MathTester$_fun_compare36(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare37
(tuple, int) $MathTester$_fun_compare37(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare38
(tuple, int) $MathTester$_fun_compare38(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare39
(tuple, int) $MathTester$_fun_compare39(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare40
(tuple, int) $MathTester$_fun_compare40(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare41
(tuple, int) $MathTester$_fun_compare41(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare42
(tuple, int) $MathTester$_fun_compare42(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare43
(tuple, int) $MathTester$_fun_compare43(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_compare44
(tuple, int) $MathTester$_fun_compare44(tuple $self, slice $a, slice $b) impure inline_ref;

;; $MathTester$_fun_isNull1
(tuple, int) $MathTester$_fun_isNull1(tuple $self, int $a) impure inline_ref;

;; $MathTester$_fun_isNotNull1
(tuple, int) $MathTester$_fun_isNotNull1(tuple $self, int $a) impure inline_ref;

;; $MathTester$_fun_isNull2
(tuple, int) $MathTester$_fun_isNull2(tuple $self, slice $address) impure inline_ref;

;; $MathTester$_fun_isNotNull2
(tuple, int) $MathTester$_fun_isNotNull2(tuple $self, slice $address) impure inline_ref;

;; $MathTester$_fun_isNull3
(tuple, int) $MathTester$_fun_isNull3(tuple $self, cell $cell) impure inline_ref;

;; $MathTester$_fun_isNotNull3
(tuple, int) $MathTester$_fun_isNotNull3(tuple $self, cell $cell) impure inline_ref;

;; $MathTester$_fun_log2
(tuple, int) $MathTester$_fun_log2(tuple $self, int $num) impure inline_ref;

;; $MathTester$_fun_log
(tuple, int) $MathTester$_fun_log(tuple $self, int $num, int $base) impure inline_ref;

;; $MathTester$_fun_pow
(tuple, int) $MathTester$_fun_pow(tuple $self, int $base, int $exp) impure inline_ref;

;; $MathTester$_fun_pow2
(tuple, int) $MathTester$_fun_pow2(tuple $self, int $exp) impure inline_ref;

;; $MathTester$_fun_precedence1
(tuple, int) $MathTester$_fun_precedence1(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence2
(tuple, int) $MathTester$_fun_precedence2(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence3
(tuple, int) $MathTester$_fun_precedence3(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence4
(tuple, int) $MathTester$_fun_precedence4(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence5
(tuple, int) $MathTester$_fun_precedence5(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence6
(tuple, int) $MathTester$_fun_precedence6(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence7
(tuple, int) $MathTester$_fun_precedence7(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence8
(tuple, int) $MathTester$_fun_precedence8(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence9
(tuple, int) $MathTester$_fun_precedence9(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence10
(tuple, int) $MathTester$_fun_precedence10(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence11
(tuple, int) $MathTester$_fun_precedence11(tuple $self) impure inline_ref;

;; $MathTester$_fun_precedence12
(tuple, int) $MathTester$_fun_precedence12(tuple $self) impure inline_ref;

;; $MathTester$_fun_bitwiseNot1
(tuple, int) $MathTester$_fun_bitwiseNot1(tuple $self, int $x) impure inline_ref;

;; $MathTester$_fun_bitwiseNot2
(tuple, int) $MathTester$_fun_bitwiseNot2(tuple $self, int $x) impure inline_ref;

;; $MathTester$_fun_bitwiseNot3
(tuple, int) $MathTester$_fun_bitwiseNot3(tuple $self, int $x) impure inline_ref;

;; $MathTester$_fun_bitwiseNot4
(tuple, int) $MathTester$_fun_bitwiseNot4(tuple $self, int $x) impure inline_ref;

;; $MathTester$_fun_augmentedAnd
(tuple, int) $MathTester$_fun_augmentedAnd(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_augmentedOr
(tuple, int) $MathTester$_fun_augmentedOr(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_augmentedShiftLeft
(tuple, int) $MathTester$_fun_augmentedShiftLeft(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_augmentedShiftRight
(tuple, int) $MathTester$_fun_augmentedShiftRight(tuple $self, int $a, int $b) impure inline_ref;

;; $MathTester$_fun_shiftLeft0
(tuple, int) $MathTester$_fun_shiftLeft0(tuple $self, int $i) impure inline_ref;

;; $MathTester$_fun_shiftRight0
(tuple, int) $MathTester$_fun_shiftRight0(tuple $self, int $i) impure inline_ref;

;; $MathTester$_fun_sign
(tuple, int) $MathTester$_fun_sign(tuple $self, int $x) impure inline_ref;

;; $MathTester$_fun_divc
(tuple, int) $MathTester$_fun_divc(tuple $self, int $x, int $y) impure inline_ref;

;; $MathTester$_fun_muldivc
(tuple, int) $MathTester$_fun_muldivc(tuple $self, int $x, int $y, int $z) impure inline_ref;

;; $MathTester$_fun_mulShiftRight
(tuple, int) $MathTester$_fun_mulShiftRight(tuple $self, int $x, int $y, int $z) impure inline_ref;

;; $MathTester$_fun_mulShiftRightRound
(tuple, int) $MathTester$_fun_mulShiftRightRound(tuple $self, int $x, int $y, int $z) impure inline_ref;

;; $MathTester$_fun_mulShiftRightCeil
(tuple, int) $MathTester$_fun_mulShiftRightCeil(tuple $self, int $x, int $y, int $z) impure inline_ref;

;; $MathTester$_fun_sqrt
(tuple, int) $MathTester$_fun_sqrt(tuple $self, int $x) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $MathTester$_fun_forward
(tuple, ()) $MathTester$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $MathTester$_fun_notify
(tuple, ()) $MathTester$_fun_notify(tuple $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; math_MathTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline {
    return (null?(a)) ? (false) : (equal_slices_bits(a, b));
}

int __tact_slice_eq_bits_nullable(slice a, slice b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( equal_slices_bits(a, b) ) : ( false ) );
}

int __tact_int_eq_nullable_one(int a, int b) inline {
    return (null?(a)) ? (false) : (a == b);
}

int __tact_int_neq_nullable_one(int a, int b) inline {
    return (null?(a)) ? (true) : (a != b);
}

int __tact_int_eq_nullable(int a, int b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a == b ) : ( false ) );
}

int __tact_int_neq_nullable(int a, int b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a != b ) : ( true ) );
}

int __tact_cell_eq(cell a, cell b) inline {
    return (a.cell_hash() ==  b.cell_hash());
}

int __tact_cell_neq(cell a, cell b) inline {
    return (a.cell_hash() !=  b.cell_hash());
}

int __tact_cell_eq_nullable_one(cell a, cell b) inline {
    return (null?(a)) ? (false) : (a.cell_hash() == b.cell_hash());
}

int __tact_cell_neq_nullable_one(cell a, cell b) inline {
    return (null?(a)) ? (true) : (a.cell_hash() != b.cell_hash());
}

int __tact_cell_eq_nullable(cell a, cell b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() == b.cell_hash() ) : ( false ) );
}

int __tact_cell_neq_nullable(cell a, cell b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.cell_hash() != b.cell_hash() ) : ( true ) );
}

int __tact_slice_eq(slice a, slice b) inline {
    return (a.slice_hash() ==  b.slice_hash());
}

int __tact_slice_neq(slice a, slice b) inline {
    return (a.slice_hash() !=  b.slice_hash());
}

int __tact_slice_eq_nullable_one(slice a, slice b) inline {
    return (null?(a)) ? (false) : (a.slice_hash() == b.slice_hash());
}

int __tact_slice_neq_nullable_one(slice a, slice b) inline {
    return (null?(a)) ? (true) : (a.slice_hash() != b.slice_hash());
}

int __tact_slice_eq_nullable(slice a, slice b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( true ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() == b.slice_hash() ) : ( false ) );
}

int __tact_slice_neq_nullable(slice a, slice b) inline {
    var a_is_null = null?(a);
    var b_is_null = null?(b);
    return ( a_is_null & b_is_null ) ? ( false ) : ( ( ( ~ a_is_null ) & ( ~ b_is_null ) ) ? ( a.slice_hash() != b.slice_hash() ) : ( true ) );
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

int __tact_log(int num, int base) inline {
    throw_unless(5, num > 0);
    throw_unless(5, base > 1);
    if (num < base) {
        return 0;
    }
    int result = 0;
    while (num >= base) {
        num /= base;
        result += 1;
    }
    return result;
}

int $global_log2(int $num) impure asm """
    DUP 5 THROWIFNOT UBITSIZE DEC
""";

int $global_pow(int $base, int $exp) impure inline {
    throw_unless(5, ($exp >= 0));
    int $result = 1;
    repeat ($exp) {
        $result = $result * $base;
    }
    return $result;
}

int $global_pow2(int $exp) impure asm """
    POW2
""";

int $global_sign(int $x) impure asm """
    SGN
""";

int $global_divc(int $x, int $y) impure asm """
    DIVC
""";

int $global_muldivc(int $x, int $y, int $z) impure asm """
    MULDIVC
""";

int $global_mulShiftRight(int $x, int $y, int $z) impure asm """
    MULRSHIFT
""";

int $global_mulShiftRightRound(int $x, int $y, int $z) impure asm """
    MULRSHIFTR
""";

int $global_mulShiftRightCeil(int $x, int $y, int $z) impure asm """
    MULRSHIFTC
""";

int $global_sqrt(int $num) impure inline_ref {
    if (($num == 0)) {
        return 0;
    }
    int $s = $global_log2($num);
    int $x = (($s == 1) ? ((($num - 1) / 2) + 1) : (1 << (($s + 1) / 2)));
    int $q = 0;
    do {
        $q = (($global_divc($num, $x) - $x) / 2);
        $x = $x + $q;
    } until (($q == 0));
    return $x;
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

(tuple, ()) $MathTester$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var ($self) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return ($self, ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return ($self, ());
}

(tuple, ()) $MathTester$_fun_notify(tuple $self, cell $body) impure inline {
    var ($self) = $self;
    $self~$MathTester$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return ($self, ());
}

;; math_MathTester.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: MathTester
;; TLB: _  = MathTester
;;

tuple $MathTester$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $MathTester$_contract_init();
    }
}

;;
;; Contract MathTester functions
;;

tuple $MathTester$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(tuple, int) $MathTester$_fun_add(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_514 = ($a + $b);
    return ($self, $fresh$ret_514);
}

(tuple, int) $MathTester$_fun_sub(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_515 = ($a - $b);
    return ($self, $fresh$ret_515);
}

(tuple, int) $MathTester$_fun_mul(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_516 = ($a * $b);
    return ($self, $fresh$ret_516);
}

(tuple, int) $MathTester$_fun_div(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_517 = ($a / $b);
    return ($self, $fresh$ret_517);
}

(tuple, int) $MathTester$_fun_mod(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_518 = ($a % $b);
    return ($self, $fresh$ret_518);
}

(tuple, int) $MathTester$_fun_shr(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_519 = ($a >> $b);
    return ($self, $fresh$ret_519);
}

(tuple, int) $MathTester$_fun_shl(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_520 = ($a << $b);
    return ($self, $fresh$ret_520);
}

(tuple, int) $MathTester$_fun_and(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_521 = ($a & $b);
    return ($self, $fresh$ret_521);
}

(tuple, int) $MathTester$_fun_or(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_522 = ($a | $b);
    return ($self, $fresh$ret_522);
}

(tuple, int) $MathTester$_fun_xor(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_523 = ($a ^ $b);
    return ($self, $fresh$ret_523);
}

(tuple, int) $MathTester$_fun_bitwise_not(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_524 = (~ $a);
    return ($self, $fresh$ret_524);
}

(tuple, int) $MathTester$_fun_addAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a + $b;
    var $fresh$ret_525 = $a;
    return ($self, $fresh$ret_525);
}

(tuple, int) $MathTester$_fun_subAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a - $b;
    var $fresh$ret_526 = $a;
    return ($self, $fresh$ret_526);
}

(tuple, int) $MathTester$_fun_mulAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a * $b;
    var $fresh$ret_527 = $a;
    return ($self, $fresh$ret_527);
}

(tuple, int) $MathTester$_fun_divAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a / $b;
    var $fresh$ret_528 = $a;
    return ($self, $fresh$ret_528);
}

(tuple, int) $MathTester$_fun_modAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a % $b;
    var $fresh$ret_529 = $a;
    return ($self, $fresh$ret_529);
}

(tuple, int) $MathTester$_fun_bitwiseOrAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a | $b;
    var $fresh$ret_530 = $a;
    return ($self, $fresh$ret_530);
}

(tuple, int) $MathTester$_fun_bitwiseAndAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a & $b;
    var $fresh$ret_531 = $a;
    return ($self, $fresh$ret_531);
}

(tuple, int) $MathTester$_fun_bitwiseXorAug(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a ^ $b;
    var $fresh$ret_532 = $a;
    return ($self, $fresh$ret_532);
}

(tuple, int) $MathTester$_fun_compare1(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_533 = __tact_int_eq_nullable_one($b, $a);
    return ($self, $fresh$ret_533);
}

(tuple, int) $MathTester$_fun_compare2(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_534 = __tact_int_neq_nullable_one($b, $a);
    return ($self, $fresh$ret_534);
}

(tuple, int) $MathTester$_fun_compare3(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_535 = __tact_int_eq_nullable_one($a, $b);
    return ($self, $fresh$ret_535);
}

(tuple, int) $MathTester$_fun_compare4(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_536 = __tact_int_neq_nullable_one($a, $b);
    return ($self, $fresh$ret_536);
}

(tuple, int) $MathTester$_fun_compare5(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_537 = __tact_int_eq_nullable($a, $b);
    return ($self, $fresh$ret_537);
}

(tuple, int) $MathTester$_fun_compare6(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_538 = __tact_int_neq_nullable($a, $b);
    return ($self, $fresh$ret_538);
}

(tuple, int) $MathTester$_fun_compare7(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_539 = ($a > $b);
    return ($self, $fresh$ret_539);
}

(tuple, int) $MathTester$_fun_compare8(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_540 = ($a >= $b);
    return ($self, $fresh$ret_540);
}

(tuple, int) $MathTester$_fun_compare9(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_541 = ($a < $b);
    return ($self, $fresh$ret_541);
}

(tuple, int) $MathTester$_fun_compare10(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_542 = ($a <= $b);
    return ($self, $fresh$ret_542);
}

(tuple, int) $MathTester$_fun_compare11(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_543 = ( equal_slices_bits($b, $a) );
    return ($self, $fresh$ret_543);
}

(tuple, int) $MathTester$_fun_compare12(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_544 = ( __tact_slice_eq_bits_nullable_one($b, $a) );
    return ($self, $fresh$ret_544);
}

(tuple, int) $MathTester$_fun_compare13(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_545 = ( __tact_slice_eq_bits_nullable_one($a, $b) );
    return ($self, $fresh$ret_545);
}

(tuple, int) $MathTester$_fun_compare14(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_546 = ( __tact_slice_eq_bits_nullable($a, $b) );
    return ($self, $fresh$ret_546);
}

(tuple, int) $MathTester$_fun_compare15(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_547 = ( ~ equal_slices_bits($b, $a) );
    return ($self, $fresh$ret_547);
}

(tuple, int) $MathTester$_fun_compare16(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_548 = ( ~ __tact_slice_eq_bits_nullable_one($b, $a) );
    return ($self, $fresh$ret_548);
}

(tuple, int) $MathTester$_fun_compare17(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_549 = ( ~ __tact_slice_eq_bits_nullable_one($a, $b) );
    return ($self, $fresh$ret_549);
}

(tuple, int) $MathTester$_fun_compare18(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_550 = ( ~ __tact_slice_eq_bits_nullable($a, $b) );
    return ($self, $fresh$ret_550);
}

(tuple, int) $MathTester$_fun_compare19(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_551 = __tact_cell_eq($b, $a);
    return ($self, $fresh$ret_551);
}

(tuple, int) $MathTester$_fun_compare20(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_552 = __tact_cell_eq_nullable_one($b, $a);
    return ($self, $fresh$ret_552);
}

(tuple, int) $MathTester$_fun_compare21(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_553 = __tact_cell_eq_nullable_one($a, $b);
    return ($self, $fresh$ret_553);
}

(tuple, int) $MathTester$_fun_compare22(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_554 = __tact_cell_eq_nullable($a, $b);
    return ($self, $fresh$ret_554);
}

(tuple, int) $MathTester$_fun_compare23(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_555 = __tact_cell_neq($b, $a);
    return ($self, $fresh$ret_555);
}

(tuple, int) $MathTester$_fun_compare24(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_556 = __tact_cell_neq_nullable_one($b, $a);
    return ($self, $fresh$ret_556);
}

(tuple, int) $MathTester$_fun_compare25(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_557 = __tact_cell_neq_nullable_one($a, $b);
    return ($self, $fresh$ret_557);
}

(tuple, int) $MathTester$_fun_compare26(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_558 = __tact_cell_neq_nullable($a, $b);
    return ($self, $fresh$ret_558);
}

(tuple, int) $MathTester$_fun_compare27(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_559 = __tact_cell_eq_nullable($a, $b);
    return ($self, $fresh$ret_559);
}

(tuple, int) $MathTester$_fun_compare28(tuple $self, cell $a, cell $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_560 = __tact_cell_neq_nullable($a, $b);
    return ($self, $fresh$ret_560);
}

(tuple, int) $MathTester$_fun_compare29(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_561 = __tact_slice_eq($b, $a);
    return ($self, $fresh$ret_561);
}

(tuple, int) $MathTester$_fun_compare30(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_562 = __tact_slice_eq_nullable_one($b, $a);
    return ($self, $fresh$ret_562);
}

(tuple, int) $MathTester$_fun_compare31(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_563 = __tact_slice_eq_nullable_one($a, $b);
    return ($self, $fresh$ret_563);
}

(tuple, int) $MathTester$_fun_compare32(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_564 = __tact_slice_eq_nullable($a, $b);
    return ($self, $fresh$ret_564);
}

(tuple, int) $MathTester$_fun_compare33(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_565 = __tact_slice_neq($b, $a);
    return ($self, $fresh$ret_565);
}

(tuple, int) $MathTester$_fun_compare34(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_566 = __tact_slice_neq_nullable_one($b, $a);
    return ($self, $fresh$ret_566);
}

(tuple, int) $MathTester$_fun_compare35(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_567 = __tact_slice_neq_nullable_one($a, $b);
    return ($self, $fresh$ret_567);
}

(tuple, int) $MathTester$_fun_compare36(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_568 = __tact_slice_neq_nullable($a, $b);
    return ($self, $fresh$ret_568);
}

(tuple, int) $MathTester$_fun_compare37(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_569 = __tact_slice_eq($b, $a);
    return ($self, $fresh$ret_569);
}

(tuple, int) $MathTester$_fun_compare38(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_570 = __tact_slice_eq_nullable_one($b, $a);
    return ($self, $fresh$ret_570);
}

(tuple, int) $MathTester$_fun_compare39(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_571 = __tact_slice_eq_nullable_one($a, $b);
    return ($self, $fresh$ret_571);
}

(tuple, int) $MathTester$_fun_compare40(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_572 = __tact_slice_eq_nullable($a, $b);
    return ($self, $fresh$ret_572);
}

(tuple, int) $MathTester$_fun_compare41(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_573 = __tact_slice_neq($b, $a);
    return ($self, $fresh$ret_573);
}

(tuple, int) $MathTester$_fun_compare42(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_574 = __tact_slice_neq_nullable_one($b, $a);
    return ($self, $fresh$ret_574);
}

(tuple, int) $MathTester$_fun_compare43(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_575 = __tact_slice_neq_nullable_one($a, $b);
    return ($self, $fresh$ret_575);
}

(tuple, int) $MathTester$_fun_compare44(tuple $self, slice $a, slice $b) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_576 = __tact_slice_neq_nullable($a, $b);
    return ($self, $fresh$ret_576);
}

(tuple, int) $MathTester$_fun_isNull1(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_577 = null?($a);
    return ($self, $fresh$ret_577);
}

(tuple, int) $MathTester$_fun_isNotNull1(tuple $self, int $a) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_578 = (~ null?($a));
    return ($self, $fresh$ret_578);
}

(tuple, int) $MathTester$_fun_isNull2(tuple $self, slice $address) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_579 = null?($address);
    return ($self, $fresh$ret_579);
}

(tuple, int) $MathTester$_fun_isNotNull2(tuple $self, slice $address) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_580 = (~ null?($address));
    return ($self, $fresh$ret_580);
}

(tuple, int) $MathTester$_fun_isNull3(tuple $self, cell $cell) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_581 = null?($cell);
    return ($self, $fresh$ret_581);
}

(tuple, int) $MathTester$_fun_isNotNull3(tuple $self, cell $cell) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_582 = (~ null?($cell));
    return ($self, $fresh$ret_582);
}

(tuple, int) $MathTester$_fun_log2(tuple $self, int $num) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_583 = $global_log2($num);
    return ($self, $fresh$ret_583);
}

(tuple, int) $MathTester$_fun_log(tuple $self, int $num, int $base) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_584 = __tact_log($num, $base);
    return ($self, $fresh$ret_584);
}

(tuple, int) $MathTester$_fun_pow(tuple $self, int $base, int $exp) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_585 = $global_pow($base, $exp);
    return ($self, $fresh$ret_585);
}

(tuple, int) $MathTester$_fun_pow2(tuple $self, int $exp) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_586 = $global_pow2($exp);
    return ($self, $fresh$ret_586);
}

(tuple, int) $MathTester$_fun_precedence1(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_587 = 12;
    return ($self, $fresh$ret_587);
}

(tuple, int) $MathTester$_fun_precedence2(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_588 = 4;
    return ($self, $fresh$ret_588);
}

(tuple, int) $MathTester$_fun_precedence3(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_589 = 12;
    return ($self, $fresh$ret_589);
}

(tuple, int) $MathTester$_fun_precedence4(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_590 = 12;
    return ($self, $fresh$ret_590);
}

(tuple, int) $MathTester$_fun_precedence5(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_591 = 5;
    return ($self, $fresh$ret_591);
}

(tuple, int) $MathTester$_fun_precedence6(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_592 = 0;
    return ($self, $fresh$ret_592);
}

(tuple, int) $MathTester$_fun_precedence7(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_593 = 7;
    return ($self, $fresh$ret_593);
}

(tuple, int) $MathTester$_fun_precedence8(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_594 = 3;
    return ($self, $fresh$ret_594);
}

(tuple, int) $MathTester$_fun_precedence9(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_595 = 7;
    return ($self, $fresh$ret_595);
}

(tuple, int) $MathTester$_fun_precedence10(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_596 = 3;
    return ($self, $fresh$ret_596);
}

(tuple, int) $MathTester$_fun_precedence11(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_597 = 3;
    return ($self, $fresh$ret_597);
}

(tuple, int) $MathTester$_fun_precedence12(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_598 = 5;
    return ($self, $fresh$ret_598);
}

(tuple, int) $MathTester$_fun_bitwiseNot1(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_599 = (~ (~ $x));
    return ($self, $fresh$ret_599);
}

(tuple, int) $MathTester$_fun_bitwiseNot2(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_600 = (~ (~ (~ $x)));
    return ($self, $fresh$ret_600);
}

(tuple, int) $MathTester$_fun_bitwiseNot3(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_601 = (~ (- $x));
    return ($self, $fresh$ret_601);
}

(tuple, int) $MathTester$_fun_bitwiseNot4(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_602 = (- (~ $x));
    return ($self, $fresh$ret_602);
}

(tuple, int) $MathTester$_fun_augmentedAnd(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a & $b;
    var $fresh$ret_603 = $a;
    return ($self, $fresh$ret_603);
}

(tuple, int) $MathTester$_fun_augmentedOr(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a | $b;
    var $fresh$ret_604 = $a;
    return ($self, $fresh$ret_604);
}

(tuple, int) $MathTester$_fun_augmentedShiftLeft(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a << $b;
    var $fresh$ret_605 = $a;
    return ($self, $fresh$ret_605);
}

(tuple, int) $MathTester$_fun_augmentedShiftRight(tuple $self, int $a, int $b) impure inline_ref {
    var ($self) = $self;
    $a = $a >> $b;
    var $fresh$ret_606 = $a;
    return ($self, $fresh$ret_606);
}

(tuple, int) $MathTester$_fun_shiftLeft0(tuple $self, int $i) impure inline_ref {
    var ($self) = $self;
    int $mask = (1 << $i);
    var $fresh$ret_607 = ($mask == 1);
    return ($self, $fresh$ret_607);
}

(tuple, int) $MathTester$_fun_shiftRight0(tuple $self, int $i) impure inline_ref {
    var ($self) = $self;
    int $mask = (1 >> $i);
    var $fresh$ret_608 = ($mask == 1);
    return ($self, $fresh$ret_608);
}

(tuple, int) $MathTester$_fun_sign(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_609 = $global_sign($x);
    return ($self, $fresh$ret_609);
}

(tuple, int) $MathTester$_fun_divc(tuple $self, int $x, int $y) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_610 = $global_divc($x, $y);
    return ($self, $fresh$ret_610);
}

(tuple, int) $MathTester$_fun_muldivc(tuple $self, int $x, int $y, int $z) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_611 = $global_muldivc($x, $y, $z);
    return ($self, $fresh$ret_611);
}

(tuple, int) $MathTester$_fun_mulShiftRight(tuple $self, int $x, int $y, int $z) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_612 = $global_mulShiftRight($x, $y, $z);
    return ($self, $fresh$ret_612);
}

(tuple, int) $MathTester$_fun_mulShiftRightRound(tuple $self, int $x, int $y, int $z) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_613 = $global_mulShiftRightRound($x, $y, $z);
    return ($self, $fresh$ret_613);
}

(tuple, int) $MathTester$_fun_mulShiftRightCeil(tuple $self, int $x, int $y, int $z) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_614 = $global_mulShiftRightCeil($x, $y, $z);
    return ($self, $fresh$ret_614);
}

(tuple, int) $MathTester$_fun_sqrt(tuple $self, int $x) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_615 = $global_sqrt($x);
    return ($self, $fresh$ret_615);
}

;;
;; Get methods of a Contract MathTester
;;

_ %add(int $a, int $b) method_id(83863) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_add($a, $b);
    return res;
}

_ %sub(int $a, int $b) method_id(80400) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_sub($a, $b);
    return res;
}

_ %mul(int $a, int $b) method_id(99260) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mul($a, $b);
    return res;
}

_ %div(int $a, int $b) method_id(125000) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_div($a, $b);
    return res;
}

_ %mod(int $a, int $b) method_id(126476) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mod($a, $b);
    return res;
}

_ %shr(int $a, int $b) method_id(89358) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shr($a, $b);
    return res;
}

_ %shl(int $a, int $b) method_id(110321) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shl($a, $b);
    return res;
}

_ %and(int $a, int $b) method_id(108636) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_and($a, $b);
    return res;
}

_ %or(int $a, int $b) method_id(83393) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_or($a, $b);
    return res;
}

_ %xor(int $a, int $b) method_id(78952) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_xor($a, $b);
    return res;
}

_ %bitwise_not(int $a) method_id(85436) {
    int $a = $a;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwise_not($a);
    return res;
}

_ %addAug(int $a, int $b) method_id(120881) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_addAug($a, $b);
    return res;
}

_ %subAug(int $a, int $b) method_id(114791) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_subAug($a, $b);
    return res;
}

_ %mulAug(int $a, int $b) method_id(129050) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mulAug($a, $b);
    return res;
}

_ %divAug(int $a, int $b) method_id(85125) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_divAug($a, $b);
    return res;
}

_ %modAug(int $a, int $b) method_id(81709) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_modAug($a, $b);
    return res;
}

_ %bitwiseOrAug(int $a, int $b) method_id(116497) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseOrAug($a, $b);
    return res;
}

_ %bitwiseAndAug(int $a, int $b) method_id(89159) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseAndAug($a, $b);
    return res;
}

_ %bitwiseXorAug(int $a, int $b) method_id(104526) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseXorAug($a, $b);
    return res;
}

_ %compare1(int $a, int $b) method_id(80704) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare1($a, $b);
    return res;
}

_ %compare2(int $a, int $b) method_id(68387) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare2($a, $b);
    return res;
}

_ %compare3(int $a, int $b) method_id(72450) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare3($a, $b);
    return res;
}

_ %compare4(int $a, int $b) method_id(93157) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare4($a, $b);
    return res;
}

_ %compare5(int $a, int $b) method_id(97220) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare5($a, $b);
    return res;
}

_ %compare6(int $a, int $b) method_id(84903) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare6($a, $b);
    return res;
}

_ %compare7(int $a, int $b) method_id(88966) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare7($a, $b);
    return res;
}

_ %compare8(int $a, int $b) method_id(109161) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare8($a, $b);
    return res;
}

_ %compare9(int $a, int $b) method_id(113224) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare9($a, $b);
    return res;
}

_ %compare10(int $a, int $b) method_id(127339) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare10($a, $b);
    return res;
}

_ %compare11(slice $a, slice $b) method_id(123210) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare11($a, $b);
    return res;
}

_ %compare12(slice $a, slice $b) method_id(119081) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare12($a, $b);
    return res;
}

_ %compare13(slice $a, slice $b) method_id(114952) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare13($a, $b);
    return res;
}

_ %compare14(slice $a, slice $b) method_id(111087) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare14($a, $b);
    return res;
}

_ %compare15(slice $a, slice $b) method_id(106958) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare15($a, $b);
    return res;
}

_ %compare16(slice $a, slice $b) method_id(102829) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare16($a, $b);
    return res;
}

_ %compare17(slice $a, slice $b) method_id(98700) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare17($a, $b);
    return res;
}

_ %compare18(slice $a, slice $b) method_id(94307) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare18($a, $b);
    return res;
}

_ %compare19(cell $a, cell $b) method_id(90178) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare19($a, $b);
    return res;
}

_ %compare20(cell $a, cell $b) method_id(107576) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare20($a, $b);
    return res;
}

_ %compare21(cell $a, cell $b) method_id(111641) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare21($a, $b);
    return res;
}

_ %compare22(cell $a, cell $b) method_id(99450) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare22($a, $b);
    return res;
}

_ %compare23(cell $a, cell $b) method_id(103515) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare23($a, $b);
    return res;
}

_ %compare24(cell $a, cell $b) method_id(124092) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare24($a, $b);
    return res;
}

_ %compare25(cell $a, cell $b) method_id(128157) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare25($a, $b);
    return res;
}

_ %compare26(cell $a, cell $b) method_id(115966) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare26($a, $b);
    return res;
}

_ %compare27(cell $a, cell $b) method_id(120031) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare27($a, $b);
    return res;
}

_ %compare28(cell $a, cell $b) method_id(75056) {
    cell $a = $a;
    cell $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare28($a, $b);
    return res;
}

_ %compare29(slice $a, slice $b) method_id(79121) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare29($a, $b);
    return res;
}

_ %compare30(slice $a, slice $b) method_id(104201) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare30($a, $b);
    return res;
}

_ %compare31(slice $a, slice $b) method_id(100136) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare31($a, $b);
    return res;
}

_ %compare32(slice $a, slice $b) method_id(112459) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare32($a, $b);
    return res;
}

_ %compare33(slice $a, slice $b) method_id(108394) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare33($a, $b);
    return res;
}

_ %compare34(slice $a, slice $b) method_id(120717) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare34($a, $b);
    return res;
}

_ %compare35(slice $a, slice $b) method_id(116652) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare35($a, $b);
    return res;
}

_ %compare36(slice $a, slice $b) method_id(128975) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare36($a, $b);
    return res;
}

_ %compare37(slice $a, slice $b) method_id(124910) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare37($a, $b);
    return res;
}

_ %compare38(slice $a, slice $b) method_id(71169) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare38($a, $b);
    return res;
}

_ %compare39(slice $a, slice $b) method_id(67104) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare39($a, $b);
    return res;
}

_ %compare40(slice $a, slice $b) method_id(69278) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare40($a, $b);
    return res;
}

_ %compare41(slice $a, slice $b) method_id(73407) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare41($a, $b);
    return res;
}

_ %compare42(slice $a, slice $b) method_id(77532) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare42($a, $b);
    return res;
}

_ %compare43(slice $a, slice $b) method_id(81661) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare43($a, $b);
    return res;
}

_ %compare44(slice $a, slice $b) method_id(85530) {
    slice $a = $a;
    slice $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_compare44($a, $b);
    return res;
}

_ %isNull1(int $a) method_id(111973) {
    int $a = $a;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull1($a);
    return res;
}

_ %isNotNull1(int $a) method_id(89158) {
    int $a = $a;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull1($a);
    return res;
}

_ %isNull2(slice $address) method_id(99590) {
    slice $address = $address;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull2($address);
    return res;
}

_ %isNotNull2(slice $address) method_id(93221) {
    slice $address = $address;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull2($address);
    return res;
}

_ %isNull3(cell $cell) method_id(103719) {
    cell $cell = $cell;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNull3($cell);
    return res;
}

_ %isNotNull3(cell $cell) method_id(97284) {
    cell $cell = $cell;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_isNotNull3($cell);
    return res;
}

_ %log2(int $num) method_id(75030) {
    int $num = $num;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_log2($num);
    return res;
}

_ %log(int $num, int $base) method_id(125279) {
    int $num = $num;
    int $base = $base;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_log($num, $base);
    return res;
}

_ %pow(int $base, int $exp) method_id(118124) {
    int $base = $base;
    int $exp = $exp;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_pow($base, $exp);
    return res;
}

_ %pow2(int $exp) method_id(94960) {
    int $exp = $exp;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_pow2($exp);
    return res;
}

_ %precedence1() method_id(78380) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence1();
    return res;
}

_ %precedence2() method_id(66127) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence2();
    return res;
}

_ %precedence3() method_id(70254) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence3();
    return res;
}

_ %precedence4() method_id(90761) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence4();
    return res;
}

_ %precedence5() method_id(94888) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence5();
    return res;
}

_ %precedence6() method_id(82635) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence6();
    return res;
}

_ %precedence7() method_id(86762) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence7();
    return res;
}

_ %precedence8() method_id(107269) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence8();
    return res;
}

_ %precedence9() method_id(111396) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence9();
    return res;
}

_ %precedence10() method_id(68674) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence10();
    return res;
}

_ %precedence11() method_id(72803) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence11();
    return res;
}

_ %precedence12() method_id(76800) {
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_precedence12();
    return res;
}

_ %bitwiseNot1(int $x) method_id(118903) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseNot1($x);
    return res;
}

_ %bitwiseNot2(int $x) method_id(122900) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseNot2($x);
    return res;
}

_ %bitwiseNot3(int $x) method_id(127029) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseNot3($x);
    return res;
}

_ %bitwiseNot4(int $x) method_id(98514) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_bitwiseNot4($x);
    return res;
}

_ %augmentedAnd(int $a, int $b) method_id(127849) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_augmentedAnd($a, $b);
    return res;
}

_ %augmentedOr(int $a, int $b) method_id(121304) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_augmentedOr($a, $b);
    return res;
}

_ %augmentedShiftLeft(int $a, int $b) method_id(104823) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_augmentedShiftLeft($a, $b);
    return res;
}

_ %augmentedShiftRight(int $a, int $b) method_id(110189) {
    int $a = $a;
    int $b = $b;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_augmentedShiftRight($a, $b);
    return res;
}

_ %shiftLeft0(int $i) method_id(106230) {
    int $i = $i;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shiftLeft0($i);
    return res;
}

_ %shiftRight0(int $i) method_id(78486) {
    int $i = $i;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_shiftRight0($i);
    return res;
}

_ %sign(int $x) method_id(115590) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_sign($x);
    return res;
}

_ %divc(int $x, int $y) method_id(92387) {
    int $x = $x;
    int $y = $y;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_divc($x, $y);
    return res;
}

_ %muldivc(int $x, int $y, int $z) method_id(107929) {
    int $x = $x;
    int $y = $y;
    int $z = $z;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_muldivc($x, $y, $z);
    return res;
}

_ %mulShiftRight(int $x, int $y, int $z) method_id(127246) {
    int $x = $x;
    int $y = $y;
    int $z = $z;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mulShiftRight($x, $y, $z);
    return res;
}

_ %mulShiftRightRound(int $x, int $y, int $z) method_id(121903) {
    int $x = $x;
    int $y = $y;
    int $z = $z;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mulShiftRightRound($x, $y, $z);
    return res;
}

_ %mulShiftRightCeil(int $x, int $y, int $z) method_id(93115) {
    int $x = $x;
    int $y = $y;
    int $z = $z;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_mulShiftRightCeil($x, $y, $z);
    return res;
}

_ %sqrt(int $x) method_id(91833) {
    int $x = $x;
    var self = $MathTester$_contract_load();
    var res = self~$MathTester$_fun_sqrt($x);
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract MathTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $MathTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var op = in_msg~load_opcode();
    ;; Receive Deploy message
    if (op == 2490013878) {
        var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
        $self~$MathTester$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
        return ();
    }
    
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}