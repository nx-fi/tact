// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/e2e-emulated/contracts/output/allocation_Test.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_load_address_opt
  DECLPROC __tact_store_address_opt
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $SetCost$_load_without_opcode
  DECLPROC $Struct2$_store
  DECLPROC $Struct2$_load
  DECLPROC $Test$_store
  DECLPROC $Test$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $Test$init$_load
  DECLPROC $Test$_contract_init
  DECLPROC $Test$_contract_load
  DECLPROC $Test$_contract_store
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $Test$_fun_forward
  DECLPROC $Test$_fun_reply
  DECLPROC $Test$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_load_address_opt PROCINLINE:<{
    DUP
    2 PLDU
    0 NEQINT
    IF:<{
      LDMSGADDR
      SWAP
    }>ELSE<{
      2 PUSHINT
      SDSKIPFIRST
      PUSHNULL
    }>
  }>
  __tact_store_address_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      0 PUSHINT
      SWAP
      2 STU
    }>ELSE<{
      STSLICER
    }>
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $SetCost$_load_without_opcode PROCINLINE:<{
    1 LDI
    SWAP
    IF:<{
      LDVARUINT16
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    SWAP
  }>
  $Struct2$_store PROCINLINE:<{
    NEWC
    s0 s4 XCHG2
    STSLICER
    ENDC
    s0 s4 XCHG2
    STREF
    NEWC
    ROT
    STSLICER
    ENDC
    SWAP
    STREF
    NEWC
    NEWC
    s0 s4 XCHG2
    STSLICER
    ENDC
    s0 s3 XCHG2
    STREF
    NEWC
    ROT
    STSLICER
    ENDC
    SWAP
    STREF
    ENDC
    SWAP
    STREF
  }>
  $Struct2$_load PROCINLINE:<{
    LDREF
    SWAP
    CTOS
    SWAP
    LDREF
    SWAP
    CTOS
    SWAP
    LDREF
    SWAP
    CTOS
    LDREF
    SWAP
    CTOS
    SWAP
    LDREF
    DROP
    CTOS
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $Test$_store PROCINLINE:<{
    s12 s11 XCHG2
    STSLICER
    s1 s9 XCHG
    256 STU
    s1 s7 XCHG
    256 STU
    s0 s5 XCHG
    NEWC
    256 STU
    4 -ROLL
    $Struct2$_store INLINECALLDICT
    ROT
    __tact_store_address_opt INLINECALLDICT
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      TRUE
      SWAP
      1 STI
      ROT
      STVARUINT16
    }>ELSE<{
      s2 POP
      FALSE
      ROT
      1 STI
    }>
    s0 s3 XCHG2
    __tact_store_address_opt INLINECALLDICT
    NEWC
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      TRUE
      SWAP
      1 STI
      ROT
      STVARUINT16
    }>ELSE<{
      s2 POP
      FALSE
      ROT
      1 STI
    }>
    ENDC
    SWAP
    STREF
    ENDC
    SWAP
    STREF
  }>
  $Test$_load PROCINLINE:<{
    LDMSGADDR
    256 LDU
    256 LDU
    LDREF
    SWAP
    CTOS
    256 LDU
    $Struct2$_load INLINECALLDICT
    s0 s4 XCHG
    __tact_load_address_opt INLINECALLDICT
    SWAP
    1 LDI
    SWAP
    IF:<{
      LDVARUINT16
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    __tact_load_address_opt INLINECALLDICT
    SWAP
    LDREF
    DROP
    CTOS
    1 LDI
    SWAP
    IF:<{
      LDVARUINT16
      DROP
    }>ELSE<{
      DROP
      PUSHNULL
    }>
    s9 s12 XCHG
    s9 s11 XCHG
    s9 s10 XCHG
    s6 s7 XCHG
    s5 s6 XCHG
    s4 s5 XCHG
  }>
  $StateInit$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        2 UNTUPLE
  }>
  $Test$init$_load PROCINLINE:<{
    LDMSGADDR
    LDREF
    SWAP
    CTOS
    $Struct2$_load INLINECALLDICT
    s4 POP
    s4 s5 XCHG
    3 ROLL
  }>
  $Test$_contract_init PROCINLINE:<{
    0 PUSHINT
    s4 s4 s4 XCPU2
    s3 s5 s4 XCHG3
    ROT
    PUSHNULL
    PUSHNULL
    PUSHNULL
    PUSHNULL
  }>
  $Test$_contract_load PROCREF:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IFJMP:<{
      $Test$_load INLINECALLDICT
      1 12 BLKDROP2
    }>
    $Test$init$_load INLINECALLDICT
    s0 s5 XCHG
    ENDS
    4 ROLL
    $Test$_contract_init INLINECALLDICT
  }>
  $Test$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    12 -ROLL
    $Test$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $Test$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        MUL // note that -1 * -1 wraps back to -1
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $Test$_fun_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    TRUE
    PUSHNULL
    $Test$_fun_forward INLINECALLDICT
  }>
  $Test$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $Test$_fun_forward INLINECALLDICT
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Test$_contract_load INLINECALLDICT
    s0 s13 XCHG
    IFJMP:<{
      13 BLKDROP
    }>
    s0 s11 XCHG
    32 PUSHINT
    LDUXQ NULLROTRIFNOT
    DROP
    OVER
    2434905007 PUSHINT
    EQUAL
    IFJMP:<{
      2 1 BLKDROP2
      $SetCost$_load_without_opcode INLINECALLDICT
      NIP
          B{b5ee9c7241010101001500002600000000436f7374206973207570646174656423247e70} B>boc PUSHREF
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Test$_fun_reply INLINECALLDICT
      $Test$_contract_store INLINECALLDICT
    }>
    SWAP
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      $Deploy$_load_without_opcode INLINECALLDICT
      NIP
      $DeployOk$_constructor_queryId INLINECALLDICT
      $DeployOk$_store_cell INLINECALLDICT
      s10 s12 XCHG
      s9 s11 XCHG
      s8 s10 XCHG
      s7 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Test$_fun_notify INLINECALLDICT
      $Test$_contract_store INLINECALLDICT
    }>
    13 BLKDROP
    130 THROW
  }>
}END>c
