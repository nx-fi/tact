#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; init-of-message_Test.headers.fc
;;
;; Header files for Test
;; NOTE: declarations are sorted for optimal order
;;

;; $InitData$_load
(slice, ((slice, int))) $InitData$_load(slice sc_0) inline;

;; $Test$_store
builder $Test$_store(builder build_0, (slice) v) inline;

;; $Test$_load
(slice, ((slice))) $Test$_load(slice sc_0) inline;

;; $Test$init$_load
(slice, (((slice, int)))) $Test$init$_load(slice sc_0) inline;

;; $Test$_contract_init
(slice) $Test$_contract_init((slice, int) $i) impure inline;

;; $Test$_contract_load
(slice) $Test$_contract_load() impure inline_ref;

;; $Test$_contract_store
() $Test$_contract_store((slice) v) impure inline;


;; init-of-message_Test.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; init-of-message_Test.storage.fc
;;
;; Type: InitData
;; Header: 0x7e79fb48
;; TLB: init_data#7e79fb48 seller:address nonce:uint64 = InitData
;;

(slice, ((slice, int))) $InitData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2121923400);
    var v'seller = sc_0~load_msg_addr();
    var v'nonce = sc_0~load_uint(64);
    return (sc_0, (v'seller, v'nonce));
}

;;
;; Type: Test
;;

builder $Test$_store(builder build_0, (slice) v) inline {
    var (v'seller) = v;
    build_0 = build_0.store_slice(v'seller);
    return build_0;
}

(slice, ((slice))) $Test$_load(slice sc_0) inline {
    var v'seller = sc_0~load_msg_addr();
    return (sc_0, (v'seller));
}

(slice, (((slice, int)))) $Test$init$_load(slice sc_0) inline {
    var v'i = sc_0~$InitData$_load();
    return (sc_0, (v'i));
}

(slice) $Test$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Test$_load();
    } else {
        ((slice, int) $i) = $sc~$Test$init$_load();
        $sc.end_parse();
        return $Test$_contract_init($i);
    }
}

() $Test$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Test$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Test functions
;;

(slice) $Test$_contract_init((slice, int) $i) impure inline {
    var (($i'seller, $i'nonce)) = $i;
    var (($self'seller)) = (null());
    $self'seller = $i'seller;
    return ($self'seller);
}

;;
;; Get methods of a Contract Test
;;

;;
;; Routing of a Contract Test
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'seller) = $Test$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        ;; Persist state
        $Test$_contract_store(($self'seller));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
