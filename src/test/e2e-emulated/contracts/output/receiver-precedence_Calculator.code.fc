#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; receiver-precedence_Calculator.headers.fc
;;
;; Header files for Calculator
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_slice_eq
int __tact_slice_eq(slice a, slice b) inline;

;; $BinaryIntOperation$_load_without_opcode
(slice, ((slice, int, int))) $BinaryIntOperation$_load_without_opcode(slice sc_0) inline;

;; $BinaryIntResult$_store
builder $BinaryIntResult$_store(builder build_0, (int) v) inline;

;; $BinaryIntResult$_store_cell
cell $BinaryIntResult$_store_cell((int) v) inline;

;; $Calculator$_contract_init
tuple $Calculator$_contract_init() impure inline;

;; $Calculator$_contract_load
tuple $Calculator$_contract_load() impure inline;

;; $MessageParameters$_constructor_to_bounce_value_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline;

;; $BinaryIntResult$_constructor_val
((int)) $BinaryIntResult$_constructor_val(int $val) inline;


;; receiver-precedence_Calculator.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

int __tact_slice_eq(slice a, slice b) inline {
    return (a.slice_hash() ==  b.slice_hash());
}

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

;; receiver-precedence_Calculator.constants.fc
;; String "/"
slice __gen_slice_string_2c1988d0c53291adf27e9866632c4c8e79b822a3ef85f43657c4bbd7eb6c6b31() asm """
    B{b5ee9c724101010100030000022f29d5723f} B>boc <s PUSHSLICE
""";

;; receiver-precedence_Calculator.storage.fc
;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline {
    return (0, $body, $value, $to, $bounce);
}

;;
;; Type: BinaryIntOperation
;; Header: 0x3177103a
;; TLB: binary_int_operation#3177103a op:^string val1:int257 val2:int257 = BinaryIntOperation
;;

(slice, ((slice, int, int))) $BinaryIntOperation$_load_without_opcode(slice sc_0) inline {
    var v'op = sc_0~load_ref().begin_parse();
    var v'val1 = sc_0~load_int(257);
    var v'val2 = sc_0~load_int(257);
    return (sc_0, (v'op, v'val1, v'val2));
}

;;
;; Type: BinaryIntResult
;; Header: 0xfc632810
;; TLB: binary_int_result#fc632810 val:int257 = BinaryIntResult
;;

builder $BinaryIntResult$_store(builder build_0, (int) v) inline {
    var (v'val) = v;
    build_0 = store_uint(build_0, 4234356752, 32);
    build_0 = build_0.store_int(v'val, 257);
    return build_0;
}

cell $BinaryIntResult$_store_cell((int) v) inline {
    return $BinaryIntResult$_store(begin_cell(), v).end_cell();
}

((int)) $BinaryIntResult$_constructor_val(int $val) inline {
    return ($val);
}

;;
;; Type: Calculator
;; TLB: _  = Calculator
;;

tuple $Calculator$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $Calculator$_contract_init();
    }
}

;;
;; Contract Calculator functions
;;

tuple $Calculator$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

;;
;; Get methods of a Contract Calculator
;;

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract Calculator
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Calculator$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive BinaryIntOperation message
        if (op == 829886522) {
            var ($request'op, $request'val1, $request'val2) = in_msg~$BinaryIntOperation$_load_without_opcode();
            throw_unless(48163, __tact_slice_eq(__gen_slice_string_2c1988d0c53291adf27e9866632c4c8e79b822a3ef85f43657c4bbd7eb6c6b31(), $request'op));
            int $result = ($request'val1 / $request'val2);
            $global_message($MessageParameters$_constructor_to_bounce_value_body(__tact_context_get_sender(), false, 1000000000, $BinaryIntResult$_store_cell($BinaryIntResult$_constructor_val($result))));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "deploy" message
    if (text_op == 0xd95abec808516815126b60e61ee97798fa369d80938fd6e58a862d5789af459c) {
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}