#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; debug_Debug.headers.fc
;;
;; Header files for Debug
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_debug_bool
() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2) impure inline_ref;

;; __tact_crc16
(slice) __tact_crc16(slice data) inline_ref;

;; __tact_base64_encode
(slice) __tact_base64_encode(slice data) inline_ref;

;; __tact_address_to_user_friendly
(slice) __tact_address_to_user_friendly(slice address) inline_ref;

;; __tact_debug_address
() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2) impure inline_ref;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Debug$_contract_init
tuple $Debug$_contract_init() impure inline;

;; $Debug$_contract_load
tuple $Debug$_contract_load() impure inline_ref;

;; $Debug$_contract_store
() $Debug$_contract_store(tuple v) impure inline;

;; $Debug$_fun_debug
(tuple, ()) $Debug$_fun_debug(tuple $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Debug$_fun_forward
(tuple, ()) $Debug$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Debug$_fun_notify
(tuple, ()) $Debug$_fun_notify(tuple $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; debug_Debug.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2) impure asm """
    STRDUMP DROP STRDUMP DROP STRDUMP DROP
""";

() __tact_debug_bool(int value, slice debug_print_1, slice debug_print_2) impure inline_ref {
    if (value) {
        __tact_debug_str("true", debug_print_1, debug_print_2);
    } else {
        __tact_debug_str("false", debug_print_1, debug_print_2);
    }
}

(slice) __tact_preload_offset(slice s, int offset, int bits) asm """
    SDSUBSTR
""";

(slice) __tact_crc16(slice data) inline_ref {
    slice new_data = begin_cell()
        .store_slice(data)
        .store_slice("0000"s)
    .end_cell().begin_parse();
    int reg = 0;
    while (~ new_data.slice_data_empty?()) {
        int byte = new_data~load_uint(8);
        int mask = 0x80;
        while (mask > 0) {
            reg <<= 1;
            if (byte & mask) {
                reg += 1;
            }
            mask >>= 1;
            if (reg > 0xffff) {
                reg &= 0xffff;
                reg ^= 0x1021;
            }
        }
    }
    (int q, int r) = divmod(reg, 256);
    return begin_cell()
        .store_uint(q, 8)
        .store_uint(r, 8)
    .end_cell().begin_parse();
}

(slice) __tact_base64_encode(slice data) inline_ref {
    slice chars = "4142434445464748494A4B4C4D4E4F505152535455565758595A6162636465666768696A6B6C6D6E6F707172737475767778797A303132333435363738392D5F"s;
    builder res = begin_cell();

    while (data.slice_bits() >= 24) {
        (int bs1, int bs2, int bs3) = (data~load_uint(8), data~load_uint(8), data~load_uint(8));

        int n = (bs1 << 16) | (bs2 << 8) | bs3;

        res = res
            .store_slice(__tact_preload_offset(chars, ((n >> 18) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >> 12) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n >>  6) & 63) * 8, 8))
            .store_slice(__tact_preload_offset(chars, ((n      ) & 63) * 8, 8));
    }

    return res.end_cell().begin_parse();
}

(slice) __tact_address_to_user_friendly(slice address) inline_ref {
    (int wc, int hash) = address.parse_std_addr();

    slice user_friendly_address = begin_cell()
        .store_slice("11"s)
        .store_uint((wc + 0x100) % 0x100, 8)
        .store_uint(hash, 256)
    .end_cell().begin_parse();

    slice checksum = __tact_crc16(user_friendly_address);
    slice user_friendly_address_with_checksum = begin_cell()
        .store_slice(user_friendly_address)
        .store_slice(checksum)
    .end_cell().begin_parse();

    return __tact_base64_encode(user_friendly_address_with_checksum);
}

() __tact_debug_address(slice address, slice debug_print_1, slice debug_print_2) impure inline_ref {
    __tact_debug_str(__tact_address_to_user_friendly(address), debug_print_1, debug_print_2);
}

() __tact_debug_stack(slice debug_print_1, slice debug_print_2) impure asm """
    STRDUMP DROP STRDUMP DROP DUMPSTK
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

slice $Int$_fun_toString(int $self) impure asm """
    <{
        // x
        NEWC // x b
        OVER // x b x
        0 LESSINT // x b <0?
        <{
            // x b
            45 PUSHINT // x b 45
            SWAP // x 45 b
            8 STU // x b
            SWAP // b x
            NEGATE // b -x
            SWAP // -x b
        }>CONT IF
        // x b

        SWAP // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10 
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 1 1 CALLXARGS
    // b

    ENDC CTOS // s
""";

(tuple, ()) $Debug$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var ($self) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return ($self, ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return ($self, ());
}

(tuple, ()) $Debug$_fun_notify(tuple $self, cell $body) impure inline {
    var ($self) = $self;
    $self~$Debug$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return ($self, ());
}

;; debug_Debug.constants.fc
;; String "dump("Hello world!")"
slice __gen_slice_string_dcd119a03fcc60e3a3b1ca0028fff7ac3abb961f9164c255dff6881c6778de85() asm """
    B{b5ee9c7241010101001600002864756d70282248656c6c6f20776f726c642122297bc6d422} B>boc <s PUSHSLICE
""";

;; String "Hello world!"
slice __gen_slice_string_be033138a8e284b3da1cee56e92447de2368f6431d64a3c6fe4db3183aeb9c36() asm """
    B{b5ee9c7241010101000e00001848656c6c6f20776f726c6421782dc5bc} B>boc <s PUSHSLICE
""";

;; String "dump(123)"
slice __gen_slice_string_e937adfe9111512c067f84c90114041cce8cef25b219f225ee49463d1ab10ef9() asm """
    B{b5ee9c7241010101000b00001264756d70283132332930231ef8} B>boc <s PUSHSLICE
""";

;; String "dump(true)"
slice __gen_slice_string_724c7e3dfe4462a97398ed8af4b923de11aa5323a13b1a549bdd033474c2d23d() asm """
    B{b5ee9c7241010101000c00001464756d702874727565299cd07f90} B>boc <s PUSHSLICE
""";

;; String "dump(false)"
slice __gen_slice_string_3640f77b25e25081b0225f183bcf672bca60324dcf061b743fb822018d93648a() asm """
    B{b5ee9c7241010101000d00001664756d702866616c73652971c90a43} B>boc <s PUSHSLICE
""";

;; String "dump(null)"
slice __gen_slice_string_0143c36191512abedfcce593504c723d93d63735cd583b1b44ca01edfbdc150b() asm """
    B{b5ee9c7241010101000c00001464756d70286e756c6c29b2571cd0} B>boc <s PUSHSLICE
""";

;; String "dump(myAddress())"
slice __gen_slice_string_17f5cc66bdb68ae702a0f85bf5a37a5709b8cacb7353f52e41428ef18f8f3281() asm """
    B{b5ee9c7241010101001300002264756d70286d794164647265737328292976c8ae4b} B>boc <s PUSHSLICE
""";

;; String "dump(newAddress(0, 0x83dfd552e63729b472fcbcc8c45ebcc6691702558b68ec7527e1ba403a0f31a8))"
slice __gen_slice_string_70396652ee2cb33f3c913c775734a511949af0255496ebacbe453f0d46293ef3() asm """
    B{b5ee9c724101010100590000ae64756d70286e65774164647265737328302c2030783833646664353532653633373239623437326663626363386334356562636336363931373032353538623638656337353237653162613430336130663331613829294c3bc73f} B>boc <s PUSHSLICE
""";

;; EQCD39VS5jcptHL8vMjEXrzGaRcCVYto7HUn4bpAOg8xqB2N
slice __gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc() asm """
    B{b5ee9c7241010101002400004380107bfaaa5cc6e5368e5f9799188bd798cd22e04ab16d1d8ea4fc37480741e6351064a3e1a6} B>boc <s PUSHSLICE
""";

;; String "dump(myBalance())"
slice __gen_slice_string_26c5f27685e458cc8c37e361ffac41e87ef80d93836f32b2f966edc68ff9a434() asm """
    B{b5ee9c7241010101001300002264756d70286d7942616c616e63652829296ebc95a9} B>boc <s PUSHSLICE
""";

;; debug_Debug.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Debug
;;

tuple $Debug$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $Debug$_contract_init();
    }
}

() $Debug$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;;
;; Contract Debug functions
;;

tuple $Debug$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(tuple, ()) $Debug$_fun_debug(tuple $self) impure inline_ref {
    var ($self) = $self;
    __tact_debug_stack("dumpStack()", "File src/test/e2e-emulated/contracts/debug.tact:22:9:");
    __tact_debug_str(__gen_slice_string_be033138a8e284b3da1cee56e92447de2368f6431d64a3c6fe4db3183aeb9c36(), __gen_slice_string_dcd119a03fcc60e3a3b1ca0028fff7ac3abb961f9164c255dff6881c6778de85(), "File src/test/e2e-emulated/contracts/debug.tact:23:9:");
    __tact_debug_str($Int$_fun_toString(123), __gen_slice_string_e937adfe9111512c067f84c90114041cce8cef25b219f225ee49463d1ab10ef9(), "File src/test/e2e-emulated/contracts/debug.tact:24:9:");
    __tact_debug_bool(true, __gen_slice_string_724c7e3dfe4462a97398ed8af4b923de11aa5323a13b1a549bdd033474c2d23d(), "File src/test/e2e-emulated/contracts/debug.tact:25:9:");
    __tact_debug_bool(false, __gen_slice_string_3640f77b25e25081b0225f183bcf672bca60324dcf061b743fb822018d93648a(), "File src/test/e2e-emulated/contracts/debug.tact:26:9:");
    __tact_debug_str("null", __gen_slice_string_0143c36191512abedfcce593504c723d93d63735cd583b1b44ca01edfbdc150b(), "File src/test/e2e-emulated/contracts/debug.tact:27:9:");
    __tact_debug_address($global_myAddress(), __gen_slice_string_17f5cc66bdb68ae702a0f85bf5a37a5709b8cacb7353f52e41428ef18f8f3281(), "File src/test/e2e-emulated/contracts/debug.tact:28:9:");
    __tact_debug_address(__gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), __gen_slice_string_70396652ee2cb33f3c913c775734a511949af0255496ebacbe453f0d46293ef3(), "File src/test/e2e-emulated/contracts/debug.tact:29:9:");
    return ($self, ());
}

;;
;; Get methods of a Contract Debug
;;

_ %debug() method_id(93099) {
    var self = $Debug$_contract_load();
    var res = self~$Debug$_fun_debug();
    return res;
}

;;
;; Routing of a Contract Debug
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Debug$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Deploy message
        if (op == 2490013878) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            $self~$Debug$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            ;; Persist state
            $Debug$_contract_store($self);
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "Debug" message
    if (text_op == 0x02733e9ae6a993b4e7cb96dddae77c7d14fe0492d763701b415c9de2ead78dec) {
        __tact_debug_stack("dumpStack()", "File src/test/e2e-emulated/contracts/debug.tact:10:9:");
        __tact_debug_str(__gen_slice_string_be033138a8e284b3da1cee56e92447de2368f6431d64a3c6fe4db3183aeb9c36(), __gen_slice_string_dcd119a03fcc60e3a3b1ca0028fff7ac3abb961f9164c255dff6881c6778de85(), "File src/test/e2e-emulated/contracts/debug.tact:11:9:");
        __tact_debug_str($Int$_fun_toString(123), __gen_slice_string_e937adfe9111512c067f84c90114041cce8cef25b219f225ee49463d1ab10ef9(), "File src/test/e2e-emulated/contracts/debug.tact:12:9:");
        __tact_debug_bool(true, __gen_slice_string_724c7e3dfe4462a97398ed8af4b923de11aa5323a13b1a549bdd033474c2d23d(), "File src/test/e2e-emulated/contracts/debug.tact:13:9:");
        __tact_debug_bool(false, __gen_slice_string_3640f77b25e25081b0225f183bcf672bca60324dcf061b743fb822018d93648a(), "File src/test/e2e-emulated/contracts/debug.tact:14:9:");
        __tact_debug_str("null", __gen_slice_string_0143c36191512abedfcce593504c723d93d63735cd583b1b44ca01edfbdc150b(), "File src/test/e2e-emulated/contracts/debug.tact:15:9:");
        __tact_debug_address($global_myAddress(), __gen_slice_string_17f5cc66bdb68ae702a0f85bf5a37a5709b8cacb7353f52e41428ef18f8f3281(), "File src/test/e2e-emulated/contracts/debug.tact:16:9:");
        __tact_debug_address(__gen_slice_address_58e2d2fc9446d00e70b3ad3ea1eb88797c323bae517f2527f807f62d09a56fdc(), __gen_slice_string_70396652ee2cb33f3c913c775734a511949af0255496ebacbe453f0d46293ef3(), "File src/test/e2e-emulated/contracts/debug.tact:17:9:");
        __tact_debug_str($Int$_fun_toString($global_myBalance()), __gen_slice_string_26c5f27685e458cc8c37e361ffac41e87ef80d93836f32b2f966edc68ff9a434(), "File src/test/e2e-emulated/contracts/debug.tact:18:9:");
        ;; Persist state
        $Debug$_contract_store($self);
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
