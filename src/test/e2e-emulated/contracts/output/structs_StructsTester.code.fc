#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; structs_StructsTester.headers.fc
;;
;; Header files for StructsTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $S$_load
(slice, ((int, int))) $S$_load(slice sc_0) inline;

;; $T$_load
(slice, ((int, (int, int)))) $T$_load(slice sc_0) inline;

;; $MyStruct1$_store
builder $MyStruct1$_store(builder build_0, (int, int, int) v) inline;

;; $MyStruct1$_store_cell
cell $MyStruct1$_store_cell((int, int, int) v) inline;

;; $MyStruct1$_load
(slice, ((int, int, int))) $MyStruct1$_load(slice sc_0) inline;

;; $MyStruct1$_load_not_mut
((int, int, int)) $MyStruct1$_load_not_mut(slice sc_0) inline;

;; $MyStruct1$_not_null
((int, int, int)) $MyStruct1$_not_null(tuple v) inline;

;; $MyStruct2$_store
builder $MyStruct2$_store(builder build_0, (cell, tuple) v) inline;

;; $MyStruct2$_store_cell
cell $MyStruct2$_store_cell((cell, tuple) v) inline;

;; $MyStruct1$_as_optional
tuple $MyStruct1$_as_optional((int, int, int) v) inline;

;; $MyStruct2$_load
(slice, ((cell, tuple))) $MyStruct2$_load(slice sc_0) inline;

;; $MyStruct2$_load_not_mut
((cell, tuple)) $MyStruct2$_load_not_mut(slice sc_0) inline;

;; $MyMessage1$_store
builder $MyMessage1$_store(builder build_0, (int, (cell, tuple)) v) inline;

;; $MyMessage1$_store_cell
cell $MyMessage1$_store_cell((int, (cell, tuple)) v) inline;

;; $MyMessage1$_load
(slice, ((int, (cell, tuple)))) $MyMessage1$_load(slice sc_0) inline;

;; $MyMessage1$_load_not_mut
((int, (cell, tuple))) $MyMessage1$_load_not_mut(slice sc_0) inline;

;; $Coin$_load
(slice, ((int, int))) $Coin$_load(slice sc_0) inline;

;; $Coin$_load_not_mut
((int, int)) $Coin$_load_not_mut(slice sc_0) inline;

;; $VarIntegers$_load
(slice, ((int, int, int, int))) $VarIntegers$_load(slice sc_0) inline;

;; $VarIntegers$_load_not_mut
((int, int, int, int)) $VarIntegers$_load_not_mut(slice sc_0) inline;

;; $IntFields$_load
(slice, ((int, int, int, int, int, int))) $IntFields$_load(slice sc_0) inline;

;; $IntFields$_load_not_mut
((int, int, int, int, int, int)) $IntFields$_load_not_mut(slice sc_0) inline;

;; $UintFields$_load
(slice, ((int, int, int, int, int, int))) $UintFields$_load(slice sc_0) inline;

;; $UintFields$_load_not_mut
((int, int, int, int, int, int)) $UintFields$_load_not_mut(slice sc_0) inline;

;; $LongStruct15$_store
builder $LongStruct15$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LongStruct15$_store_cell
cell $LongStruct15$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct15$_load
(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct15$_load(slice sc_0) inline_ref;

;; $LongStruct15$_as_optional
tuple $LongStruct15$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct15$_load_opt
tuple $LongStruct15$_load_opt(cell cl) inline;

;; $LongStruct16$_store
builder $LongStruct16$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LongStruct16$_store_cell
cell $LongStruct16$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct16$_load
(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct16$_load(slice sc_0) inline_ref;

;; $LongStruct16$_as_optional
tuple $LongStruct16$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct16$_load_opt
tuple $LongStruct16$_load_opt(cell cl) inline;

;; $LongStruct32$_store
builder $LongStruct32$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LongStruct32$_store_cell
cell $LongStruct32$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct32$_load
(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct32$_load(slice sc_0) inline_ref;

;; $LongStruct32$_as_optional
tuple $LongStruct32$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LongStruct32$_load_opt
tuple $LongStruct32$_load_opt(cell cl) inline;

;; $Foo$_load_without_opcode
(slice, ((slice))) $Foo$_load_without_opcode(slice sc_0) inline;

;; $Dict$_store
builder $Dict$_store(builder build_0, (cell) v) inline;

;; $Dict$_store_cell
cell $Dict$_store_cell((cell) v) inline;

;; $Dict$_load
(slice, ((cell))) $Dict$_load(slice sc_0) inline;

;; $Dict$_load_not_mut
((cell)) $Dict$_load_not_mut(slice sc_0) inline;

;; $StructsTester$_load
(slice, (((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $StructsTester$_load(slice sc_0) inline;

;; $MyStruct1$_from_tuple
(int, int, int) $MyStruct1$_from_tuple(tuple v) inline;

;; $MyStruct1$_from_opt_tuple
tuple $MyStruct1$_from_opt_tuple(tuple v) inline;

;; $MyStruct1$_to_external
(int, int, int) $MyStruct1$_to_external(((int, int, int)) v) inline;

;; $MyStruct2$_from_tuple
(cell, tuple) $MyStruct2$_from_tuple(tuple v) inline;

;; $MyStruct2$_to_external
(cell, tuple) $MyStruct2$_to_external(((cell, tuple)) v) inline;

;; $MyStruct3$_to_external
(slice) $MyStruct3$_to_external(((slice)) v) inline;

;; $MyMessage1$_from_tuple
(int, (cell, tuple)) $MyMessage1$_from_tuple(tuple v) inline;

;; $MyMessage1$_to_external
(int, (cell, tuple)) $MyMessage1$_to_external(((int, (cell, tuple))) v) inline;

;; $IntFields$_to_external
(int, int, int, int, int, int) $IntFields$_to_external(((int, int, int, int, int, int)) v) inline;

;; $UintFields$_to_external
(int, int, int, int, int, int) $UintFields$_to_external(((int, int, int, int, int, int)) v) inline;

;; $LongStruct15$_not_null
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct15$_not_null(tuple v) inline;

;; $LongStruct15$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct15$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline;

;; $LongStruct16$_not_null
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct16$_not_null(tuple v) inline;

;; $LongStruct16$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct16$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline;

;; $LongStruct32$_not_null
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct32$_not_null(tuple v) inline;

;; $LongStruct32$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct32$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline;

;; $LongNestedStruct$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongNestedStruct$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) v) inline;

;; $LongNestedStructWithOpts$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple) $LongNestedStructWithOpts$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) v) inline;

;; $Line$_as_optional
tuple $Line$_as_optional(((int, int), (int, int)) v) inline;

;; $Location$_to_external
(int, ((int, int), (int, int)), tuple) $Location$_to_external(((int, ((int, int), (int, int)), tuple)) v) inline;

;; $DoubleNestedStructOpt$_as_optional
tuple $DoubleNestedStructOpt$_as_optional((int, tuple) v) inline;

;; $TripleNestedStructOpt$_as_optional
tuple $TripleNestedStructOpt$_as_optional((int, tuple) v) inline;

;; $TripleNestedStructOpt$_to_external
(int, tuple) $TripleNestedStructOpt$_to_external(((int, tuple)) v) inline;

;; $LongAndDeepNestedStruct$_to_external
(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple) $LongAndDeepNestedStruct$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) v) inline;

;; $OptionalFields$_to_external
(slice, slice) $OptionalFields$_to_external(((slice, slice)) v) inline;

;; $S1$_to_external
(int, int, int) $S1$_to_external(((int, int, int)) v) inline;

;; $S$_constructor_a_b
((int, int)) $S$_constructor_a_b(int $a, int $b) inline;

;; $T$_constructor_a_s
((int, (int, int))) $T$_constructor_a_s(int $a, (int, int) $s) inline;

;; $StructsTester$_contract_init
((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $StructsTester$_contract_init() impure inline;

;; $StructsTester$_contract_load
((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $StructsTester$_contract_load() impure inline_ref;

;; $global_directParse
(int, int) $global_directParse(cell $payload) impure inline_ref;

;; $global_directParseVarIntegers
(int, int, int, int) $global_directParseVarIntegers(cell $payload) impure inline_ref;

;; $S1$_constructor_a_b_c
((int, int, int)) $S1$_constructor_a_b_c(int $a, int $b, int $c) inline;

;; $StructsTester$_fun_structInitializerTest
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_structInitializerTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_toCell1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCell1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s) impure inline_ref;

;; $StructsTester$_fun_toSlice1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_toSlice1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s) impure inline_ref;

;; $StructsTester$_fun_fromCell1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_fromCell1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref;

;; $StructsTester$_fun_fromSlice1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_fromSlice1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref;

;; $StructsTester$_fun_toCell2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCell2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (cell, tuple) $s) impure inline_ref;

;; $StructsTester$_fun_fromCell2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (cell, tuple)) $StructsTester$_fun_fromCell2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref;

;; $StructsTester$_fun_fromSlice2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (cell, tuple)) $StructsTester$_fun_fromSlice2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref;

;; $StructsTester$_fun_test1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_test1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s1, (cell, tuple) $s2) impure inline_ref;

;; $StructsTester$_fun_toCellMessage1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCellMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, (cell, tuple)) $m) impure inline_ref;

;; $StructsTester$_fun_fromCellMessage1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, (cell, tuple))) $StructsTester$_fun_fromCellMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref;

;; $StructsTester$_fun_fromSliceMessage1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, (cell, tuple))) $StructsTester$_fun_fromSliceMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref;

;; $MyStruct3$_constructor_s
((slice)) $MyStruct3$_constructor_s(slice $s) inline;

;; $StructsTester$_fun_contractStructConstantImmediate
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_contractStructConstantImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_globalConstStructConstantImmediate
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_globalConstStructConstantImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_contractStructConstantFieldImmediate
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_contractStructConstantFieldImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_globalConstStructConstantFieldImmediate
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_globalConstStructConstantFieldImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_contractStructConstantViaVar
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_contractStructConstantViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_globalConstStructConstantViaVar
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_globalConstStructConstantViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_contractStructConstantFieldViaVar
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_contractStructConstantFieldViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_globalConstStructConstantFieldViaVar
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_globalConstStructConstantFieldViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongStruct15$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct15$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15) inline;

;; $StructsTester$_fun_longStruct15Test
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct15Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16) inline;

;; $StructsTester$_fun_longStruct16Test
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct16Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, int $x21, int $x22, int $x23, int $x24, int $x25, int $x26, int $x27, int $x28, int $x29, int $x30, int $x31, int $x32) inline;

;; $StructsTester$_fun_longStruct32Test
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct32Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s1, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s2, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s3) inline;

;; $StructsTester$_fun_longNestedStructTest
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $StructsTester$_fun_longNestedStructTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongNestedStructWithOpts$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) $LongNestedStructWithOpts$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, tuple $s1, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s2, tuple $s3) inline;

;; $StructsTester$_fun_longNestedStructWithOptsTest
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) $StructsTester$_fun_longNestedStructWithOptsTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_longContractTest
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_longContractTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Point$_constructor_x_y
((int, int)) $Point$_constructor_x_y(int $x, int $y) inline;

;; $Location$_constructor_idx_line1_line2
((int, ((int, int), (int, int)), tuple)) $Location$_constructor_idx_line1_line2(int $idx, ((int, int), (int, int)) $line1, tuple $line2) inline;

;; $Line$_constructor_start_end
(((int, int), (int, int))) $Line$_constructor_start_end((int, int) $start, (int, int) $end) inline;

;; $StructsTester$_fun_location1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, ((int, int), (int, int)), tuple)) $StructsTester$_fun_location1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_location2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, ((int, int), (int, int)), tuple)) $StructsTester$_fun_location2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $TripleNestedStructOpt$_constructor_a_s
((int, tuple)) $TripleNestedStructOpt$_constructor_a_s(int $a, tuple $s) inline;

;; $DoubleNestedStructOpt$_constructor_a_s
((int, tuple)) $DoubleNestedStructOpt$_constructor_a_s(int $a, tuple $s) inline;

;; $MyStruct1$_constructor_a_b_c
((int, int, int)) $MyStruct1$_constructor_a_b_c(int $a, int $b, int $c) inline;

;; $StructsTester$_fun_tripleNestedStructOpt1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_tripleNestedStructOpt2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_tripleNestedStructOpt3
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4
((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, (int, tuple) $s1, (int, tuple) $s2, tuple $s3, tuple $s4) inline;

;; $StructsTester$_fun_longAndDeepNestedStruct1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_longAndDeepNestedStruct2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_longAndDeepNestedStruct3
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $IntFields$_constructor_i1_i2_i3_i255_i256_i257
((int, int, int, int, int, int)) $IntFields$_constructor_i1_i2_i3_i255_i256_i257(int $i1, int $i2, int $i3, int $i255, int $i256, int $i257) inline;

;; $StructsTester$_fun_intFieldsStruct
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_intFieldsStruct(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_intFieldsFromCell
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_intFieldsFromCell(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref;

;; $UintFields$_constructor_u1_u2_u3_u254_u255_u256
((int, int, int, int, int, int)) $UintFields$_constructor_u1_u2_u3_u254_u255_u256(int $u1, int $u2, int $u3, int $u254, int $u255, int $u256) inline;

;; $StructsTester$_fun_uintFieldsMessage
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_uintFieldsMessage(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_uintFieldsFromCell
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_uintFieldsFromCell(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref;

;; $OptionalFields$_constructor_nickname_avatar
((slice, slice)) $OptionalFields$_constructor_nickname_avatar(slice $nickname, slice $avatar) inline;

;; $StructsTester$_fun_optionalFields
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice, slice)) $StructsTester$_fun_optionalFields(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest1
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest1Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest1Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest2
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest2Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest2Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest3
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest3Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest3Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest4
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest4(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest4Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest4Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest5
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest5(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest5Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest5Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest6
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest6(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest6Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest6Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest7
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_destructuringTest7(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest7Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_destructuringTest7Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest8
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest8(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $StructsTester$_fun_destructuringTest8Const
(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest8Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;


;; structs_StructsTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

() __tact_debug_str(slice value, slice debug_print_1, slice debug_print_2) impure asm """
    STRDUMP DROP STRDUMP DROP STRDUMP DROP
""";

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm """
    2 TUPLE
""";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm """
    3 TUPLE
""";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm """
    3 UNTUPLE
""";

forall X0, X1, X2, X3 -> tuple __tact_tuple_create_4((X0, X1, X2, X3) v) asm """
    4 TUPLE
""";

forall X0, X1, X2, X3 -> (X0, X1, X2, X3) __tact_tuple_destroy_4(tuple v) asm """
    4 UNTUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> tuple __tact_tuple_create_15((X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) v) asm """
    15 TUPLE
""";

forall X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14 -> (X0, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14) __tact_tuple_destroy_15(tuple v) asm """
    15 UNTUPLE
""";

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

builder $global_beginCell() impure asm """
    NEWC
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

slice $Int$_fun_toString(int $self) impure asm """
    <{
        // x
        NEWC // x b
        OVER // x b x
        0 LESSINT // x b <0?
        <{
            // x b
            45 PUSHINT // x b 45
            SWAP // x 45 b
            8 STU // x b
            SWAP // b x
            NEGATE // b -x
            SWAP // -x b
        }>CONT IF
        // x b

        SWAP // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10 
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 1 1 CALLXARGS
    // b

    ENDC CTOS // s
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeVarUint16(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeVarInt16(builder $self, int $value) impure asm """
    STVARINT16
""";

builder $Builder$_fun_storeVarUint32(builder $self, int $value) impure asm """
    STVARUINT32
""";

builder $Builder$_fun_storeVarInt32(builder $self, int $value) impure asm """
    STVARINT32
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

(slice, cell) $Slice$_fun_loadRef(slice $self) impure asm( -> 1 0) """
    LDREF
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

;; structs_StructsTester.constants.fc
;; String "contract const struct test"
slice __gen_slice_string_4ce32ce598da11765ede89249e8e7cd65a800ea073ec2978e679b04149690586() asm """
    B{b5ee9c7241010101001c000034636f6e747261637420636f6e7374207374727563742074657374bd57f83c} B>boc <s PUSHSLICE
""";

;; String "global const struct test"
slice __gen_slice_string_5904d88cd8ab28ac39339ae74870495975e33f91438cb29dfd5791297e285187() asm """
    B{b5ee9c7241010101001a000030676c6f62616c20636f6e7374207374727563742074657374c20d027c} B>boc <s PUSHSLICE
""";

;; String "non-null string"
slice __gen_slice_string_18afb80323194c4de5843e01d7a15df253dd2723fc6b88ab87db0e07ba567776() asm """
    B{b5ee9c7241010101001100001e6e6f6e2d6e756c6c20737472696e67bee85687} B>boc <s PUSHSLICE
""";

;; String "dump(coin.first)"
slice __gen_slice_string_ba055b1f0dce3ad115720f75e674134a1a770fd87f8e9534e39e4218b1453594() asm """
    B{b5ee9c7241010101001200002064756d7028636f696e2e6669727374290f2f863c} B>boc <s PUSHSLICE
""";

;; String "dump(coin.second)"
slice __gen_slice_string_282a615b41ee09c9a08e10d831cfec6954a63c2c0940f2f3f6e623ebe215fdcb() asm """
    B{b5ee9c7241010101001300002264756d7028636f696e2e7365636f6e642926f9482f} B>boc <s PUSHSLICE
""";

;; String "dump(varInts.a)"
slice __gen_slice_string_aa7a71b763ba9b8de5dc78f8ed8a533891a60d40ecb1dfae1fbf3edbc74cc239() asm """
    B{b5ee9c7241010101001100001e64756d7028766172496e74732e6129df504534} B>boc <s PUSHSLICE
""";

;; String "dump(varInts.b)"
slice __gen_slice_string_b16977828386543a462cf0ed82f0665abc245b71c06c38fec46b22d72afddeb7() asm """
    B{b5ee9c7241010101001100001e64756d7028766172496e74732e622946f8a200} B>boc <s PUSHSLICE
""";

;; String "dump(varInts.c)"
slice __gen_slice_string_cc9058504e391ac2d0c815c27fb8e9430b028a483adb843d482505e654a6e742() asm """
    B{b5ee9c7241010101001100001e64756d7028766172496e74732e632931600013} B>boc <s PUSHSLICE
""";

;; String "dump(varInts.d)"
slice __gen_slice_string_a568a5e18294874f839864178d42ad265cf908d1bed2c2e0c9bb09fa8ffbb721() asm """
    B{b5ee9c7241010101001100001e64756d7028766172496e74732e642974a96d69} B>boc <s PUSHSLICE
""";

;; structs_StructsTester.storage.fc
;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: S
;; TLB: _ a:bool b:int257 = S
;;

(slice, ((int, int))) $S$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(1);
    var v'b = sc_0~load_int(257);
    return (sc_0, (v'a, v'b));
}

((int, int)) $S$_constructor_a_b(int $a, int $b) inline {
    return ($a, $b);
}

;;
;; Type: T
;; TLB: _ a:int257 s:S{a:bool,b:int257} = T
;;

(slice, ((int, (int, int)))) $T$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v's = sc_0~$S$_load();
    return (sc_0, (v'a, v's));
}

((int, (int, int))) $T$_constructor_a_s(int $a, (int, int) $s) inline {
    return ($a, $s);
}

;;
;; Type: MyStruct1
;; TLB: _ a:int257 b:uint32 c:Maybe int257 = MyStruct1
;;

builder $MyStruct1$_store(builder build_0, (int, int, int) v) inline {
    var (v'a, v'b, v'c) = v;
    build_0 = build_0.store_int(v'a, 257);
    build_0 = build_0.store_uint(v'b, 32);
    build_0 = ~ null?(v'c) ? build_0.store_int(true, 1).store_int(v'c, 257) : build_0.store_int(false, 1);
    return build_0;
}

cell $MyStruct1$_store_cell((int, int, int) v) inline {
    return $MyStruct1$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $MyStruct1$_load(slice sc_0) inline {
    var v'a = sc_0~load_int(257);
    var v'b = sc_0~load_uint(32);
    var v'c = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'a, v'b, v'c));
}

((int, int, int)) $MyStruct1$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$MyStruct1$_load();
    sc_0.end_parse();
    return r;
}

((int, int, int)) $MyStruct1$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'a, int vvv'b, int vvv'c) = __tact_tuple_destroy_3(v);
    return (vvv'a, vvv'b, vvv'c);
}

tuple $MyStruct1$_as_optional((int, int, int) v) inline {
    var (v'a, v'b, v'c) = v;
    return __tact_tuple_create_3(v'a, v'b, v'c);
}

(int, int, int) $MyStruct1$_from_tuple(tuple v) inline {
    var (int v'a, int v'b, int v'c) = __tact_tuple_destroy_3(v);
    return (v'a, v'b, v'c);
}

tuple $MyStruct1$_from_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $MyStruct1$_as_optional($MyStruct1$_from_tuple(v));
}

(int, int, int) $MyStruct1$_to_external(((int, int, int)) v) inline {
    var (v'a, v'b, v'c) = v; 
    return (v'a, v'b, v'c);
}

((int, int, int)) $MyStruct1$_constructor_a_b_c(int $a, int $b, int $c) inline {
    return ($a, $b, $c);
}

;;
;; Type: MyStruct2
;; TLB: _ m:dict<int, uint64> s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257} = MyStruct2
;;

builder $MyStruct2$_store(builder build_0, (cell, tuple) v) inline {
    var (v'm, v's) = v;
    build_0 = build_0.store_dict(v'm);
    build_0 = ~ null?(v's) ? build_0.store_int(true, 1).$MyStruct1$_store($MyStruct1$_not_null(v's)) : build_0.store_int(false, 1);
    return build_0;
}

cell $MyStruct2$_store_cell((cell, tuple) v) inline {
    return $MyStruct2$_store(begin_cell(), v).end_cell();
}

(slice, ((cell, tuple))) $MyStruct2$_load(slice sc_0) inline {
    var v'm = sc_0~load_dict();
    var v's = sc_0~load_int(1) ? $MyStruct1$_as_optional(sc_0~$MyStruct1$_load()) : null();
    return (sc_0, (v'm, v's));
}

((cell, tuple)) $MyStruct2$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$MyStruct2$_load();
    sc_0.end_parse();
    return r;
}

(cell, tuple) $MyStruct2$_from_tuple(tuple v) inline {
    var (cell v'm, tuple v's) = __tact_tuple_destroy_2(v);
    return (v'm, $MyStruct1$_from_opt_tuple(v's));
}

(cell, tuple) $MyStruct2$_to_external(((cell, tuple)) v) inline {
    var (v'm, v's) = v; 
    return (v'm, v's);
}

;;
;; Type: MyStruct3
;; TLB: _ s:^string = MyStruct3
;;

(slice) $MyStruct3$_to_external(((slice)) v) inline {
    var (v's) = v; 
    return (v's);
}

((slice)) $MyStruct3$_constructor_s(slice $s) inline {
    return ($s);
}

;;
;; Type: MyMessage1
;; Header: 0xa98a916c
;; TLB: my_message1#a98a916c a:int257 s:MyStruct2{m:dict<int, uint64>,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}} = MyMessage1
;;

builder $MyMessage1$_store(builder build_0, (int, (cell, tuple)) v) inline {
    var (v'a, (v's'm, v's's)) = v;
    build_0 = store_uint(build_0, 2844430700, 32);
    build_0 = build_0.store_int(v'a, 257);
    build_0 = $MyStruct2$_store(build_0, (v's'm, v's's));
    return build_0;
}

cell $MyMessage1$_store_cell((int, (cell, tuple)) v) inline {
    return $MyMessage1$_store(begin_cell(), v).end_cell();
}

(slice, ((int, (cell, tuple)))) $MyMessage1$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2844430700);
    var v'a = sc_0~load_int(257);
    var v's = sc_0~$MyStruct2$_load();
    return (sc_0, (v'a, v's));
}

((int, (cell, tuple))) $MyMessage1$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$MyMessage1$_load();
    sc_0.end_parse();
    return r;
}

(int, (cell, tuple)) $MyMessage1$_from_tuple(tuple v) inline {
    var (int v'a, tuple v's) = __tact_tuple_destroy_2(v);
    return (v'a, $MyStruct2$_from_tuple(v's));
}

(int, (cell, tuple)) $MyMessage1$_to_external(((int, (cell, tuple))) v) inline {
    var (v'a, v's) = v; 
    return (v'a, v's);
}

;;
;; Type: Coin
;; TLB: _ first:coins second:uint32 = Coin
;;

(slice, ((int, int))) $Coin$_load(slice sc_0) inline {
    var v'first = sc_0~load_varuint16();
    var v'second = sc_0~load_uint(32);
    return (sc_0, (v'first, v'second));
}

((int, int)) $Coin$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$Coin$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: VarIntegers
;; TLB: _ a:varint16 b:varint32 c:varuint16 d:varuint32 = VarIntegers
;;

(slice, ((int, int, int, int))) $VarIntegers$_load(slice sc_0) inline {
    var v'a = sc_0~load_varint16();
    var v'b = sc_0~load_varint32();
    var v'c = sc_0~load_varuint16();
    var v'd = sc_0~load_varuint32();
    return (sc_0, (v'a, v'b, v'c, v'd));
}

((int, int, int, int)) $VarIntegers$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$VarIntegers$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: IntFields
;; TLB: _ i1:int1 i2:int2 i3:int3 i255:int255 i256:int256 i257:int257 = IntFields
;;

(slice, ((int, int, int, int, int, int))) $IntFields$_load(slice sc_0) inline {
    var v'i1 = sc_0~load_int(1);
    var v'i2 = sc_0~load_int(2);
    var v'i3 = sc_0~load_int(3);
    var v'i255 = sc_0~load_int(255);
    var v'i256 = sc_0~load_int(256);
    var v'i257 = sc_0~load_int(257);
    return (sc_0, (v'i1, v'i2, v'i3, v'i255, v'i256, v'i257));
}

((int, int, int, int, int, int)) $IntFields$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$IntFields$_load();
    sc_0.end_parse();
    return r;
}

(int, int, int, int, int, int) $IntFields$_to_external(((int, int, int, int, int, int)) v) inline {
    var (v'i1, v'i2, v'i3, v'i255, v'i256, v'i257) = v; 
    return (v'i1, v'i2, v'i3, v'i255, v'i256, v'i257);
}

((int, int, int, int, int, int)) $IntFields$_constructor_i1_i2_i3_i255_i256_i257(int $i1, int $i2, int $i3, int $i255, int $i256, int $i257) inline {
    return ($i1, $i2, $i3, $i255, $i256, $i257);
}

;;
;; Type: UintFields
;; Header: 0xea01f46a
;; TLB: uint_fields#ea01f46a u1:uint1 u2:uint2 u3:uint3 u254:uint254 u255:uint255 u256:uint256 = UintFields
;;

(slice, ((int, int, int, int, int, int))) $UintFields$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3925996650);
    var v'u1 = sc_0~load_uint(1);
    var v'u2 = sc_0~load_uint(2);
    var v'u3 = sc_0~load_uint(3);
    var v'u254 = sc_0~load_uint(254);
    var v'u255 = sc_0~load_uint(255);
    var v'u256 = sc_0~load_uint(256);
    return (sc_0, (v'u1, v'u2, v'u3, v'u254, v'u255, v'u256));
}

((int, int, int, int, int, int)) $UintFields$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$UintFields$_load();
    sc_0.end_parse();
    return r;
}

(int, int, int, int, int, int) $UintFields$_to_external(((int, int, int, int, int, int)) v) inline {
    var (v'u1, v'u2, v'u3, v'u254, v'u255, v'u256) = v; 
    return (v'u1, v'u2, v'u3, v'u254, v'u255, v'u256);
}

((int, int, int, int, int, int)) $UintFields$_constructor_u1_u2_u3_u254_u255_u256(int $u1, int $u2, int $u3, int $u254, int $u255, int $u256) inline {
    return ($u1, $u2, $u3, $u254, $u255, $u256);
}

;;
;; Type: LongStruct15
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 = LongStruct15
;;

builder $LongStruct15$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15) = v;
    build_0 = build_0.store_int(v'x1, 257);
    build_0 = build_0.store_int(v'x2, 257);
    build_0 = build_0.store_int(v'x3, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'x4, 257);
    build_1 = build_1.store_int(v'x5, 257);
    build_1 = build_1.store_int(v'x6, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'x7, 257);
    build_2 = build_2.store_int(v'x8, 257);
    build_2 = build_2.store_int(v'x9, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'x10, 257);
    build_3 = build_3.store_int(v'x11, 257);
    build_3 = build_3.store_int(v'x12, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'x13, 257);
    build_4 = build_4.store_int(v'x14, 257);
    build_4 = build_4.store_int(v'x15, 257);
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LongStruct15$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $LongStruct15$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct15$_load(slice sc_0) inline_ref {
    var v'x1 = sc_0~load_int(257);
    var v'x2 = sc_0~load_int(257);
    var v'x3 = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'x4 = sc_1~load_int(257);
    var v'x5 = sc_1~load_int(257);
    var v'x6 = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'x7 = sc_2~load_int(257);
    var v'x8 = sc_2~load_int(257);
    var v'x9 = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'x10 = sc_3~load_int(257);
    var v'x11 = sc_3~load_int(257);
    var v'x12 = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'x13 = sc_4~load_int(257);
    var v'x14 = sc_4~load_int(257);
    var v'x15 = sc_4~load_int(257);
    return (sc_0, (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15));
}

tuple $LongStruct15$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15) = v;
    return __tact_tuple_create_15(v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15);
}

tuple $LongStruct15$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LongStruct15$_as_optional(sc~$LongStruct15$_load());
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct15$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'x1, int vvv'x2, int vvv'x3, int vvv'x4, int vvv'x5, int vvv'x6, int vvv'x7, int vvv'x8, int vvv'x9, int vvv'x10, int vvv'x11, int vvv'x12, int vvv'x13, int vvv'x14, int vvv'x15) = __tact_tuple_destroy_15(v);
    return (vvv'x1, vvv'x2, vvv'x3, vvv'x4, vvv'x5, vvv'x6, vvv'x7, vvv'x8, vvv'x9, vvv'x10, vvv'x11, vvv'x12, vvv'x13, vvv'x14, vvv'x15);
}

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct15$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct15$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15);
}

;;
;; Type: LongStruct16
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 = LongStruct16
;;

builder $LongStruct16$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16) = v;
    build_0 = build_0.store_int(v'x1, 257);
    build_0 = build_0.store_int(v'x2, 257);
    build_0 = build_0.store_int(v'x3, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'x4, 257);
    build_1 = build_1.store_int(v'x5, 257);
    build_1 = build_1.store_int(v'x6, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'x7, 257);
    build_2 = build_2.store_int(v'x8, 257);
    build_2 = build_2.store_int(v'x9, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'x10, 257);
    build_3 = build_3.store_int(v'x11, 257);
    build_3 = build_3.store_int(v'x12, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'x13, 257);
    build_4 = build_4.store_int(v'x14, 257);
    build_4 = build_4.store_int(v'x15, 257);
    var build_5 = begin_cell();
    build_5 = build_5.store_int(v'x16, 257);
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LongStruct16$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $LongStruct16$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct16$_load(slice sc_0) inline_ref {
    var v'x1 = sc_0~load_int(257);
    var v'x2 = sc_0~load_int(257);
    var v'x3 = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'x4 = sc_1~load_int(257);
    var v'x5 = sc_1~load_int(257);
    var v'x6 = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'x7 = sc_2~load_int(257);
    var v'x8 = sc_2~load_int(257);
    var v'x9 = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'x10 = sc_3~load_int(257);
    var v'x11 = sc_3~load_int(257);
    var v'x12 = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'x13 = sc_4~load_int(257);
    var v'x14 = sc_4~load_int(257);
    var v'x15 = sc_4~load_int(257);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'x16 = sc_5~load_int(257);
    return (sc_0, (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16));
}

tuple $LongStruct16$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16) = v;
    return __tact_tuple_create_15(v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, [v'x15, v'x16]);
}

tuple $LongStruct16$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LongStruct16$_as_optional(sc~$LongStruct16$_load());
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct16$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'x1, int vvv'x2, int vvv'x3, int vvv'x4, int vvv'x5, int vvv'x6, int vvv'x7, int vvv'x8, int vvv'x9, int vvv'x10, int vvv'x11, int vvv'x12, int vvv'x13, int vvv'x14, next) = __tact_tuple_destroy_15(v);
    var (int vvv'x15, int vvv'x16) = __tact_tuple_destroy_2(next);
    return (vvv'x1, vvv'x2, vvv'x3, vvv'x4, vvv'x5, vvv'x6, vvv'x7, vvv'x8, vvv'x9, vvv'x10, vvv'x11, vvv'x12, vvv'x13, vvv'x14, vvv'x15, vvv'x16);
}

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct16$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15, $x16);
}

;;
;; Type: LongStruct32
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 x17:int257 x18:int257 x19:int257 x20:int257 x21:int257 x22:int257 x23:int257 x24:int257 x25:int257 x26:int257 x27:int257 x28:int257 x29:int257 x30:int257 x31:int257 x32:int257 = LongStruct32
;;

builder $LongStruct32$_store(builder build_0, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, v'x29, v'x30, v'x31, v'x32) = v;
    build_0 = build_0.store_int(v'x1, 257);
    build_0 = build_0.store_int(v'x2, 257);
    build_0 = build_0.store_int(v'x3, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'x4, 257);
    build_1 = build_1.store_int(v'x5, 257);
    build_1 = build_1.store_int(v'x6, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'x7, 257);
    build_2 = build_2.store_int(v'x8, 257);
    build_2 = build_2.store_int(v'x9, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'x10, 257);
    build_3 = build_3.store_int(v'x11, 257);
    build_3 = build_3.store_int(v'x12, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'x13, 257);
    build_4 = build_4.store_int(v'x14, 257);
    build_4 = build_4.store_int(v'x15, 257);
    var build_5 = begin_cell();
    build_5 = build_5.store_int(v'x16, 257);
    build_5 = build_5.store_int(v'x17, 257);
    build_5 = build_5.store_int(v'x18, 257);
    var build_6 = begin_cell();
    build_6 = build_6.store_int(v'x19, 257);
    build_6 = build_6.store_int(v'x20, 257);
    build_6 = build_6.store_int(v'x21, 257);
    var build_7 = begin_cell();
    build_7 = build_7.store_int(v'x22, 257);
    build_7 = build_7.store_int(v'x23, 257);
    build_7 = build_7.store_int(v'x24, 257);
    var build_8 = begin_cell();
    build_8 = build_8.store_int(v'x25, 257);
    build_8 = build_8.store_int(v'x26, 257);
    build_8 = build_8.store_int(v'x27, 257);
    var build_9 = begin_cell();
    build_9 = build_9.store_int(v'x28, 257);
    build_9 = build_9.store_int(v'x29, 257);
    build_9 = build_9.store_int(v'x30, 257);
    var build_10 = begin_cell();
    build_10 = build_10.store_int(v'x31, 257);
    build_10 = build_10.store_int(v'x32, 257);
    build_9 = store_ref(build_9, build_10.end_cell());
    build_8 = store_ref(build_8, build_9.end_cell());
    build_7 = store_ref(build_7, build_8.end_cell());
    build_6 = store_ref(build_6, build_7.end_cell());
    build_5 = store_ref(build_5, build_6.end_cell());
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LongStruct32$_store_cell((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $LongStruct32$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongStruct32$_load(slice sc_0) inline_ref {
    var v'x1 = sc_0~load_int(257);
    var v'x2 = sc_0~load_int(257);
    var v'x3 = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'x4 = sc_1~load_int(257);
    var v'x5 = sc_1~load_int(257);
    var v'x6 = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'x7 = sc_2~load_int(257);
    var v'x8 = sc_2~load_int(257);
    var v'x9 = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'x10 = sc_3~load_int(257);
    var v'x11 = sc_3~load_int(257);
    var v'x12 = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'x13 = sc_4~load_int(257);
    var v'x14 = sc_4~load_int(257);
    var v'x15 = sc_4~load_int(257);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'x16 = sc_5~load_int(257);
    var v'x17 = sc_5~load_int(257);
    var v'x18 = sc_5~load_int(257);
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'x19 = sc_6~load_int(257);
    var v'x20 = sc_6~load_int(257);
    var v'x21 = sc_6~load_int(257);
    slice sc_7 = sc_6~load_ref().begin_parse();
    var v'x22 = sc_7~load_int(257);
    var v'x23 = sc_7~load_int(257);
    var v'x24 = sc_7~load_int(257);
    slice sc_8 = sc_7~load_ref().begin_parse();
    var v'x25 = sc_8~load_int(257);
    var v'x26 = sc_8~load_int(257);
    var v'x27 = sc_8~load_int(257);
    slice sc_9 = sc_8~load_ref().begin_parse();
    var v'x28 = sc_9~load_int(257);
    var v'x29 = sc_9~load_int(257);
    var v'x30 = sc_9~load_int(257);
    slice sc_10 = sc_9~load_ref().begin_parse();
    var v'x31 = sc_10~load_int(257);
    var v'x32 = sc_10~load_int(257);
    return (sc_0, (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, v'x29, v'x30, v'x31, v'x32));
}

tuple $LongStruct32$_as_optional((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, v'x29, v'x30, v'x31, v'x32) = v;
    return __tact_tuple_create_15(v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, [v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, [v'x29, v'x30, v'x31, v'x32]]);
}

tuple $LongStruct32$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LongStruct32$_as_optional(sc~$LongStruct32$_load());
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct32$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'x1, int vvv'x2, int vvv'x3, int vvv'x4, int vvv'x5, int vvv'x6, int vvv'x7, int vvv'x8, int vvv'x9, int vvv'x10, int vvv'x11, int vvv'x12, int vvv'x13, int vvv'x14, next) = __tact_tuple_destroy_15(v);
    var (int vvv'x15, int vvv'x16, int vvv'x17, int vvv'x18, int vvv'x19, int vvv'x20, int vvv'x21, int vvv'x22, int vvv'x23, int vvv'x24, int vvv'x25, int vvv'x26, int vvv'x27, int vvv'x28, next) = __tact_tuple_destroy_15(next);
    var (int vvv'x29, int vvv'x30, int vvv'x31, int vvv'x32) = __tact_tuple_destroy_4(next);
    return (vvv'x1, vvv'x2, vvv'x3, vvv'x4, vvv'x5, vvv'x6, vvv'x7, vvv'x8, vvv'x9, vvv'x10, vvv'x11, vvv'x12, vvv'x13, vvv'x14, vvv'x15, vvv'x16, vvv'x17, vvv'x18, vvv'x19, vvv'x20, vvv'x21, vvv'x22, vvv'x23, vvv'x24, vvv'x25, vvv'x26, vvv'x27, vvv'x28, vvv'x29, vvv'x30, vvv'x31, vvv'x32);
}

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $LongStruct32$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, v'x29, v'x30, v'x31, v'x32) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v'x21, v'x22, v'x23, v'x24, v'x25, v'x26, v'x27, v'x28, v'x29, v'x30, v'x31, v'x32);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, int $x21, int $x22, int $x23, int $x24, int $x25, int $x26, int $x27, int $x28, int $x29, int $x30, int $x31, int $x32) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15, $x16, $x17, $x18, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28, $x29, $x30, $x31, $x32);
}

;;
;; Type: LongNestedStruct
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 x17:int257 x18:int257 x19:int257 x20:int257 s1:LongStruct15{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257} s2:LongStruct16{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257} s3:LongStruct32{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257,x17:int257,x18:int257,x19:int257,x20:int257,x21:int257,x22:int257,x23:int257,x24:int257,x25:int257,x26:int257,x27:int257,x28:int257,x29:int257,x30:int257,x31:int257,x32:int257} = LongNestedStruct
;;

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $LongNestedStruct$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v's1, v's2, v's3) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v's1, v's2, v's3);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LongNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s1, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s2, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s3) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15, $x16, $x17, $x18, $x19, $x20, $s1, $s2, $s3);
}

;;
;; Type: LongNestedStructWithOpts
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 x17:int257 x18:Maybe int257 x19:int257 x20:int257 s1:Maybe LongStruct15{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257} s2:LongStruct16{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257} s3:Maybe LongStruct32{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257,x17:int257,x18:int257,x19:int257,x20:int257,x21:int257,x22:int257,x23:int257,x24:int257,x25:int257,x26:int257,x27:int257,x28:int257,x29:int257,x30:int257,x31:int257,x32:int257} = LongNestedStructWithOpts
;;

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple) $LongNestedStructWithOpts$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v's1, v's2, v's3) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20, v's1, v's2, v's3);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) $LongNestedStructWithOpts$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, int $x17, int $x18, int $x19, int $x20, tuple $s1, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $s2, tuple $s3) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15, $x16, $x17, $x18, $x19, $x20, $s1, $s2, $s3);
}

;;
;; Type: Point
;; TLB: _ x:int64 y:int64 = Point
;;

((int, int)) $Point$_constructor_x_y(int $x, int $y) inline {
    return ($x, $y);
}

;;
;; Type: Line
;; TLB: _ start:Point{x:int64,y:int64} end:Point{x:int64,y:int64} = Line
;;

tuple $Line$_as_optional(((int, int), (int, int)) v) inline {
    var ((v'start'x, v'start'y), (v'end'x, v'end'y)) = v;
    return __tact_tuple_create_4(v'start'x, v'start'y, v'end'x, v'end'y);
}

(((int, int), (int, int))) $Line$_constructor_start_end((int, int) $start, (int, int) $end) inline {
    return ($start, $end);
}

;;
;; Type: Location
;; TLB: _ idx:int257 line1:Line{start:Point{x:int64,y:int64},end:Point{x:int64,y:int64}} line2:Maybe Line{start:Point{x:int64,y:int64},end:Point{x:int64,y:int64}} = Location
;;

(int, ((int, int), (int, int)), tuple) $Location$_to_external(((int, ((int, int), (int, int)), tuple)) v) inline {
    var (v'idx, v'line1, v'line2) = v; 
    return (v'idx, v'line1, v'line2);
}

((int, ((int, int), (int, int)), tuple)) $Location$_constructor_idx_line1_line2(int $idx, ((int, int), (int, int)) $line1, tuple $line2) inline {
    return ($idx, $line1, $line2);
}

;;
;; Type: DoubleNestedStructOpt
;; TLB: _ a:int257 s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257} = DoubleNestedStructOpt
;;

tuple $DoubleNestedStructOpt$_as_optional((int, tuple) v) inline {
    var (v'a, v's) = v;
    return __tact_tuple_create_2(v'a, v's);
}

((int, tuple)) $DoubleNestedStructOpt$_constructor_a_s(int $a, tuple $s) inline {
    return ($a, $s);
}

;;
;; Type: TripleNestedStructOpt
;; TLB: _ a:int257 s:Maybe DoubleNestedStructOpt{a:int257,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}} = TripleNestedStructOpt
;;

tuple $TripleNestedStructOpt$_as_optional((int, tuple) v) inline {
    var (v'a, v's) = v;
    return __tact_tuple_create_2(v'a, v's);
}

(int, tuple) $TripleNestedStructOpt$_to_external(((int, tuple)) v) inline {
    var (v'a, v's) = v; 
    return (v'a, v's);
}

((int, tuple)) $TripleNestedStructOpt$_constructor_a_s(int $a, tuple $s) inline {
    return ($a, $s);
}

;;
;; Type: LongAndDeepNestedStruct
;; TLB: _ x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 s1:TripleNestedStructOpt{a:int257,s:Maybe DoubleNestedStructOpt{a:int257,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}}} s2:TripleNestedStructOpt{a:int257,s:Maybe DoubleNestedStructOpt{a:int257,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}}} s3:Maybe TripleNestedStructOpt{a:int257,s:Maybe DoubleNestedStructOpt{a:int257,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}}} s4:Maybe TripleNestedStructOpt{a:int257,s:Maybe DoubleNestedStructOpt{a:int257,s:Maybe MyStruct1{a:int257,b:uint32,c:Maybe int257}}} = LongAndDeepNestedStruct
;;

(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple) $LongAndDeepNestedStruct$_to_external(((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) v) inline {
    var (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v's1, v's2, v's3, v's4) = v; 
    return (v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v's1, v's2, v's3, v's4);
}

((int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4(int $x1, int $x2, int $x3, int $x4, int $x5, int $x6, int $x7, int $x8, int $x9, int $x10, int $x11, int $x12, int $x13, int $x14, int $x15, int $x16, (int, tuple) $s1, (int, tuple) $s2, tuple $s3, tuple $s4) inline {
    return ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15, $x16, $s1, $s2, $s3, $s4);
}

;;
;; Type: Foo
;; Header: 0x0000002a
;; TLB: foo#0000002a s:remainder<slice> = Foo
;;

(slice, ((slice))) $Foo$_load_without_opcode(slice sc_0) inline {
    var v's = sc_0;
    return (sc_0, (v's));
}

;;
;; Type: Dict
;; TLB: _ m:dict<uint8, coins> = Dict
;;

builder $Dict$_store(builder build_0, (cell) v) inline {
    var (v'm) = v;
    build_0 = build_0.store_dict(v'm);
    return build_0;
}

cell $Dict$_store_cell((cell) v) inline {
    return $Dict$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $Dict$_load(slice sc_0) inline {
    var v'm = sc_0~load_dict();
    return (sc_0, (v'm));
}

((cell)) $Dict$_load_not_mut(slice sc_0) inline {
    var r = sc_0~$Dict$_load();
    sc_0.end_parse();
    return r;
}

;;
;; Type: OptionalFields
;; TLB: _ nickname:Maybe ^string avatar:Maybe ^string = OptionalFields
;;

(slice, slice) $OptionalFields$_to_external(((slice, slice)) v) inline {
    var (v'nickname, v'avatar) = v; 
    return (v'nickname, v'avatar);
}

((slice, slice)) $OptionalFields$_constructor_nickname_avatar(slice $nickname, slice $avatar) inline {
    return ($nickname, $avatar);
}

;;
;; Type: S1
;; TLB: _ a:int257 b:int257 c:int257 = S1
;;

(int, int, int) $S1$_to_external(((int, int, int)) v) inline {
    var (v'a, v'b, v'c) = v; 
    return (v'a, v'b, v'c);
}

((int, int, int)) $S1$_constructor_a_b_c(int $a, int $b, int $c) inline {
    return ($a, $b, $c);
}

;;
;; Type: StructsTester
;; TLB: _ s1:S{a:bool,b:int257} s2:S{a:bool,b:int257} t1:T{a:int257,s:S{a:bool,b:int257}} t2:T{a:int257,s:S{a:bool,b:int257}} mapWithLongStructs15:dict<int, ^LongStruct15{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257}> mapWithLongStructs16:dict<int, ^LongStruct16{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257}> mapWithLongStructs32:dict<int, ^LongStruct32{x1:int257,x2:int257,x3:int257,x4:int257,x5:int257,x6:int257,x7:int257,x8:int257,x9:int257,x10:int257,x11:int257,x12:int257,x13:int257,x14:int257,x15:int257,x16:int257,x17:int257,x18:int257,x19:int257,x20:int257,x21:int257,x22:int257,x23:int257,x24:int257,x25:int257,x26:int257,x27:int257,x28:int257,x29:int257,x30:int257,x31:int257,x32:int257}> x1:int257 x2:int257 x3:int257 x4:int257 x5:int257 x6:int257 x7:int257 x8:int257 x9:int257 x10:int257 x11:int257 x12:int257 x13:int257 x14:int257 x15:int257 x16:int257 x17:int257 x18:int257 x19:int257 x20:int257 = StructsTester
;;

(slice, (((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $StructsTester$_load(slice sc_0) inline {
    var v's1 = sc_0~$S$_load();
    var v's2 = sc_0~$S$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v't1 = sc_1~$T$_load();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v't2 = sc_2~$T$_load();
    var v'mapWithLongStructs15 = sc_2~load_dict();
    var v'mapWithLongStructs16 = sc_2~load_dict();
    var v'mapWithLongStructs32 = sc_2~load_dict();
    var v'x1 = sc_2~load_int(257);
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'x2 = sc_3~load_int(257);
    var v'x3 = sc_3~load_int(257);
    var v'x4 = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'x5 = sc_4~load_int(257);
    var v'x6 = sc_4~load_int(257);
    var v'x7 = sc_4~load_int(257);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'x8 = sc_5~load_int(257);
    var v'x9 = sc_5~load_int(257);
    var v'x10 = sc_5~load_int(257);
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'x11 = sc_6~load_int(257);
    var v'x12 = sc_6~load_int(257);
    var v'x13 = sc_6~load_int(257);
    slice sc_7 = sc_6~load_ref().begin_parse();
    var v'x14 = sc_7~load_int(257);
    var v'x15 = sc_7~load_int(257);
    var v'x16 = sc_7~load_int(257);
    slice sc_8 = sc_7~load_ref().begin_parse();
    var v'x17 = sc_8~load_int(257);
    var v'x18 = sc_8~load_int(257);
    var v'x19 = sc_8~load_int(257);
    slice sc_9 = sc_8~load_ref().begin_parse();
    var v'x20 = sc_9~load_int(257);
    return (sc_0, (v's1, v's2, v't1, v't2, v'mapWithLongStructs15, v'mapWithLongStructs16, v'mapWithLongStructs32, v'x1, v'x2, v'x3, v'x4, v'x5, v'x6, v'x7, v'x8, v'x9, v'x10, v'x11, v'x12, v'x13, v'x14, v'x15, v'x16, v'x17, v'x18, v'x19, v'x20));
}

((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $StructsTester$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$StructsTester$_load();
    } else {
        return $StructsTester$_contract_init();
    }
}

;;
;; Contract StructsTester functions
;;

((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $StructsTester$_contract_init() impure inline {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = ($S$_constructor_a_b(false, 42), null(), $T$_constructor_a_s(43, $S$_constructor_a_b(true, 44)), null(), null(), null(), null(), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);
    ($self's2'a, $self's2'b) = $S$_constructor_a_b(false, 42);
    ($self't2'a, ($self't2's'a, $self't2's'b)) = $T$_constructor_a_s(43, $S$_constructor_a_b(true, 44));
    return (($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20);
}

(int, int) $global_directParse(cell $payload) impure inline_ref {
    return $Coin$_load_not_mut($payload.begin_parse());
}

(int, int, int, int) $global_directParseVarIntegers(cell $payload) impure inline_ref {
    return $VarIntegers$_load_not_mut($payload.begin_parse());
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_structInitializerTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2462 = ( (( (( (( (($self's1'a == $self's2'a)) ? (($self's1'b == $self's2'b)) : (false) )) ? (($self't1'a == $self't2'a)) : (false) )) ? (($self't1's'a == $self't2's'a)) : (false) )) ? (($self't1's'b == $self't2's'b)) : (false) );
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2462);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCell1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var (($s'a, $s'b, $s'c)) = $s;
    var $fresh$ret_2463 = $MyStruct1$_store_cell(($s'a, $s'b, $s'c));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2463);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_toSlice1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var (($s'a, $s'b, $s'c)) = $s;
    var $fresh$ret_2464 = $MyStruct1$_store_cell(($s'a, $s'b, $s'c)).begin_parse();
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2464);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_fromCell1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b, $s'c) = $MyStruct1$_load_not_mut($src.begin_parse());
    var $fresh$ret_2465 = ($s'a, $s'b, $s'c);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2465);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_fromSlice1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2466 = $MyStruct1$_load_not_mut($src);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2466);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCell2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (cell, tuple) $s) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var (($s'm, $s's)) = $s;
    var $fresh$ret_2467 = $MyStruct2$_store_cell(($s'm, $s's));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2467);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (cell, tuple)) $StructsTester$_fun_fromCell2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'm, $s's) = $MyStruct2$_load_not_mut($src.begin_parse());
    var $fresh$ret_2468 = ($s'm, $s's);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2468);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (cell, tuple)) $StructsTester$_fun_fromSlice2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'm, $s's) = $MyStruct2$_load_not_mut($src);
    var $fresh$ret_2469 = ($s'm, $s's);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2469);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_test1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, int, int) $s1, (cell, tuple) $s2) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var (($s1'a, $s1'b, $s1'c)) = $s1;
    var (($s2'm, $s2's)) = $s2;
    cell $c = $Builder$_fun_endCell($Builder$_fun_storeRef($MyStruct2$_store_cell(($s2'm, $s2's)), $Builder$_fun_storeRef($MyStruct1$_store_cell(($s1'a, $s1'b, $s1'c)), $global_beginCell())));
    slice $s = $Cell$_fun_beginParse($c);
    var ($s1_'a, $s1_'b, $s1_'c) = $MyStruct1$_load_not_mut($s~$Slice$_fun_loadRef().begin_parse());
    var ($s2_'m, $s2_'s) = $MyStruct2$_load_not_mut($Cell$_fun_beginParse($s~$Slice$_fun_loadRef()));
    var $fresh$ret_2470 = $Builder$_fun_endCell($Builder$_fun_storeRef($MyStruct2$_store_cell(($s2_'m, $s2_'s)), $Builder$_fun_storeRef($MyStruct1$_store_cell(($s1_'a, $s1_'b, $s1_'c)), $global_beginCell())));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2470);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $StructsTester$_fun_toCellMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, (int, (cell, tuple)) $m) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var (($m'a, ($m's'm, $m's's))) = $m;
    var $fresh$ret_2471 = $MyMessage1$_store_cell(($m'a, ($m's'm, $m's's)));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2471);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, (cell, tuple))) $StructsTester$_fun_fromCellMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2472 = $MyMessage1$_load_not_mut($src.begin_parse());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2472);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, (cell, tuple))) $StructsTester$_fun_fromSliceMessage1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, slice $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2473 = $MyMessage1$_load_not_mut($src);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2473);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_contractStructConstantImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2474 = $MyStruct3$_constructor_s(__gen_slice_string_4ce32ce598da11765ede89249e8e7cd65a800ea073ec2978e679b04149690586());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2474);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_globalConstStructConstantImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2475 = $MyStruct3$_constructor_s(__gen_slice_string_5904d88cd8ab28ac39339ae74870495975e33f91438cb29dfd5791297e285187());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2475);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_contractStructConstantFieldImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2476 = __gen_slice_string_4ce32ce598da11765ede89249e8e7cd65a800ea073ec2978e679b04149690586();
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2476);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_globalConstStructConstantFieldImmediate(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2477 = __gen_slice_string_5904d88cd8ab28ac39339ae74870495975e33f91438cb29dfd5791297e285187();
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2477);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_contractStructConstantViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s's) = $MyStruct3$_constructor_s(__gen_slice_string_4ce32ce598da11765ede89249e8e7cd65a800ea073ec2978e679b04149690586());
    var $fresh$ret_2478 = ($s's);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2478);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice)) $StructsTester$_fun_globalConstStructConstantViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s's) = $MyStruct3$_constructor_s(__gen_slice_string_5904d88cd8ab28ac39339ae74870495975e33f91438cb29dfd5791297e285187());
    var $fresh$ret_2479 = ($s's);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2479);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_contractStructConstantFieldViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    slice $s = __gen_slice_string_4ce32ce598da11765ede89249e8e7cd65a800ea073ec2978e679b04149690586();
    var $fresh$ret_2480 = $s;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2480);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $StructsTester$_fun_globalConstStructConstantFieldViaVar(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    slice $s = __gen_slice_string_5904d88cd8ab28ac39339ae74870495975e33f91438cb29dfd5791297e285187();
    var $fresh$ret_2481 = $s;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2481);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct15Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15) = $LongStruct15$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
    $s'x1 = 1;
    $s'x15 = 15;
    $self'mapWithLongStructs15~__tact_dict_set_int_cell(257, 1, $LongStruct15$_store_cell(($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15)));
    var $fresh$ret_2482 = $LongStruct15$_not_null($LongStruct15$_load_opt(__tact_dict_get_int_cell($self'mapWithLongStructs15, 257, 1)));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2482);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct16Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16) = $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
    $s'x1 = 1;
    $s'x16 = 16;
    $self'mapWithLongStructs16~__tact_dict_set_int_cell(257, 1, $LongStruct16$_store_cell(($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16)));
    var $fresh$ret_2483 = $LongStruct16$_not_null($LongStruct16$_load_opt(__tact_dict_get_int_cell($self'mapWithLongStructs16, 257, 1)));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2483);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $StructsTester$_fun_longStruct32Test(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, $s'x21, $s'x22, $s'x23, $s'x24, $s'x25, $s'x26, $s'x27, $s'x28, $s'x29, $s'x30, $s'x31, $s'x32) = $LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32);
    $s'x1 = 1;
    $s'x32 = 32;
    $self'mapWithLongStructs32~__tact_dict_set_int_cell(257, 1, $LongStruct32$_store_cell(($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, $s'x21, $s'x22, $s'x23, $s'x24, $s'x25, $s'x26, $s'x27, $s'x28, $s'x29, $s'x30, $s'x31, $s'x32)));
    var $fresh$ret_2484 = $LongStruct32$_not_null($LongStruct32$_load_opt(__tact_dict_get_int_cell($self'mapWithLongStructs32, 257, 1)));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2484);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int))) $StructsTester$_fun_longNestedStructTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, ($s's1'x1, $s's1'x2, $s's1'x3, $s's1'x4, $s's1'x5, $s's1'x6, $s's1'x7, $s's1'x8, $s's1'x9, $s's1'x10, $s's1'x11, $s's1'x12, $s's1'x13, $s's1'x14, $s's1'x15), ($s's2'x1, $s's2'x2, $s's2'x3, $s's2'x4, $s's2'x5, $s's2'x6, $s's2'x7, $s's2'x8, $s's2'x9, $s's2'x10, $s's2'x11, $s's2'x12, $s's2'x13, $s's2'x14, $s's2'x15, $s's2'x16), ($s's3'x1, $s's3'x2, $s's3'x3, $s's3'x4, $s's3'x5, $s's3'x6, $s's3'x7, $s's3'x8, $s's3'x9, $s's3'x10, $s's3'x11, $s's3'x12, $s's3'x13, $s's3'x14, $s's3'x15, $s's3'x16, $s's3'x17, $s's3'x18, $s's3'x19, $s's3'x20, $s's3'x21, $s's3'x22, $s's3'x23, $s's3'x24, $s's3'x25, $s's3'x26, $s's3'x27, $s's3'x28, $s's3'x29, $s's3'x30, $s's3'x31, $s's3'x32)) = $LongNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, $LongStruct15$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), $LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32));
    var $fresh$ret_2485 = ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, ($s's1'x1, $s's1'x2, $s's1'x3, $s's1'x4, $s's1'x5, $s's1'x6, $s's1'x7, $s's1'x8, $s's1'x9, $s's1'x10, $s's1'x11, $s's1'x12, $s's1'x13, $s's1'x14, $s's1'x15), ($s's2'x1, $s's2'x2, $s's2'x3, $s's2'x4, $s's2'x5, $s's2'x6, $s's2'x7, $s's2'x8, $s's2'x9, $s's2'x10, $s's2'x11, $s's2'x12, $s's2'x13, $s's2'x14, $s's2'x15, $s's2'x16), ($s's3'x1, $s's3'x2, $s's3'x3, $s's3'x4, $s's3'x5, $s's3'x6, $s's3'x7, $s's3'x8, $s's3'x9, $s's3'x10, $s's3'x11, $s's3'x12, $s's3'x13, $s's3'x14, $s's3'x15, $s's3'x16, $s's3'x17, $s's3'x18, $s's3'x19, $s's3'x20, $s's3'x21, $s's3'x22, $s's3'x23, $s's3'x24, $s's3'x25, $s's3'x26, $s's3'x27, $s's3'x28, $s's3'x29, $s's3'x30, $s's3'x31, $s's3'x32));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2485);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, tuple, (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple)) $StructsTester$_fun_longNestedStructWithOptsTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, $s's1, ($s's2'x1, $s's2'x2, $s's2'x3, $s's2'x4, $s's2'x5, $s's2'x6, $s's2'x7, $s's2'x8, $s's2'x9, $s's2'x10, $s's2'x11, $s's2'x12, $s's2'x13, $s's2'x14, $s's2'x15, $s's2'x16), $s's3) = $LongNestedStructWithOpts$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_s1_s2_s3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, null(), $LongStruct16$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), $LongStruct32$_as_optional($LongStruct32$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_x17_x18_x19_x20_x21_x22_x23_x24_x25_x26_x27_x28_x29_x30_x31_x32(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)));
    var $fresh$ret_2486 = ($s'x1, $s'x2, $s'x3, $s'x4, $s'x5, $s'x6, $s'x7, $s'x8, $s'x9, $s'x10, $s'x11, $s'x12, $s'x13, $s'x14, $s'x15, $s'x16, $s'x17, $s'x18, $s'x19, $s'x20, $s's1, ($s's2'x1, $s's2'x2, $s's2'x3, $s's2'x4, $s's2'x5, $s's2'x6, $s's2'x7, $s's2'x8, $s's2'x9, $s's2'x10, $s's2'x11, $s's2'x12, $s's2'x13, $s's2'x14, $s's2'x15, $s's2'x16), $s's3);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2486);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_longContractTest(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2487 = ((((((((((((((((((($self'x1 + $self'x2) + $self'x3) + $self'x4) + $self'x5) + $self'x6) + $self'x7) + $self'x8) + $self'x9) + $self'x10) + $self'x11) + $self'x12) + $self'x13) + $self'x14) + $self'x15) + $self'x16) + $self'x17) + $self'x18) + $self'x19) + $self'x20);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2487);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, ((int, int), (int, int)), tuple)) $StructsTester$_fun_location1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($start'x, $start'y) = $Point$_constructor_x_y(1, 2);
    var ($end'x, $end'y) = $Point$_constructor_x_y(3, 4);
    var $fresh$ret_2488 = $Location$_constructor_idx_line1_line2(1, $Line$_constructor_start_end(($start'x, $start'y), ($end'x, $end'y)), null());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2488);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, ((int, int), (int, int)), tuple)) $StructsTester$_fun_location2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($start'x, $start'y) = $Point$_constructor_x_y(1, 2);
    var ($end'x, $end'y) = $Point$_constructor_x_y(3, 4);
    var $fresh$ret_2489 = $Location$_constructor_idx_line1_line2(2, $Line$_constructor_start_end(($start'x, $start'y), ($end'x, $end'y)), $Line$_as_optional($Line$_constructor_start_end(($start'x, $start'y), ($end'x, $end'y))));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2489);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2490 = $TripleNestedStructOpt$_constructor_a_s(1, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(2, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(3, 4, 5)))));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2490);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2491 = $TripleNestedStructOpt$_constructor_a_s(1, null());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2491);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, tuple)) $StructsTester$_fun_tripleNestedStructOpt3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2492 = $TripleNestedStructOpt$_constructor_a_s(1, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(2, null())));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2492);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2493 = $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, $TripleNestedStructOpt$_constructor_a_s(1, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(2, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(3, 4, 5))))), $TripleNestedStructOpt$_constructor_a_s(6, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(7, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(8, 9, 10))))), null(), null());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2493);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2494 = $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, $TripleNestedStructOpt$_constructor_a_s(1, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(2, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(3, 4, 5))))), $TripleNestedStructOpt$_constructor_a_s(6, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(7, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(8, 9, 10))))), $TripleNestedStructOpt$_as_optional($TripleNestedStructOpt$_constructor_a_s(11, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(12, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(13, 14, 15)))))), $TripleNestedStructOpt$_as_optional($TripleNestedStructOpt$_constructor_a_s(16, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(17, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(18, 19, 20)))))));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2494);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, (int, tuple), (int, tuple), tuple, tuple)) $StructsTester$_fun_longAndDeepNestedStruct3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2495 = $LongAndDeepNestedStruct$_constructor_x1_x2_x3_x4_x5_x6_x7_x8_x9_x10_x11_x12_x13_x14_x15_x16_s1_s2_s3_s4(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, $TripleNestedStructOpt$_constructor_a_s(1, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(2, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(3, 4, 5))))), $TripleNestedStructOpt$_constructor_a_s(6, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(7, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(8, 9, 10))))), null(), $TripleNestedStructOpt$_as_optional($TripleNestedStructOpt$_constructor_a_s(16, $DoubleNestedStructOpt$_as_optional($DoubleNestedStructOpt$_constructor_a_s(17, $MyStruct1$_as_optional($MyStruct1$_constructor_a_b_c(18, 19, 20)))))));
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2495);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_intFieldsStruct(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2496 = $IntFields$_constructor_i1_i2_i3_i255_i256_i257(-1, -2, -4, -28948022309329048855892746252171976963317496166410141009864396001978282409984, -57896044618658097711785492504343953926634992332820282019728792003956564819968, -115792089237316195423570985008687907853269984665640564039457584007913129639936);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2496);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_intFieldsFromCell(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2497 = $IntFields$_load_not_mut($src.begin_parse());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2497);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_uintFieldsMessage(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2498 = $UintFields$_constructor_u1_u2_u3_u254_u255_u256(1, 3, 7, 28948022309329048855892746252171976963317496166410141009864396001978282409983, 57896044618658097711785492504343953926634992332820282019728792003956564819967, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2498);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int, int, int, int)) $StructsTester$_fun_uintFieldsFromCell(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $src) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2499 = $UintFields$_load_not_mut($src.begin_parse());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2499);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (slice, slice)) $StructsTester$_fun_optionalFields(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2500 = $OptionalFields$_constructor_nickname_avatar(null(), __gen_slice_string_18afb80323194c4de5843e01d7a15df253dd2723fc6b88ab87db0e07ba567776());
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2500);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest1(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var ($a, $b) = ($s'a, $s'b);
    var $fresh$ret_2501 = (($a ? 1 : 0) + $b);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2501);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest1Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2502 = 43;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2502);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest2(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var (_, $b) = ($s'a, $s'b);
    var $fresh$ret_2503 = $b;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2503);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest2Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2504 = 42;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2504);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest3(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var ($a, $b) = ($s'a, $s'b);
    var $fresh$ret_2505 = (($a ? 1 : 0) + $b);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2505);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest3Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2506 = 43;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2506);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest4(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var ($a, $b) = ($s'a, $s'b);
    var $fresh$ret_2507 = (($a ? 1 : 0) + $b);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2507);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest4Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2508 = 43;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2508);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest5(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var ($b, $a) = ($s'a, $s'b);
    var $fresh$ret_2509 = (($b ? 1 : 0) + $a);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2509);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest5Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2510 = 43;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2510);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest6(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b, $s'c) = $S1$_constructor_a_b_c(1, 2, 3);
    var ($a, $b, $e) = ($s'a, $s'b, $s'c);
    var $fresh$ret_2511 = (($a + $b) + $e);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2511);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest6Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2512 = 6;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2512);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_destructuringTest7(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b, $s'c) = $S1$_constructor_a_b_c(1, 2, 3);
    var ($a, $b, $e) = ($s'a, $s'b, $s'c);
    var $fresh$ret_2513 = $S1$_constructor_a_b_c($e, $b, $a);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2513);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), (int, int, int)) $StructsTester$_fun_destructuringTest7Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2514 = $S1$_constructor_a_b_c(3, 2, 1);
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2514);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest8(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var ($s'a, $s'b) = $S$_constructor_a_b(true, 42);
    var (_, $b) = ($s'a, $s'b);
    var $fresh$ret_2515 = $b;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2515);
}

(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $StructsTester$_fun_destructuringTest8Const(((int, int), (int, int), (int, (int, int)), (int, (int, int)), cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20)) = $self;
    var $fresh$ret_2516 = 42;
    return ((($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20), $fresh$ret_2516);
}

;;
;; Get methods of a Contract StructsTester
;;

_ %structInitializerTest() method_id(69602) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_structInitializerTest();
    return res;
}

_ %toCell1(tuple $s) method_id(82862) {
    (int, int, int) $s = $MyStruct1$_from_tuple($s);
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_toCell1($s);
    return res;
}

_ %toSlice1(tuple $s) method_id(69666) {
    (int, int, int) $s = $MyStruct1$_from_tuple($s);
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_toSlice1($s);
    return res;
}

_ %fromCell1(cell $src) method_id(76221) {
    cell $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromCell1($src);
    return $MyStruct1$_to_external(res);
}

_ %fromSlice1(slice $src) method_id(118478) {
    slice $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromSlice1($src);
    return $MyStruct1$_to_external(res);
}

_ %toCell2(tuple $s) method_id(95181) {
    (cell, tuple) $s = $MyStruct2$_from_tuple($s);
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_toCell2($s);
    return res;
}

_ %fromCell2(cell $src) method_id(72158) {
    cell $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromCell2($src);
    return $MyStruct2$_to_external(res);
}

_ %fromSlice2(slice $src) method_id(130733) {
    slice $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromSlice2($src);
    return $MyStruct2$_to_external(res);
}

_ %test1(tuple $s1, tuple $s2) method_id(70304) {
    (int, int, int) $s1 = $MyStruct1$_from_tuple($s1);
    (cell, tuple) $s2 = $MyStruct2$_from_tuple($s2);
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_test1($s1, $s2);
    return res;
}

_ %toCellMessage1(tuple $m) method_id(103675) {
    (int, (cell, tuple)) $m = $MyMessage1$_from_tuple($m);
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_toCellMessage1($m);
    return res;
}

_ %fromCellMessage1(cell $src) method_id(65739) {
    cell $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromCellMessage1($src);
    return $MyMessage1$_to_external(res);
}

_ %fromSliceMessage1(slice $src) method_id(100880) {
    slice $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_fromSliceMessage1($src);
    return $MyMessage1$_to_external(res);
}

_ %contractStructConstantImmediate() method_id(131046) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_contractStructConstantImmediate();
    return $MyStruct3$_to_external(res);
}

_ %globalConstStructConstantImmediate() method_id(96485) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_globalConstStructConstantImmediate();
    return $MyStruct3$_to_external(res);
}

_ %contractStructConstantFieldImmediate() method_id(115253) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_contractStructConstantFieldImmediate();
    return res;
}

_ %globalConstStructConstantFieldImmediate() method_id(72941) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_globalConstStructConstantFieldImmediate();
    return res;
}

_ %contractStructConstantViaVar() method_id(103564) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_contractStructConstantViaVar();
    return $MyStruct3$_to_external(res);
}

_ %globalConstStructConstantViaVar() method_id(105147) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_globalConstStructConstantViaVar();
    return $MyStruct3$_to_external(res);
}

_ %contractStructConstantFieldViaVar() method_id(97692) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_contractStructConstantFieldViaVar();
    return res;
}

_ %globalConstStructConstantFieldViaVar() method_id(118768) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_globalConstStructConstantFieldViaVar();
    return res;
}

_ %longStruct15Test() method_id(92569) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longStruct15Test();
    return $LongStruct15$_to_external(res);
}

_ %longStruct16Test() method_id(100171) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longStruct16Test();
    return $LongStruct16$_to_external(res);
}

_ %longStruct32Test() method_id(99597) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longStruct32Test();
    return $LongStruct32$_to_external(res);
}

_ %longNestedStructTest() method_id(101744) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longNestedStructTest();
    return $LongNestedStruct$_to_external(res);
}

_ %longNestedStructWithOptsTest() method_id(103572) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longNestedStructWithOptsTest();
    return $LongNestedStructWithOpts$_to_external(res);
}

_ %longContractTest() method_id(81181) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longContractTest();
    return res;
}

_ %location1() method_id(126791) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_location1();
    return $Location$_to_external(res);
}

_ %location2() method_id(122660) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_location2();
    return $Location$_to_external(res);
}

_ %tripleNestedStructOpt1() method_id(102164) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_tripleNestedStructOpt1();
    return $TripleNestedStructOpt$_to_external(res);
}

_ %tripleNestedStructOpt2() method_id(114551) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_tripleNestedStructOpt2();
    return $TripleNestedStructOpt$_to_external(res);
}

_ %tripleNestedStructOpt3() method_id(110422) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_tripleNestedStructOpt3();
    return $TripleNestedStructOpt$_to_external(res);
}

_ %longAndDeepNestedStruct1() method_id(87259) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longAndDeepNestedStruct1();
    return $LongAndDeepNestedStruct$_to_external(res);
}

_ %longAndDeepNestedStruct2() method_id(91320) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longAndDeepNestedStruct2();
    return $LongAndDeepNestedStruct$_to_external(res);
}

_ %longAndDeepNestedStruct3() method_id(95385) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_longAndDeepNestedStruct3();
    return $LongAndDeepNestedStruct$_to_external(res);
}

_ %intFieldsStruct() method_id(98928) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_intFieldsStruct();
    return $IntFields$_to_external(res);
}

_ %intFieldsFromCell(cell $src) method_id(75138) {
    cell $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_intFieldsFromCell($src);
    return $IntFields$_to_external(res);
}

_ %uintFieldsMessage() method_id(72699) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_uintFieldsMessage();
    return $UintFields$_to_external(res);
}

_ %uintFieldsFromCell(cell $src) method_id(121259) {
    cell $src = $src;
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_uintFieldsFromCell($src);
    return $UintFields$_to_external(res);
}

_ %optionalFields() method_id(79909) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_optionalFields();
    return $OptionalFields$_to_external(res);
}

_ %destructuringTest1() method_id(121307) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest1();
    return res;
}

_ %destructuringTest1Const() method_id(112759) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest1Const();
    return res;
}

_ %destructuringTest2() method_id(125368) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest2();
    return res;
}

_ %destructuringTest2Const() method_id(95895) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest2Const();
    return res;
}

_ %destructuringTest3() method_id(129433) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest3();
    return res;
}

_ %destructuringTest3Const() method_id(78647) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest3Const();
    return res;
}

_ %destructuringTest4() method_id(100734) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest4();
    return res;
}

_ %destructuringTest4Const() method_id(129910) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest4Const();
    return res;
}

_ %destructuringTest5() method_id(104799) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest5();
    return res;
}

_ %destructuringTest5Const() method_id(114390) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest5Const();
    return res;
}

_ %destructuringTest6() method_id(108860) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest6();
    return res;
}

_ %destructuringTest6Const() method_id(94262) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest6Const();
    return res;
}

_ %destructuringTest7() method_id(112925) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest7();
    return $S1$_to_external(res);
}

_ %destructuringTest7Const() method_id(79254) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest7Const();
    return $S1$_to_external(res);
}

_ %destructuringTest8() method_id(84210) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest8();
    return res;
}

_ %destructuringTest8Const() method_id(127125) {
    var self = $StructsTester$_contract_load();
    var res = self~$StructsTester$_fun_destructuringTest8Const();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract StructsTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var (($self's1'a, $self's1'b), ($self's2'a, $self's2'b), ($self't1'a, ($self't1's'a, $self't1's'b)), ($self't2'a, ($self't2's'a, $self't2's'b)), $self'mapWithLongStructs15, $self'mapWithLongStructs16, $self'mapWithLongStructs32, $self'x1, $self'x2, $self'x3, $self'x4, $self'x5, $self'x6, $self'x7, $self'x8, $self'x9, $self'x10, $self'x11, $self'x12, $self'x13, $self'x14, $self'x15, $self'x16, $self'x17, $self'x18, $self'x19, $self'x20) = $StructsTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Foo message
        if (op == 42) {
            var ($msg's) = in_msg~$Foo$_load_without_opcode();
            var ($d'm) = $Dict$_load_not_mut($msg's);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body(false, __tact_context_get_sender(), 10000000, 1, $Dict$_store_cell(($d'm))));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "example" message
    if (text_op == 0x1f7b0f9d70eea815aae5bfc1d317b18ac52b493ab60b9c9d7e5468c36966e5e8) {
        var ($coin'first, $coin'second) = $global_directParse($Builder$_fun_endCell(store_uint($Builder$_fun_storeCoins($global_beginCell(), 42), 35, 31)));
        __tact_debug_str($Int$_fun_toString($coin'first), __gen_slice_string_ba055b1f0dce3ad115720f75e674134a1a770fd87f8e9534e39e4218b1453594(), "File src/test/e2e-emulated/contracts/structs.tact:494:9:");
        __tact_debug_str($Int$_fun_toString($coin'second), __gen_slice_string_282a615b41ee09c9a08e10d831cfec6954a63c2c0940f2f3f6e623ebe215fdcb(), "File src/test/e2e-emulated/contracts/structs.tact:495:9:");
        return ();
    }
    ;; Receive "exampleVarIntegers" message
    if (text_op == 0x0168d90bf4a9dbc0adebc930f68aa2adfde89915cdfa53bd473626c6ed943087) {
        var ($varInts'a, $varInts'b, $varInts'c, $varInts'd) = $global_directParseVarIntegers($Builder$_fun_endCell($Builder$_fun_storeVarUint32($Builder$_fun_storeVarUint16($Builder$_fun_storeVarInt32($Builder$_fun_storeVarInt16($global_beginCell(), 1), 2), 3), 4)));
        __tact_debug_str($Int$_fun_toString($varInts'a), __gen_slice_string_aa7a71b763ba9b8de5dc78f8ed8a533891a60d40ecb1dfae1fbf3edbc74cc239(), "File src/test/e2e-emulated/contracts/structs.tact:507:9:");
        __tact_debug_str($Int$_fun_toString($varInts'b), __gen_slice_string_b16977828386543a462cf0ed82f0665abc245b71c06c38fec46b22d72afddeb7(), "File src/test/e2e-emulated/contracts/structs.tact:508:9:");
        __tact_debug_str($Int$_fun_toString($varInts'c), __gen_slice_string_cc9058504e391ac2d0c815c27fb8e9430b028a483adb843d482505e654a6e742(), "File src/test/e2e-emulated/contracts/structs.tact:509:9:");
        __tact_debug_str($Int$_fun_toString($varInts'd), __gen_slice_string_a568a5e18294874f839864178d42ad265cf908d1bed2c2e0c9bb09fa8ffbb721(), "File src/test/e2e-emulated/contracts/structs.tact:510:9:");
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}