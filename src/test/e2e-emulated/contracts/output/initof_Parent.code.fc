#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; initof_Parent.headers.fc
;;
;; Header files for Parent
;; NOTE: declarations are sorted for optimal order
;;

;; $ChildAddress$_load_without_opcode
(slice, ((slice))) $ChildAddress$_load_without_opcode(slice sc_0) inline;

;; $Parent$_store
builder $Parent$_store(builder build_0, (slice) v) inline;

;; $Parent$_load
(slice, ((slice))) $Parent$_load(slice sc_0) inline;

;; $Child$init$_store
builder $Child$init$_store(builder build_0, (slice) v) inline;

;; $Parent$_contract_init
(slice) $Parent$_contract_init() impure inline;

;; $Parent$_contract_load
(slice) $Parent$_contract_load() impure inline;

;; $Parent$_contract_store
() $Parent$_contract_store((slice) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $Child$_init_child
(cell, cell) $Child$_init_child(slice $owner) inline;

;; $Parent$_fun_testInitOfAddressChild
((slice), slice) $Parent$_fun_testInitOfAddressChild((slice) $self) impure inline_ref;

;; $Parent$_fun_testMyAddressChild
((slice), slice) $Parent$_fun_testMyAddressChild((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice $to, int $value, int $mode, int $bounce, cell $body, cell $code, cell $data) inline;


;; initof_Parent.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

slice $global_myAddress() impure asm """
    MYADDR
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

;; initof_Parent.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice $to, int $value, int $mode, int $bounce, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: ChildAddress
;; Header: 0x421fcf26
;; TLB: child_address#421fcf26 address:address = ChildAddress
;;

(slice, ((slice))) $ChildAddress$_load_without_opcode(slice sc_0) inline {
    var v'address = sc_0~load_msg_addr();
    return (sc_0, (v'address));
}

;;
;; Type: Child
;; TLB: _ owner:address = Child
;;

builder $Child$init$_store(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = build_0.store_slice(v'owner);
    return build_0;
}

cell $Child$_child_get_code() impure asm """
    B{b5ee9c7201010201008e00011aff0020e3036d8013f4bcf2c80b0100f83001d072d721d200d200fa4021103450666f04f86102f862ed44d0d2000194fa40013195fa400101d1e230019130e07021d74920c21f953101d31f309132e2c00001c121b08e31f84270804270f828c8018210421fcf2658cb1f01cf16c9441359c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00e0f2c082} B>boc PUSHREF
""";

(cell, cell) $Child$_init_child(slice $owner) inline {
    ;; Build init code cell

    ;; Contract Code: Child
    cell init_code = $Child$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $Child$init$_store(b, ($owner));
    return (init_code, b.end_cell());
}

;;
;; Type: Parent
;; TLB: _ childMyAddress:address = Parent
;;

builder $Parent$_store(builder build_0, (slice) v) inline {
    var (v'childMyAddress) = v;
    build_0 = build_0.store_slice(v'childMyAddress);
    return build_0;
}

(slice, ((slice))) $Parent$_load(slice sc_0) inline {
    var v'childMyAddress = sc_0~load_msg_addr();
    return (sc_0, (v'childMyAddress));
}

(slice) $Parent$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Parent$_load();
    } else {
        return $Parent$_contract_init();
    }
}

() $Parent$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Parent$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Parent functions
;;

(slice) $Parent$_contract_init() impure inline {
    var (($self'childMyAddress)) = (null());
    $self'childMyAddress = $global_myAddress();
    return ($self'childMyAddress);
}

((slice), slice) $Parent$_fun_testInitOfAddressChild((slice) $self) impure inline_ref {
    var (($self'childMyAddress)) = $self;
    var $fresh$ret_361 = $global_contractAddress($Child$_init_child($global_myAddress()));
    return (($self'childMyAddress), $fresh$ret_361);
}

((slice), slice) $Parent$_fun_testMyAddressChild((slice) $self) impure inline_ref {
    var (($self'childMyAddress)) = $self;
    var $fresh$ret_362 = $self'childMyAddress;
    return (($self'childMyAddress), $fresh$ret_362);
}

;;
;; Get methods of a Contract Parent
;;

_ %testInitOfAddressChild() method_id(79997) {
    var self = $Parent$_contract_load();
    var res = self~$Parent$_fun_testInitOfAddressChild();
    return res;
}

_ %testMyAddressChild() method_id(110049) {
    var self = $Parent$_contract_load();
    var res = self~$Parent$_fun_testMyAddressChild();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract Parent
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'childMyAddress) = $Parent$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive ChildAddress message
    if (op == 1109380902) {
        var ($msg'address) = in_msg~$ChildAddress$_load_without_opcode();
        $self'childMyAddress = $msg'address;
        ;; Persist state
        $Parent$_contract_store(($self'childMyAddress));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        var ($ci'code, $ci'data) = $Child$_init_child($global_myAddress());
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($global_contractAddress(($ci'code, $ci'data)), 0, 66, false, $Builder$_fun_endCell($global_beginCell()), $ci'code, $ci'data));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}