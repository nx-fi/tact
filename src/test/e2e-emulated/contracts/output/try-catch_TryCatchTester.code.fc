#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; try-catch_TryCatchTester.headers.fc
;;
;; Header files for TryCatchTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $TryCatchTester$_store
builder $TryCatchTester$_store(builder build_0, (int) v) inline;

;; $TryCatchTester$_load
(slice, ((int))) $TryCatchTester$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $TryCatchTester$_contract_init
(int) $TryCatchTester$_contract_init() impure inline;

;; $TryCatchTester$_contract_load
(int) $TryCatchTester$_contract_load() impure inline;

;; $TryCatchTester$_contract_store
() $TryCatchTester$_contract_store((int) v) impure inline;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $global_throwWithElseIf
() $global_throwWithElseIf(int $op) impure inline_ref;

;; $TryCatchTester$_fun_getCounter
((int), int) $TryCatchTester$_fun_getCounter((int) $self) impure inline_ref;

;; $TryCatchTester$_fun_testTryCatch1
((int), int) $TryCatchTester$_fun_testTryCatch1((int) $self) impure inline_ref;

;; $TryCatchTester$_fun_testTryCatch2
((int), int) $TryCatchTester$_fun_testTryCatch2((int) $self) impure inline_ref;

;; $TryCatchTester$_fun_testTryCatch3
((int), int) $TryCatchTester$_fun_testTryCatch3((int) $self) impure inline_ref;

;; $TryCatchTester$_fun_testTryCatch4
((int), int) $TryCatchTester$_fun_testTryCatch4((int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $TryCatchTester$_fun_forward
((int), ()) $TryCatchTester$_fun_forward((int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TryCatchTester$_fun_reply
((int), ()) $TryCatchTester$_fun_reply((int) $self, cell $body) impure inline;


;; try-catch_TryCatchTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

() $global_nativeSendMessage(cell $cell, int $mode) impure asm """
    SENDRAWMSG
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

() $global_emit(cell $body) impure inline {
    cell $c = $Builder$_fun_endCell($Builder$_fun_storeRef($body, store_uint($global_beginCell(), 15211807202738752817960438464513, 104)));
    $global_nativeSendMessage($c, 0);
}

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

((int), ()) $TryCatchTester$_fun_forward((int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'counter)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'counter), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'counter), ());
}

((int), ()) $TryCatchTester$_fun_reply((int) $self, cell $body) impure inline {
    var (($self'counter)) = $self;
    ($self'counter)~$TryCatchTester$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return (($self'counter), ());
}

;; try-catch_TryCatchTester.constants.fc
;; Cell 36j5kwTvsWG940ZSaeESbkqjO1xDD9laewzKD9Nbiks=
cell __gen_cell_cell_dfa8f99304efb161bde3465269e1126e4aa33b5c430fd95a7b0cca0fd35b8a4b() asm """
    B{b5ee9c724101010100130000220000000068656c6c6f20776f726c6420317944a026} B>boc PUSHREF
""";

;; Cell CHnPEesEaVgGQ+AzfgdJ/j+Wm3w+gszVu+/Qc9JXv10=
cell __gen_cell_cell_0879cf11eb0469580643e0337e0749fe3f969b7c3e82ccd5bbefd073d257bf5d() asm """
    B{b5ee9c724101010100130000220000000068656c6c6f20776f726c6420328db7f035} B>boc PUSHREF
""";

;; Cell 7GXHR0fbIIlqOdh0sEc91eYeCPyfNRbVbVjq7qUDHqQ=
cell __gen_cell_cell_ec65c74747db20896a39d874b0473dd5e61e08fc9f3516d56d58eaeea5031ea4() asm """
    B{b5ee9c7241010101000f00001a00000000536f6d657468696e6707ec49a0} B>boc PUSHREF
""";

;; try-catch_TryCatchTester.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: TryCatchTester
;; TLB: _ counter:int257 = TryCatchTester
;;

builder $TryCatchTester$_store(builder build_0, (int) v) inline {
    var (v'counter) = v;
    build_0 = build_0.store_int(v'counter, 257);
    return build_0;
}

(slice, ((int))) $TryCatchTester$_load(slice sc_0) inline {
    var v'counter = sc_0~load_int(257);
    return (sc_0, (v'counter));
}

(int) $TryCatchTester$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TryCatchTester$_load();
    } else {
        return $TryCatchTester$_contract_init();
    }
}

() $TryCatchTester$_contract_store((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $TryCatchTester$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract TryCatchTester functions
;;

(int) $TryCatchTester$_contract_init() impure inline {
    var (($self'counter)) = (0);
    return ($self'counter);
}

() $global_throwWithElseIf(int $op) impure inline_ref {
    if (($op == 1)) {
        return ();
    } elseif (($op == 2)) {
        return ();
    } else {
        throw(1042);
    }
}

((int), int) $TryCatchTester$_fun_getCounter((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    var $fresh$ret_2532 = $self'counter;
    return (($self'counter), $fresh$ret_2532);
}

((int), int) $TryCatchTester$_fun_testTryCatch1((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    try {
        throw_unless(101, false);
        var $fresh$ret_2533 = 42;
        return (($self'counter), $fresh$ret_2533);
    } catch (_) { 
    }
    var $fresh$ret_2534 = 7;
    return (($self'counter), $fresh$ret_2534);
}

((int), int) $TryCatchTester$_fun_testTryCatch2((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    try {
        throw_if(101, true);
        var $fresh$ret_2535 = 42;
        return (($self'counter), $fresh$ret_2535);
    } catch (_, $e) {
        var $fresh$ret_2536 = $e;
        return (($self'counter), $fresh$ret_2536);
    }
}

((int), int) $TryCatchTester$_fun_testTryCatch3((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    try {
        slice $xs = $Cell$_fun_beginParse($Builder$_fun_endCell(store_uint($global_beginCell(), 0, 1)));
        int $x = $xs~load_uint(1);
        try {
            throw_unless(101, false);
        } catch (_, $e) {
            var $fresh$ret_2537 = ($e / $x);
            return (($self'counter), $fresh$ret_2537);
        }
        int $e = 123;
        var $fresh$ret_2538 = $e;
        return (($self'counter), $fresh$ret_2538);
    } catch (_, $e) {
        var $fresh$ret_2539 = $e;
        return (($self'counter), $fresh$ret_2539);
    }
}

((int), int) $TryCatchTester$_fun_testTryCatch4((int) $self) impure inline_ref {
    var (($self'counter)) = $self;
    int $x = 10;
    try {
        $x = 20;
        $global_throwWithElseIf(42);
    } catch (_) {
        var $fresh$ret_2540 = true;
        return (($self'counter), $fresh$ret_2540);
    }
    var $fresh$ret_2541 = false;
    return (($self'counter), $fresh$ret_2541);
}

;;
;; Get methods of a Contract TryCatchTester
;;

_ %getCounter() method_id(103307) {
    var self = $TryCatchTester$_contract_load();
    var res = self~$TryCatchTester$_fun_getCounter();
    return res;
}

_ %testTryCatch1() method_id(102848) {
    var self = $TryCatchTester$_contract_load();
    var res = self~$TryCatchTester$_fun_testTryCatch1();
    return res;
}

_ %testTryCatch2() method_id(106915) {
    var self = $TryCatchTester$_contract_load();
    var res = self~$TryCatchTester$_fun_testTryCatch2();
    return res;
}

_ %testTryCatch3() method_id(110978) {
    var self = $TryCatchTester$_contract_load();
    var res = self~$TryCatchTester$_fun_testTryCatch3();
    return res;
}

_ %testTryCatch4() method_id(115045) {
    var self = $TryCatchTester$_contract_load();
    var res = self~$TryCatchTester$_fun_testTryCatch4();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract TryCatchTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'counter) = $TryCatchTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "increment" message
    if (text_op == 0x99785e1361de95773685af32116e211933c29c96d195ce905c056195855e227c) {
        $self'counter = $self'counter + 1;
        ;; Persist state
        $TryCatchTester$_contract_store(($self'counter));
        return ();
    }
    ;; Receive "incrementTryCatch" message
    if (text_op == 0x80b24da2c37e215304ccb200f2c89ca74636bdb8fc5ee4353c2799dfc7302bad) {
        try {
            $self'counter = $self'counter + 1;
            throw(123);
        } catch (_) { 
        }
        ;; Persist state
        $TryCatchTester$_contract_store(($self'counter));
        return ();
    }
    ;; Receive "tryCatchRegisters" message
    if (text_op == 0xf4565adda24f67278a4a941ccde25fb4939f878815a2e96f25486c75976e1d97) {
        $self'counter = $self'counter + 1;
        ($self'counter)~$TryCatchTester$_fun_reply(__gen_cell_cell_dfa8f99304efb161bde3465269e1126e4aa33b5c430fd95a7b0cca0fd35b8a4b());
        try {
            $self'counter = $self'counter + 1;
            ($self'counter)~$TryCatchTester$_fun_reply(__gen_cell_cell_0879cf11eb0469580643e0337e0749fe3f969b7c3e82ccd5bbefd073d257bf5d());
            $global_emit(__gen_cell_cell_ec65c74747db20896a39d874b0473dd5e61e08fc9f3516d56d58eaeea5031ea4());
            throw(123);
        } catch (_) { 
        }
        ;; Persist state
        $TryCatchTester$_contract_store(($self'counter));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}