#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; receiver-precedence_SliceReceiverTester.headers.fc
;;
;; Header files for SliceReceiverTester
;; NOTE: declarations are sorted for optimal order
;;

;; $SliceReceiverTester$_store
builder $SliceReceiverTester$_store(builder build_0, (slice) v) inline;

;; $SliceReceiverTester$_load
(slice, ((slice))) $SliceReceiverTester$_load(slice sc_0) inline;

;; $SliceReceiverTester$_contract_init
(slice) $SliceReceiverTester$_contract_init() impure inline;

;; $SliceReceiverTester$_contract_load
(slice) $SliceReceiverTester$_contract_load() impure inline;

;; $SliceReceiverTester$_contract_store
() $SliceReceiverTester$_contract_store((slice) v) impure inline;

;; $SliceReceiverTester$_fun_receiver
((slice), slice) $SliceReceiverTester$_fun_receiver((slice) $self) impure inline_ref;


;; receiver-precedence_SliceReceiverTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

() $global_acceptMessage() impure asm """
    ACCEPT
""";

;; receiver-precedence_SliceReceiverTester.constants.fc
;; String "unknown"
slice __gen_slice_string_b6f92ccfff6c9fa74f28aae6587957d4014fab2558ee73a78d6f6052f018d262() asm """
    B{b5ee9c7241010101000900000e756e6b6e6f776e86bcd037} B>boc <s PUSHSLICE
""";

;; String "fallback"
slice __gen_slice_string_2778674735d94e060d892b83da483182acf0a1562971af21ca0b0a8d9d251f96() asm """
    B{b5ee9c7241010101000a00001066616c6c6261636bbfcb7b68} B>boc <s PUSHSLICE
""";

;; String "external_fallback"
slice __gen_slice_string_d583583a514361b0712b11fc4b0dc7228d03425e1ddd865afbf5110fafdbbf44() asm """
    B{b5ee9c7241010101001300002265787465726e616c5f66616c6c6261636b100c4b5a} B>boc <s PUSHSLICE
""";

;; receiver-precedence_SliceReceiverTester.storage.fc
;;
;; Type: SliceReceiverTester
;; TLB: _ receiver:^string = SliceReceiverTester
;;

builder $SliceReceiverTester$_store(builder build_0, (slice) v) inline {
    var (v'receiver) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'receiver).end_cell());
    return build_0;
}

(slice, ((slice))) $SliceReceiverTester$_load(slice sc_0) inline {
    var v'receiver = sc_0~load_ref().begin_parse();
    return (sc_0, (v'receiver));
}

(slice) $SliceReceiverTester$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$SliceReceiverTester$_load();
    } else {
        return $SliceReceiverTester$_contract_init();
    }
}

() $SliceReceiverTester$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $SliceReceiverTester$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract SliceReceiverTester functions
;;

(slice) $SliceReceiverTester$_contract_init() impure inline {
    var (($self'receiver)) = (__gen_slice_string_b6f92ccfff6c9fa74f28aae6587957d4014fab2558ee73a78d6f6052f018d262());
    return ($self'receiver);
}

((slice), slice) $SliceReceiverTester$_fun_receiver((slice) $self) impure inline_ref {
    var (($self'receiver)) = $self;
    var $fresh$ret_987 = $self'receiver;
    return (($self'receiver), $fresh$ret_987);
}

;;
;; Get methods of a Contract SliceReceiverTester
;;

_ %receiver() method_id(78947) {
    var self = $SliceReceiverTester$_contract_load();
    var res = self~$SliceReceiverTester$_fun_receiver();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract SliceReceiverTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'receiver) = $SliceReceiverTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    slice $msg = in_msg;
    $self'receiver = __gen_slice_string_2778674735d94e060d892b83da483182acf0a1562971af21ca0b0a8d9d251f96();
    ;; Persist state
    $SliceReceiverTester$_contract_store(($self'receiver));
    return ();
}

() recv_external(slice in_msg) impure {
    ;; Load contract data
    var ($self'receiver) = $SliceReceiverTester$_contract_load();
    
    slice $msg = in_msg;
    $global_acceptMessage();
    $self'receiver = __gen_slice_string_d583583a514361b0712b11fc4b0dc7228d03425e1ddd865afbf5110fafdbbf44();
    ;; Persist state
    $SliceReceiverTester$_contract_store(($self'receiver));
    return ();
}
() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
DUP -1 EQINT IFJMP:<{
                DROP over <s ref@ -1 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}