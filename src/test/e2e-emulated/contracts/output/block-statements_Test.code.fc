#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; block-statements_Test.headers.fc
;;
;; Header files for Test
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Test$_contract_init
tuple $Test$_contract_init() impure inline;

;; $Test$_contract_load
tuple $Test$_contract_load() impure inline_ref;

;; $Test$_contract_store
() $Test$_contract_store(tuple v) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Test$_fun_A
(tuple, int) $Test$_fun_A(tuple $self) impure inline_ref;

;; $Test$_fun_B
(tuple, int) $Test$_fun_B(tuple $self) impure inline_ref;

;; $Test$_fun_C
(tuple, int) $Test$_fun_C(tuple $self) impure inline_ref;

;; $Test$_fun_D
(tuple, int) $Test$_fun_D(tuple $self) impure inline_ref;

;; $Test$_fun_E
(tuple, int) $Test$_fun_E(tuple $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Test$_fun_forward
(tuple, ()) $Test$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Test$_fun_notify
(tuple, ()) $Test$_fun_notify(tuple $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; block-statements_Test.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeBool(int $value, builder $self) impure asm """
    1 STI
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($Builder$_fun_endCell($self));
}

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

(tuple, ()) $Test$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var ($self) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return ($self, ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return ($self, ());
}

(tuple, ()) $Test$_fun_notify(tuple $self, cell $body) impure inline {
    var ($self) = $self;
    $self~$Test$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return ($self, ());
}

;; block-statements_Test.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Test
;;

tuple $Test$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $Test$_contract_init();
    }
}

() $Test$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}

;;
;; Contract Test functions
;;

tuple $Test$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(tuple, int) $Test$_fun_A(tuple $self) impure inline_ref {
    var ($self) = $self;
    int $x1 = 42;
    int $x = 42;
    $x1 = $x1 + $x;
    var $fresh$ret_164 = $x1;
    return ($self, $fresh$ret_164);
}

(tuple, int) $Test$_fun_B(tuple $self) impure inline_ref {
    var ($self) = $self;
    int $b = 100;
    int $a = 456;
    $b = $b + $a;
    int $a = 752;
    $b = $b + $a;
    var $fresh$ret_165 = $b;
    return ($self, $fresh$ret_165);
}

(tuple, int) $Test$_fun_C(tuple $self) impure inline_ref {
    var ($self) = $self;
    int $b = 100;
    int $a = 456;
    $b = $b + $a;
    slice $a = $Builder$_fun_asSlice($Builder$_fun_storeBool(true, $global_beginCell()));
    $b = $b + $Slice$_fun_bits($a);
    var $fresh$ret_166 = $b;
    return ($self, $fresh$ret_166);
}

(tuple, int) $Test$_fun_D(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_167 = 1308;
    return ($self, $fresh$ret_167);
}

(tuple, int) $Test$_fun_E(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_168 = 84;
    return ($self, $fresh$ret_168);
}

;;
;; Get methods of a Contract Test
;;

_ %A() method_id(88293) {
    var self = $Test$_contract_load();
    var res = self~$Test$_fun_A();
    return res;
}

_ %B() method_id(92294) {
    var self = $Test$_contract_load();
    var res = self~$Test$_fun_B();
    return res;
}

_ %C() method_id(96423) {
    var self = $Test$_contract_load();
    var res = self~$Test$_fun_C();
    return res;
}

_ %D() method_id(67648) {
    var self = $Test$_contract_load();
    var res = self~$Test$_fun_D();
    return res;
}

_ %E() method_id(71777) {
    var self = $Test$_contract_load();
    var res = self~$Test$_fun_E();
    return res;
}

;;
;; Routing of a Contract Test
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Test$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Deploy message
        if (op == 2490013878) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            $self~$Test$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            ;; Persist state
            $Test$_contract_store($self);
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "test" message
    if (text_op == 0x0ee1f3c12fb6aba5ba89ea915e166afc17ebaf48473b14450019cce455529207) {
        ;; Persist state
        $Test$_contract_store($self);
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
