#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; dns_DNSTester.headers.fc
;;
;; Header files for DNSTester
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $DNSTester$_store
builder $DNSTester$_store(builder build_0, (cell) v) inline;

;; $DNSTester$_load
(slice, ((cell))) $DNSTester$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $DNSResolveResult$_to_external
(int, cell) $DNSResolveResult$_to_external(((int, cell)) v) inline;

;; $DNSTester$_contract_init
(cell) $DNSTester$_contract_init() impure inline;

;; $DNSTester$_contract_load
(cell) $DNSTester$_contract_load() impure inline;

;; $DNSTester$_contract_store
() $DNSTester$_contract_store((cell) v) impure inline;

;; $global_dnsExtractTopDomainLength
int $global_dnsExtractTopDomainLength(slice $subdomain) impure inline_ref;

;; $global_dnsExtractTopDomain
slice $global_dnsExtractTopDomain(slice $subdomain) impure inline_ref;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Slice$_fun_asCell
cell $Slice$_fun_asCell(slice $self) impure inline;

;; $DNSTester$_fun_stringToInternal
((cell), slice) $DNSTester$_fun_stringToInternal((cell) $self, slice $src) impure inline_ref;

;; $DNSTester$_fun_internalNormalize
((cell), slice) $DNSTester$_fun_internalNormalize((cell) $self, slice $src) impure inline_ref;

;; $DNSTester$_fun_dnsInternalVerify
((cell), int) $DNSTester$_fun_dnsInternalVerify((cell) $self, slice $subdomain) impure inline_ref;

;; $DNSTester$_fun_dnsExtractTopDomainLength
((cell), int) $DNSTester$_fun_dnsExtractTopDomainLength((cell) $self, slice $subdomain) impure inline_ref;

;; $DNSTester$_fun_dnsExtractTopDomain
((cell), slice) $DNSTester$_fun_dnsExtractTopDomain((cell) $self, slice $subdomain) impure inline_ref;

;; $DNSResolveResult$_constructor_prefix_record
((int, cell)) $DNSResolveResult$_constructor_prefix_record(int $prefix, cell $record) inline;

;; $DNSTester$_fun_doResolveDNS
((cell), (int, cell)) $DNSTester$_fun_doResolveDNS((cell) $self, slice $subdomain, int $category) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $DNSTester$_fun_forward
((cell), ()) $DNSTester$_fun_forward((cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $DNSTester$_fun_notify
((cell), ()) $DNSTester$_fun_notify((cell) $self, cell $body) impure inline;

;; $DNSTester$_fun_dnsresolve
((cell), (int, cell)) $DNSTester$_fun_dnsresolve((cell) $self, slice $subdomain, int $category) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; dns_DNSTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

cell $global_emptyCell() impure asm """
    <b b> PUSHREF // Pure Fift: "<b" creates a builder, "b>" turns it into a cell at compile time
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $global_dnsExtractTopDomainLength(slice $subdomain) impure inline_ref {
    int $i = 0;
    int $needBreak = false;
    do {
        int $char = $subdomain~load_uint(8);
        $needBreak = ($char == 0);
        if ((~ $needBreak)) {
            $i = ($i + 8);
        }
    } until ($needBreak);
    throw_unless(24161, ($i != 0));
    return $i;
}

slice $global_dnsExtractTopDomain(slice $subdomain) impure inline_ref {
    int $len = $global_dnsExtractTopDomainLength($subdomain);
    return $subdomain~load_bits($len);
}

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

builder $Builder$_fun_storeSlice(builder $self, slice $cell) impure asm """
    STSLICER
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($Builder$_fun_endCell($self));
}

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

cell $Slice$_fun_asCell(slice $self) impure inline {
    var ($self) = $self;
    return $Builder$_fun_endCell($Builder$_fun_storeSlice($global_beginCell(), $self));
}

((cell), ()) $DNSTester$_fun_forward((cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'tmpC)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'tmpC), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'tmpC), ());
}

((cell), ()) $DNSTester$_fun_notify((cell) $self, cell $body) impure inline {
    var (($self'tmpC)) = $self;
    ($self'tmpC)~$DNSTester$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'tmpC), ());
}

((cell), (int, cell)) $DNSTester$_fun_dnsresolve((cell) $self, slice $subdomain, int $category) impure inline_ref {
    var (($self'tmpC)) = $self;
    int $delta = 0;
    if ((preload_uint($subdomain, 8) == 0)) {
        $subdomain~load_uint(8);
        $delta = ($delta + 8);
    }
    throw_unless(24161, dns_internal_verify($subdomain));
    var ($res'prefix, $res'record) = ($self'tmpC)~$DNSTester$_fun_doResolveDNS($subdomain, $category);
    var $fresh$ret_321 = $DNSResolveResult$_constructor_prefix_record(($res'prefix + $delta), $res'record);
    return (($self'tmpC), $fresh$ret_321);
}

;; dns_DNSTester.native.fc
slice dns_string_to_internal(slice domain) inline_ref {

    ;; Special case for root domain
    if ((domain.slice_bits() == 8) & (domain.slice_refs() == 0)) {
        if (domain.preload_uint(8) == 46) {
            return begin_cell().store_uint(0, 8).end_cell().begin_parse();
        }
    }

    ;; Split domain into segments
    tuple segments = null();
    builder current = begin_cell();
    int isCurrentEmpty = true;
    int isFirst = true;
    int isHyphen = false;
    slice cs = domain;
    int continue = true;
    do {

        ;; Prepare for loading next character
        if (cs.slice_bits() == 0) {
            int refs = cs.slice_refs();
            if (refs == 1) {
                cs = cs~load_ref().begin_parse();
            } elseif (refs > 1) {
                return null();
            } else {
                continue = false;
            }
            continue = false;
        }

        ;; Continue loading next character
        if (continue) {
            int char = cs~load_uint(8);
            ;; we can do it because additional UTF-8 character's octets >= 128 -- https://www.ietf.org/rfc/rfc3629.txt
            int is_hyphen = (char == 45);
            int is_dot  = (char == 46);
            int valid_char = is_hyphen | is_dot | ((char >= 48) & (char <= 57)) | ((char >= 97) & (char <= 122)); ;; '-' or 0-9 or a-z
            if (~ valid_char | (isFirst & is_hyphen)) {
                return null();
            }
            isHyphen = is_hyphen;
            if (is_dot) {
                if (isFirst | isHyphen) { ;; Empty or ends with hyphen
                    return null();
                }
                segments = cons(current, segments);
                current = begin_cell();
                isHyphen = false;
                isFirst = true;
                isCurrentEmpty = true;
            } else {
                isFirst = false;
                isCurrentEmpty = false;
                current~store_uint(char, 8);
            }
        }

    } until (~ continue);
    if (isHyphen) { ;; ends with hyphen
        return null();
    }
    if (~ isCurrentEmpty) {
        segments = cons(current, segments);
    }

    ;; Concatenate segments
    builder res = begin_cell();
    (builder b, tuple tail) = uncons(segments);
    res = res.store_builder(b);
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        res = res.store_uint(0, 8); ;; Add \0 separator
        res = res.store_builder(b);
    }
    res = res.store_uint(0, 8); ;; Add \0 separator
    return res.end_cell().begin_parse();
}

int dns_internal_verify(slice sc) inline_ref {
    if (sc.slice_refs() != 0) {
        return false;
    }
    int bits = sc.slice_bits();
    if (bits % 8 != 0) {
        return false;
    }
    if (bits == 0) { ;; Case for root domain
        return true;
    }
    int len = bits / 8;
    int counter = 0;
    int isFirst = true;
    int isHyphen = false;
    repeat(len) {
        int char = sc~load_uint(8);
        if (char == 0) {
            if (counter == 0) {
                return false;
            }
            if (isHyphen) {
                return false;
            }
            counter = 0;
            isHyphen = false;
            isFirst = true;
        } else {
            int charIsHyphen = (char == 45);
            int isValid = charIsHyphen | ((char >= 48) & (char <= 57)) | ((char >= 97) & (char <= 122));
            if (~ isValid) {
                return false;
            }
            if (charIsHyphen & isFirst)  {
                return false;
            }
            isHyphen = charIsHyphen;
            isFirst = false;
            counter = counter + 1;
        }
    }
    return counter == 0 & ~ isHyphen;
}

slice dns_internal_normalize(slice src) impure inline_ref {
    throw_unless(134, src.slice_refs() == 0); ;; Invalid argument error
    builder target = begin_cell();
    repeat(src.slice_bits() / 8) {
        int char = src~load_uint(8);

        ;; b => 6
        if (char == 98) {
            char = 54;
        }

        ;; g, q => 9
        if ((char == 103) | (char == 113)) {
            char = 57;    
        }

        ;; l => 1
        if (char == 108) {
            char = 49;
        }

        ;; o => 0
        if (char == 111) {
            char = 48;
        }

        ;; s => 5
        if (char == 115) {
            char = 53;
        }

        ;; u => v
        if (char == 117) {
            char = 118;
        }

        ;; z => 2
        if (char == 122) {
            char = 50;
        }

        target = target.store_uint(char, 8);
    }
    return target.end_cell().begin_parse();
}

;; dns_DNSTester.constants.fc
;; Cell lqKW0iTyhcZ77pPDD4owkVfw2qNdxbh+QQt4YwoJz8c=
cell __gen_cell_cell_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7() asm """
    B{b5ee9c724101010100020000004cacb9cd} B>boc PUSHREF
""";

;; dns_DNSTester.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: DNSResolveResult
;; TLB: _ prefix:int257 record:Maybe ^cell = DNSResolveResult
;;

(int, cell) $DNSResolveResult$_to_external(((int, cell)) v) inline {
    var (v'prefix, v'record) = v; 
    return (v'prefix, v'record);
}

((int, cell)) $DNSResolveResult$_constructor_prefix_record(int $prefix, cell $record) inline {
    return ($prefix, $record);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: DNSTester
;; TLB: _ tmpC:^cell = DNSTester
;;

builder $DNSTester$_store(builder build_0, (cell) v) inline {
    var (v'tmpC) = v;
    build_0 = build_0.store_ref(v'tmpC);
    return build_0;
}

(slice, ((cell))) $DNSTester$_load(slice sc_0) inline {
    var v'tmpC = sc_0~load_ref();
    return (sc_0, (v'tmpC));
}

(cell) $DNSTester$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$DNSTester$_load();
    } else {
        return $DNSTester$_contract_init();
    }
}

() $DNSTester$_contract_store((cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $DNSTester$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract DNSTester functions
;;

(cell) $DNSTester$_contract_init() impure inline {
    var (($self'tmpC)) = (__gen_cell_cell_96a296d224f285c67bee93c30f8a309157f0daa35dc5b87e410b78630a09cfc7());
    return ($self'tmpC);
}

((cell), slice) $DNSTester$_fun_stringToInternal((cell) $self, slice $src) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_315 = dns_string_to_internal($src);
    return (($self'tmpC), $fresh$ret_315);
}

((cell), slice) $DNSTester$_fun_internalNormalize((cell) $self, slice $src) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_316 = dns_internal_normalize($src);
    return (($self'tmpC), $fresh$ret_316);
}

((cell), int) $DNSTester$_fun_dnsInternalVerify((cell) $self, slice $subdomain) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_317 = dns_internal_verify($subdomain);
    return (($self'tmpC), $fresh$ret_317);
}

((cell), int) $DNSTester$_fun_dnsExtractTopDomainLength((cell) $self, slice $subdomain) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_318 = $global_dnsExtractTopDomainLength($subdomain);
    return (($self'tmpC), $fresh$ret_318);
}

((cell), slice) $DNSTester$_fun_dnsExtractTopDomain((cell) $self, slice $subdomain) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_319 = $global_dnsExtractTopDomain($subdomain);
    return (($self'tmpC), $fresh$ret_319);
}

((cell), (int, cell)) $DNSTester$_fun_doResolveDNS((cell) $self, slice $subdomain, int $category) impure inline_ref {
    var (($self'tmpC)) = $self;
    var $fresh$ret_320 = $DNSResolveResult$_constructor_prefix_record($Slice$_fun_bits($subdomain), $Builder$_fun_endCell($Builder$_fun_storeSlice($global_beginCell(), $subdomain)));
    return (($self'tmpC), $fresh$ret_320);
}

;;
;; Get methods of a Contract DNSTester
;;

_ %stringToInternal(slice $src) method_id(97933) {
    slice $src = $src;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_stringToInternal($src);
    return res;
}

_ %internalNormalize(slice $src) method_id(114271) {
    slice $src = $src;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_internalNormalize($src);
    return res;
}

_ %dnsInternalVerify(slice $subdomain) method_id(74415) {
    slice $subdomain = $subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsInternalVerify($subdomain);
    return res;
}

_ %dnsExtractTopDomainLength(slice $subdomain) method_id(114191) {
    slice $subdomain = $subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsExtractTopDomainLength($subdomain);
    return res;
}

_ %dnsExtractTopDomain(slice $subdomain) method_id(103737) {
    slice $subdomain = $subdomain;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsExtractTopDomain($subdomain);
    return res;
}

_ %dnsresolve(slice $subdomain, int $category) method_id(123660) {
    slice $subdomain = $subdomain;
    int $category = $category;
    var self = $DNSTester$_contract_load();
    var res = self~$DNSTester$_fun_dnsresolve($subdomain, $category);
    return $DNSResolveResult$_to_external(res);
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract DNSTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'tmpC) = $DNSTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive Deploy message
        if (op == 2490013878) {
            var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
            ($self'tmpC)~$DNSTester$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "test dnsInternalNormalize throws" message
    if (text_op == 0xd83ea882b823bd4ba2ded1145aa68c5a505017043eb0743477766586d29aa4e1) {
        slice $sliceWithRef = $Builder$_fun_asSlice($Builder$_fun_storeRef($global_emptyCell(), $global_beginCell()));
        $self'tmpC = $Slice$_fun_asCell(dns_internal_normalize($sliceWithRef));
        ;; Persist state
        $DNSTester$_contract_store(($self'tmpC));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}