#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; traits_LaikaContract.headers.fc
;;
;; Header files for LaikaContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_string_builder_start
tuple __tact_string_builder_start(builder b) inline;

;; __tact_string_builder_start_comment
tuple __tact_string_builder_start_comment() inline;

;; __tact_string_builder_start_string
tuple __tact_string_builder_start_string() inline;

;; __tact_string_builder_end
cell __tact_string_builder_end(tuple builders) inline;

;; __tact_string_builder_end_slice
slice __tact_string_builder_end_slice(tuple builders) inline;

;; __tact_string_builder_append
((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref;

;; __tact_string_builder_append_not_mut
(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc) inline_ref;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $LaikaContract$_contract_init
tuple $LaikaContract$_contract_init() impure inline;

;; $LaikaContract$_contract_load
tuple $LaikaContract$_contract_load() impure inline;

;; $String$_fun_asComment
cell $String$_fun_asComment(slice $self) impure inline_ref;

;; $LaikaContract$_fun_fooConstant
(tuple, int) $LaikaContract$_fun_fooConstant(tuple $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $LaikaContract$_fun_forward
(tuple, ()) $LaikaContract$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $LaikaContract$_fun_reply
(tuple, ()) $LaikaContract$_fun_reply(tuple $self, cell $body) impure inline;

;; $LaikaContract$_fun_getType
(tuple, slice) $LaikaContract$_fun_getType(tuple $self) impure inline_ref;

;; $LaikaContract$_fun_getSound
(tuple, slice) $LaikaContract$_fun_getSound(tuple $self) impure inline_ref;

;; $LaikaContract$_fun_say
(tuple, slice) $LaikaContract$_fun_say(tuple $self) impure inline_ref;


;; traits_LaikaContract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

tuple __tact_string_builder_start_string() inline {
    return __tact_string_builder_start(begin_cell());
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

slice __tact_string_builder_end_slice(tuple builders) inline {
    return __tact_string_builder_end(builders).begin_parse();
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

(tuple) __tact_string_builder_append_not_mut(tuple builders, slice sc) inline_ref {
    builders~__tact_string_builder_append(sc);
    return builders;
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

cell $String$_fun_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

(tuple, ()) $LaikaContract$_fun_forward(tuple $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var ($self) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return ($self, ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return ($self, ());
}

(tuple, ()) $LaikaContract$_fun_reply(tuple $self, cell $body) impure inline {
    var ($self) = $self;
    $self~$LaikaContract$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return ($self, ());
}

;; traits_LaikaContract.constants.fc
;; String "Laika"
slice __gen_slice_string_cee207b5a6d4fd8a9bb7becaad1ac3fdc65b066860b929e9d396acacd9e9840d() asm """
    B{b5ee9c7241010101000700000a4c61696b615f66e63f} B>boc <s PUSHSLICE
""";

;; String "Woof"
slice __gen_slice_string_1f94e0623a7290e444fa20c70b91722f23d5b62efdb07c25668252cfe6116c0e() asm """
    B{b5ee9c72410101010006000008576f6f66e32c6f1e} B>boc <s PUSHSLICE
""";

;; String " and I say "
slice __gen_slice_string_1462a7a172743d939a1538cd6613bd656a146080a38e199f1c3ba5eff2aaa0ca() asm """
    B{b5ee9c7241010101000d00001620616e6420492073617920789b75fb} B>boc <s PUSHSLICE
""";

;; String "I am a "
slice __gen_slice_string_d635dfa0ecaea4d6025f86de81ede4554d41f970a50eae46b7256ca4c73e6da0() asm """
    B{b5ee9c7241010101000900000e4920616d206120f2accc9d} B>boc <s PUSHSLICE
""";

;; traits_LaikaContract.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: LaikaContract
;; TLB: _  = LaikaContract
;;

tuple $LaikaContract$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $LaikaContract$_contract_init();
    }
}

;;
;; Contract LaikaContract functions
;;

tuple $LaikaContract$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(tuple, int) $LaikaContract$_fun_fooConstant(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_2528 = 100;
    return ($self, $fresh$ret_2528);
}

(tuple, slice) $LaikaContract$_fun_getType(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_2529 = __gen_slice_string_cee207b5a6d4fd8a9bb7becaad1ac3fdc65b066860b929e9d396acacd9e9840d();
    return ($self, $fresh$ret_2529);
}

(tuple, slice) $LaikaContract$_fun_getSound(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_2530 = __gen_slice_string_1f94e0623a7290e444fa20c70b91722f23d5b62efdb07c25668252cfe6116c0e();
    return ($self, $fresh$ret_2530);
}

(tuple, slice) $LaikaContract$_fun_say(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_2531 = __tact_string_builder_end_slice(__tact_string_builder_append_not_mut(__tact_string_builder_append_not_mut(__tact_string_builder_append_not_mut(__tact_string_builder_append_not_mut(__tact_string_builder_start_string(), __gen_slice_string_d635dfa0ecaea4d6025f86de81ede4554d41f970a50eae46b7256ca4c73e6da0()), $self~$LaikaContract$_fun_getType()), __gen_slice_string_1462a7a172743d939a1538cd6613bd656a146080a38e199f1c3ba5eff2aaa0ca()), $self~$LaikaContract$_fun_getSound()));
    return ($self, $fresh$ret_2531);
}

;;
;; Get methods of a Contract LaikaContract
;;

_ %fooConstant() method_id(97244) {
    var self = $LaikaContract$_contract_load();
    var res = self~$LaikaContract$_fun_fooConstant();
    return res;
}

_ %say() method_id(87805) {
    var self = $LaikaContract$_contract_load();
    var res = self~$LaikaContract$_fun_say();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract LaikaContract
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $LaikaContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        return ();
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "make sound" message
    if (text_op == 0xa11cee0879ec25e1b8d53f3b0941a44d36a8b0714bea23031b17d105d0f88cf0) {
        $self~$LaikaContract$_fun_reply($String$_fun_asComment($self~$LaikaContract$_fun_say()));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}