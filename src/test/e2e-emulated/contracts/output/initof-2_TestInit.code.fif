// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/e2e-emulated/contracts/output/initof-2_TestInit.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $Deploy$_store
  DECLPROC $Deploy$_store_cell
  DECLPROC $Deploy$_load_without_opcode
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $Foo$_load_without_opcode
  DECLPROC $StateInit$_not_null
  DECLPROC $TestNested$init$_store
  DECLPROC $TestNested$_init_child
  DECLPROC $SendParameters$_constructor_to_value_mode_code_data_body
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $Deploy$_constructor_queryId
  DECLPROC $TestInit$_contract_init
  DECLPROC $TestInit$_contract_load
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $TestInit$_fun_forward
  DECLPROC $TestInit$_fun_notify
  DECLPROC $DeployOk$_constructor_queryId
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $Deploy$_store PROCINLINE:<{
    2490013878 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $Deploy$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $Deploy$_store INLINECALLDICT
    ENDC
  }>
  $Deploy$_load_without_opcode PROCINLINE:<{
    64 LDU
    SWAP
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $Foo$_load_without_opcode PROCINLINE:<{
    PUSHNULL
  }>
  $StateInit$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        2 UNTUPLE
  }>
  $TestNested$init$_store PROCINLINE:<{
    DROP
  }>
  $TestNested$_init_child PROCINLINE:<{
        B{b5ee9c72010204010001400002ccff00208f583001d072d721d200d200fa4021103450666f04f86102f862ed44d0d20030916d8e82db3ce202915be0d70d1ff2e082018210946a98b6ba8e9ad33f0131c8018210aff90f5758cb1fcb3fc9f84201706ddb3c30e05bf2c082e16d8013f4bcf2c80b010201f66d8d0593995cdd19590b4b4b4b5a5b9a5d1014d550d0d154d4e08d07991d5b5c0a0893995cdd19590b4b4b4b5a5b9a5d1014d550d0d154d4c88a608d0e119a5b19481cdc98cbdd195cdd0bd94c994b595b5d5b185d19590bd8dbdb9d1c9858dd1ccbda5b9a5d1bd98b4c8b9d1858dd0e8d8e8c4d0ea0fe1430fe140300a06d6d226eb3995b206ef2d0806f22019132e21024700304804250231036552212c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00000830fe1430} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    PUSHNULL
    $TestNested$init$_store INLINECALLDICT
    ENDC
  }>
  $SendParameters$_constructor_to_value_mode_code_data_body PROCINLINE:<{
    s3 s5 XCHG
    s1 s4 s4 XCHG3
    s0 s3 XCHG
    TRUE
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $Deploy$_constructor_queryId PROCINLINE:<{
  }>
  $TestInit$_contract_init PROCINLINE:<{
    CONT:<{
      PUSHNULL
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        NIP
            B{b5ee9c7241010101001000001c4552524f524054657374496e6974ef74461e} B>boc <s PUSHSLICE
            B{b5ee9c7241010101001800002c64756d7028224552524f524054657374496e69742229ba0e42f9} B>boc <s PUSHSLICE
        x{46696c65207372632f746573742f6532652d656d756c617465642f636f6e7472616374732f696e69746f662d322e746163743a32343a31333a} PUSHSLICE
            STRDUMP DROP STRDUMP DROP STRDUMP DROP
            <{
                // x
                NEWC // x b
                OVER // x b x
                0 LESSINT // x b <0?
                <{
                    // x b
                    45 PUSHINT // x b 45
                    SWAP // x 45 b
                    8 STU // x b
                    SWAP // b x
                    NEGATE // b -x
                    SWAP // -x b
                }>CONT IF
                // x b
                SWAP // b x
                <{
                    // b x
                    10 PUSHINT DIVMOD // b x/10 x%10 
                    48 ADDCONST // b x/10 (x%10+48)
                    s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
                }>CONT UNTIL
                // ... b x
                DROP // ... b
                DEPTH DEC // ... b n
                <{ 8 STU }>CONT REPEAT // b
            }>CONT 1 1 CALLXARGS
            // b
            ENDC CTOS // s
            B{b5ee9c7241010101000900000e64756d70286529da749822} B>boc <s PUSHSLICE
        x{46696c65207372632f746573742f6532652d656d756c617465642f636f6e7472616374732f696e69746f662d322e746163743a32353a31333a} PUSHSLICE
            STRDUMP DROP STRDUMP DROP STRDUMP DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        $TestNested$_init_child INLINECALLDICT
            B{b5ee9c7241010101001100001e696e69744054657374496e69742d316e7d324a} B>boc <s PUSHSLICE
            B{b5ee9c7241010101001900002e64756d702822696e69744054657374496e69742d31222989ec6db4} B>boc <s PUSHSLICE
        x{46696c65207372632f746573742f6532652d656d756c617465642f636f6e7472616374732f696e69746f662d322e746163743a31333a31333a} PUSHSLICE
            STRDUMP DROP STRDUMP DROP STRDUMP DROP
        2DUP
        $global_contractAddress INLINECALLDICT
        0 PUSHINT
        66 PUSHINT
        OVER
        $Deploy$_constructor_queryId INLINECALLDICT
        $Deploy$_store_cell INLINECALLDICT
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s1 s2 XCHG
        $SendParameters$_constructor_to_value_mode_code_data_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            MUL // note that -1 * -1 wraps back to -1
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
            B{b5ee9c7241010101001700002a696e69744054657374496e69742d53554343455353299fa343} B>boc <s PUSHSLICE
            B{b5ee9c7241010101001f00003a64756d702822696e69744054657374496e69742d5355434345535322297dbec414} B>boc <s PUSHSLICE
        x{46696c65207372632f746573742f6532652d656d756c617465642f636f6e7472616374732f696e69746f662d322e746163743a32323a31333a} PUSHSLICE
            STRDUMP DROP STRDUMP DROP STRDUMP DROP
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
    }>
    0 -1 CALLXARGS
  }>
  $TestInit$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    DROP
    IF:<{
      PUSHNULL
    }>ELSE<{
      $TestInit$_contract_init INLINECALLDICT
    }>
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $TestInit$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        MUL // note that -1 * -1 wraps back to -1
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TestInit$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    FALSE
    PUSHNULL
    $TestInit$_fun_forward INLINECALLDICT
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $TestInit$_contract_load INLINECALLDICT
    s0 s2 XCHG
    IFJMP:<{
      2DROP
    }>
    32 LDUQ 130 THROWIFNOT
    OVER
    42 EQINT
    IFJMP:<{
      3 BLKDROP
    }>
    SWAP
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      $Deploy$_load_without_opcode INLINECALLDICT
      NIP
      $DeployOk$_constructor_queryId INLINECALLDICT
      $DeployOk$_store_cell INLINECALLDICT
      $TestInit$_fun_notify INLINECALLDICT
      DROP
    }>
    2DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
        execute current@ context@ current!
        {
            }END> b>
            
            <{
                SETCP0 DUP
                IFNOTJMP:<{
                    DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
                }>
    swap <s ref@
                0 swap @procdictkeylen idict- drop
                -1 swap @procdictkeylen idict- drop
                65535 swap @procdictkeylen idict- drop
                @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
  }>
}END>c
