#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; initof-3_A.headers.fc
;;
;; Header files for A
;; NOTE: declarations are sorted for optimal order
;;

;; $B$init$_store
builder $B$init$_store(builder build_0, (slice) v) inline;

;; $A$_contract_init
tuple $A$_contract_init() impure inline;

;; $A$_contract_load
tuple $A$_contract_load() impure inline;

;; $B$_init_child
(cell, cell) $B$_init_child(slice $addr) inline;

;; $global_get_init
(cell, cell) $global_get_init(slice $addr) impure inline_ref;


;; initof-3_A.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> () __tact_debug(X value, slice debug_print_1, slice debug_print_2) impure asm """
    STRDUMP DROP STRDUMP DROP s0 DUMP DROP
""";

slice $global_myAddress() impure asm """
    MYADDR
""";

;; initof-3_A.constants.fc
;; String "dump(c1.data)"
slice __gen_slice_string_a9f3ca36d2b3616479b74ecf3f5be7375192b8f7ecdc7c399dad729532f2eda0() asm """
    B{b5ee9c7241010101000f00001a64756d702863312e6461746129eee374df} B>boc <s PUSHSLICE
""";

;; String "dump(c2.data)"
slice __gen_slice_string_c761948419f5c7f5e251817d34cc14b75c20fa646a99e457a7d3830d74776cb2() asm """
    B{b5ee9c7241010101000f00001a64756d702863322e6461746129b6967167} B>boc <s PUSHSLICE
""";

;; initof-3_A.storage.fc
;;
;; Type: B
;; TLB: _ owner:address = B
;;

builder $B$init$_store(builder build_0, (slice) v) inline {
    var (v'addr) = v;
    build_0 = build_0.store_slice(v'addr);
    return build_0;
}

cell $B$_child_get_code() impure asm """
    B{b5ee9c7201010101003f00007aff00208e2f3030d072d721d200d200fa4021103450556f04f86101f862ed44d0d2000194fa40013195fa400101d1e230dcf2c082e16d8013f4bcf2c80b} B>boc PUSHREF
""";

(cell, cell) $B$_init_child(slice $addr) inline {
    ;; Build init code cell

    ;; Contract Code: B
    cell init_code = $B$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $B$init$_store(b, ($addr));
    return (init_code, b.end_cell());
}

;;
;; Type: A
;; TLB: _  = A
;;

tuple $A$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $A$_contract_init();
    }
}

;;
;; Contract A functions
;;

tuple $A$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(cell, cell) $global_get_init(slice $addr) impure inline_ref {
    return $B$_init_child($addr);
}

;;
;; Get methods of a Contract A
;;

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract A
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $A$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "aa" message
    if (text_op == 0xaf609d2b6432859cba15814289b16186e0da37063603629c8992e0c0632560f9) {
        var ($c1'code, $c1'data) = $global_get_init($global_myAddress());
        __tact_debug($c1'data, __gen_slice_string_a9f3ca36d2b3616479b74ecf3f5be7375192b8f7ecdc7c399dad729532f2eda0(), "File src/test/e2e-emulated/contracts/initof-3.tact:15:9:");
        var ($c2'code, $c2'data) = $B$_init_child($global_myAddress());
        __tact_debug($c2'data, __gen_slice_string_c761948419f5c7f5e251817d34cc14b75c20fa646a99e457a7d3830d74776cb2(), "File src/test/e2e-emulated/contracts/initof-3.tact:17:9:");
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}