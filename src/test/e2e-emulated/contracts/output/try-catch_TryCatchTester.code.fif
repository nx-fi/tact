// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/e2e-emulated/contracts/output/try-catch_TryCatchTester.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $TryCatchTester$_store
  DECLPROC $TryCatchTester$_load
  DECLPROC $StateInit$_not_null
  DECLPROC $TryCatchTester$_contract_init
  DECLPROC $TryCatchTester$_contract_load
  DECLPROC $TryCatchTester$_contract_store
  DECLPROC $global_emit
  DECLPROC $global_throwWithElseIf
  DECLPROC $TryCatchTester$_fun_getCounter
  DECLPROC $TryCatchTester$_fun_testTryCatch1
  DECLPROC $TryCatchTester$_fun_testTryCatch2
  DECLPROC $TryCatchTester$_fun_testTryCatch3
  DECLPROC $TryCatchTester$_fun_testTryCatch4
  DECLPROC $SendParameters$_constructor_bounce_to_value_mode_body_code_data
  DECLPROC $TryCatchTester$_fun_forward
  DECLPROC $TryCatchTester$_fun_reply
  103307 DECLMETHOD %getCounter
  102848 DECLMETHOD %testTryCatch1
  106915 DECLMETHOD %testTryCatch2
  110978 DECLMETHOD %testTryCatch3
  115045 DECLMETHOD %testTryCatch4
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $TryCatchTester$_store PROCINLINE:<{
    SWAP
    257 PUSHINT
    STIX
  }>
  $TryCatchTester$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    SWAP
  }>
  $StateInit$_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
        2 UNTUPLE
  }>
  $TryCatchTester$_contract_init PROCINLINE:<{
    0 PUSHINT
  }>
  $TryCatchTester$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $TryCatchTester$_load INLINECALLDICT
      NIP
    }>ELSE<{
      DROP
      $TryCatchTester$_contract_init INLINECALLDICT
    }>
  }>
  $TryCatchTester$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    SWAP
    $TryCatchTester$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $global_emit PROCINLINE:<{
        NEWC
    15211807202738752817960438464513 PUSHINT
    SWAP
    104 STU
        STREF
        ENDC
    0 PUSHINT
        SENDRAWMSG
  }>
  $global_throwWithElseIf PROCREF:<{
    c2 SAVE
    SAMEALTSAVE
    DUP
    1 EQINT
    IFJMP:<{
      DROP
    }>
    2 EQINT
    IFJMP:<{
      RETALT
    }>
    1042 THROW
  }>
  $TryCatchTester$_fun_getCounter PROCREF:<{
    DUP
  }>
  $TryCatchTester$_fun_testTryCatch1 PROCREF:<{
    CONT:<{
      c2 SAVE
      SAMEALTSAVE
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        2DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        101 THROW
        42 PUSHINT
        RETALT
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
      7 PUSHINT
    }>
    1 -1 CALLXARGS
  }>
  $TryCatchTester$_fun_testTryCatch2 PROCREF:<{
    CONT:<{
      c2 SAVE
      SAMEALTSAVE
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        NIP
        RETALT
        2DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        101 THROW
        42 PUSHINT
        RETALT
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
    }>
    1 -1 CALLXARGS
  }>
  $TryCatchTester$_fun_testTryCatch3 PROCREF:<{
    CONT:<{
      c2 SAVE
      SAMEALTSAVE
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        NIP
        RETALT
        2DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
            NEWC
        0 PUSHINT
        SWAP
        1 STU
            ENDC
            CTOS
        1 LDU
        DROP
        s1 s(-1) PUXC
        c1 PUSH
        c3 PUSH
        c4 PUSH
        c5 PUSH
        c7 PUSH
        <{
          NIP
          SWAP
          DIV
          RETALT
          DROP
        }>CONT
        c7 SETCONT
        c5 SETCONT
        c4 SETCONT
        c3 SETCONT
        c1 SETCONT
        2 PUSHINT
        -1 PUSHINT
        SETCONTVARARGS
        <{
          101 THROW
        }>CONT
        c1 PUSH
        COMPOSALT
        SWAP
        TRY
        123 PUSHINT
        RETALT
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
    }>
    1 -1 CALLXARGS
  }>
  $TryCatchTester$_fun_testTryCatch4 PROCREF:<{
    CONT:<{
      c2 SAVE
      SAMEALTSAVE
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        2DROP
        TRUE
        RETALT
        DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        42 PUSHINT
        $global_throwWithElseIf INLINECALLDICT
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
      FALSE
    }>
    1 -1 CALLXARGS
  }>
  $SendParameters$_constructor_bounce_to_value_mode_body_code_data PROCINLINE:<{
    s3 s6 XCHG
    3 3 BLKSWAP
    s1 s2 XCHG
  }>
  $TryCatchTester$_fun_forward PROCREF:<{
    PUSHNULL
    PUSHNULL
    s2 PUSH
    ISNULL
    NOT
    IF:<{
      2DROP
      $StateInit$_not_null INLINECALLDICT
      SWAP
    }>ELSE<{
      s2 POP
    }>
    s2 s4 XCHG
    0 PUSHINT
    s0 s3 XCHG
    s0 s4 XCHG
    66 PUSHINT
    s2 s3 XCHG2
    $SendParameters$_constructor_bounce_to_value_mode_body_code_data INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        105 PUSHINT         // 1 + 4 + 4 + 64 + 32
        STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
        // → Stack state
        // s0: Builder
        // s1: `data`
        // s2: `code`
        // s3: `body`
        // s4: `mode`
        // Group 2: Placing the Builder after code and data, then checking those for nullability
        s2 XCHG0
        DUP2
        ISNULL
        SWAP
        ISNULL
        MUL // note that -1 * -1 wraps back to -1
        // → Stack state
        // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
        // s1: `code`
        // s2: `data`
        // s3: Builder
        // s4: `body`
        // s5: `mode`
        // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
        <{
            DROP2 // drop `data` and `code`, since either of those is null
            b{0} STSLICECONST
        }> PUSHCONT
        // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
        <{
            // _ split_depth:(Maybe (## 5))
            //   special:(Maybe TickTock)
            //   code:(Maybe ^Cell)
            //   data:(Maybe ^Cell)
            //   library:(Maybe ^Cell)
            // = StateInit;
            ROT                // place message Builder on top
            b{10} STSLICECONST // store Maybe = true, Either = false
            // Start composing inlined StateInit
            b{00} STSLICECONST // store split_depth and special first
            STDICT             // store code
            STDICT             // store data
            b{0} STSLICECONST  // store library
        }> PUSHCONT
        // Group 3: IFELSE that does the branching shown above
        IFELSE
        // → Stack state
        // s0: Builder
        // s1: null or StateInit
        // s2: `body`
        // s3: `mode`
        // Group 4: Finalizing the message
        STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
        ENDC
        // → Stack state
        // s0: Cell
        // s1: `mode`
        // Group 5: Sending the message, with `mode` on top
        SWAP
        SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
  }>
  $TryCatchTester$_fun_reply PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    SWAP
    TRUE
    PUSHNULL
    $TryCatchTester$_fun_forward INLINECALLDICT
  }>
  %getCounter PROC:<{
    $TryCatchTester$_contract_load INLINECALLDICT
    $TryCatchTester$_fun_getCounter INLINECALLDICT
    NIP
  }>
  %testTryCatch1 PROC:<{
    $TryCatchTester$_contract_load INLINECALLDICT
    $TryCatchTester$_fun_testTryCatch1 INLINECALLDICT
    NIP
  }>
  %testTryCatch2 PROC:<{
    $TryCatchTester$_contract_load INLINECALLDICT
    $TryCatchTester$_fun_testTryCatch2 INLINECALLDICT
    NIP
  }>
  %testTryCatch3 PROC:<{
    $TryCatchTester$_contract_load INLINECALLDICT
    $TryCatchTester$_fun_testTryCatch3 INLINECALLDICT
    NIP
  }>
  %testTryCatch4 PROC:<{
    $TryCatchTester$_contract_load INLINECALLDICT
    $TryCatchTester$_fun_testTryCatch4 INLINECALLDICT
    NIP
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $TryCatchTester$_contract_load INLINECALLDICT
    s0 s2 XCHG
    IFJMP:<{
      2DROP
    }>
    0 PUSHINT
    OVER
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      SWAP
      32 LDU
      s0 s2 XCHG
    }>
    SWAP
    0 EQINT
    SWAP
    33 LESSINT
    AND
    IFJMP:<{
      2DROP
    }>
    HASHSU
    DUP
    69416536767715606506388722885455358241464102324033398280593991534930481259132 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      INC
      $TryCatchTester$_contract_store INLINECALLDICT
    }>
    DUP
    58211079218756496893263458283783642487757498510265069920670807502846814071725 PUSHINT
    EQUAL
    IFJMP:<{
      DROP
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        2DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        INC
        123 THROW
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
      $TryCatchTester$_contract_store INLINECALLDICT
    }>
    110516911034300620134597300202961563853727787203808461997221809139592555535767 PUSHINT
    EQUAL
    IFJMP:<{
      INC
          B{b5ee9c724101010100130000220000000068656c6c6f20776f726c6420317944a026} B>boc PUSHREF
      $TryCatchTester$_fun_reply INLINECALLDICT
      DUP
      c1 PUSH
      c3 PUSH
      c4 PUSH
      c5 PUSH
      c7 PUSH
      <{
        2DROP
      }>CONT
      c7 SETCONT
      c5 SETCONT
      c4 SETCONT
      c3 SETCONT
      c1 SETCONT
      1 PUSHINT
      -1 PUSHINT
      SETCONTVARARGS
      <{
        INC
            B{b5ee9c724101010100130000220000000068656c6c6f20776f726c6420328db7f035} B>boc PUSHREF
        $TryCatchTester$_fun_reply INLINECALLDICT
            B{b5ee9c7241010101000f00001a00000000536f6d657468696e6707ec49a0} B>boc PUSHREF
        $global_emit INLINECALLDICT
        123 THROW
      }>CONT
      c1 PUSH
      COMPOSALT
      SWAP
      TRY
      $TryCatchTester$_contract_store INLINECALLDICT
    }>
    DROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
        execute current@ context@ current!
        {
            }END> b>
            
            <{
                SETCP0 DUP
                IFNOTJMP:<{
                    DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
                }>
    swap <s ref@
                0 swap @procdictkeylen idict- drop
                -1 swap @procdictkeylen idict- drop
                65535 swap @procdictkeylen idict- drop
                @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
  }>
}END>c
