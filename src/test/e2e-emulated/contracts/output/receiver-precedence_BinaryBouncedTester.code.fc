#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; receiver-precedence_BinaryBouncedTester.headers.fc
;;
;; Header files for BinaryBouncedTester
;; NOTE: declarations are sorted for optimal order
;;

;; $Message$_load_bounced
(slice, (tuple)) $Message$_load_bounced(slice sc_0) inline;

;; $Empty$_load_without_opcode
(slice, (tuple)) $Empty$_load_without_opcode(slice sc_0) inline;

;; $SendCellToAddress$_load_without_opcode
(slice, ((slice, cell))) $SendCellToAddress$_load_without_opcode(slice sc_0) inline;

;; $BinaryBouncedTester$_store
builder $BinaryBouncedTester$_store(builder build_0, (slice) v) inline;

;; $BinaryBouncedTester$_load
(slice, ((slice))) $BinaryBouncedTester$_load(slice sc_0) inline;

;; $BinaryBouncedTester$_contract_init
(slice) $BinaryBouncedTester$_contract_init() impure inline;

;; $BinaryBouncedTester$_contract_load
(slice) $BinaryBouncedTester$_contract_load() impure inline;

;; $BinaryBouncedTester$_contract_store
() $BinaryBouncedTester$_contract_store((slice) v) impure inline;

;; $BinaryBouncedTester$_fun_receiver
((slice), slice) $BinaryBouncedTester$_fun_receiver((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline;


;; receiver-precedence_BinaryBouncedTester.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

;; receiver-precedence_BinaryBouncedTester.constants.fc
;; String "unknown"
slice __gen_slice_string_b6f92ccfff6c9fa74f28aae6587957d4014fab2558ee73a78d6f6052f018d262() asm """
    B{b5ee9c7241010101000900000e756e6b6e6f776e86bcd037} B>boc <s PUSHSLICE
""";

;; String "bounced_binary"
slice __gen_slice_string_6bffd3d48d93fd1178daec1b81ec09dc4b916716c60bceca753b98c05d8cef79() asm """
    B{b5ee9c7241010101001000001c626f756e6365645f62696e61727989350fd6} B>boc <s PUSHSLICE
""";

;; String "bounced_binary_empty_message"
slice __gen_slice_string_731bf3ae6da9503140a97e120a7c0d79dacd16acb261e1a8a26c8bb4a03160b6() asm """
    B{b5ee9c7241010101001e000038626f756e6365645f62696e6172795f656d7074795f6d6573736167651ac3f4bc} B>boc <s PUSHSLICE
""";

;; receiver-precedence_BinaryBouncedTester.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_bounce_value_body(slice $to, int $bounce, int $value, cell $body) inline {
    return (0, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: Message
;; Header: 0x00000064
;; TLB: message#00000064 msg:^string = Message
;;

(slice, (tuple)) $Message$_load_bounced(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: Empty
;; Header: 0x00000065
;; TLB: empty#00000065  = Empty
;;

(slice, (tuple)) $Empty$_load_without_opcode(slice sc_0) inline {
    return (sc_0, null());
}

;;
;; Type: SendCellToAddress
;; Header: 0x7f9e1f09
;; TLB: send_cell_to_address#7f9e1f09 address:address body:^cell = SendCellToAddress
;;

(slice, ((slice, cell))) $SendCellToAddress$_load_without_opcode(slice sc_0) inline {
    var v'address = sc_0~load_msg_addr();
    var v'body = sc_0~load_ref();
    return (sc_0, (v'address, v'body));
}

;;
;; Type: BinaryBouncedTester
;; TLB: _ receiver:^string = BinaryBouncedTester
;;

builder $BinaryBouncedTester$_store(builder build_0, (slice) v) inline {
    var (v'receiver) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'receiver).end_cell());
    return build_0;
}

(slice, ((slice))) $BinaryBouncedTester$_load(slice sc_0) inline {
    var v'receiver = sc_0~load_ref().begin_parse();
    return (sc_0, (v'receiver));
}

(slice) $BinaryBouncedTester$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$BinaryBouncedTester$_load();
    } else {
        return $BinaryBouncedTester$_contract_init();
    }
}

() $BinaryBouncedTester$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $BinaryBouncedTester$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract BinaryBouncedTester functions
;;

(slice) $BinaryBouncedTester$_contract_init() impure inline {
    var (($self'receiver)) = (__gen_slice_string_b6f92ccfff6c9fa74f28aae6587957d4014fab2558ee73a78d6f6052f018d262());
    return ($self'receiver);
}

((slice), slice) $BinaryBouncedTester$_fun_receiver((slice) $self) impure inline_ref {
    var (($self'receiver)) = $self;
    var $fresh$ret_2051 = $self'receiver;
    return (($self'receiver), $fresh$ret_2051);
}

;;
;; Get methods of a Contract BinaryBouncedTester
;;

_ %receiver() method_id(78947) {
    var self = $BinaryBouncedTester$_contract_load();
    var res = self~$BinaryBouncedTester$_fun_receiver();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract BinaryBouncedTester
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'receiver) = $BinaryBouncedTester$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF prefix of a bounced message
        in_msg~skip_bits(32);
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }
        ;; Bounced handler for Message message
        if (op == 100) {
            var $msg = in_msg~$Message$_load_bounced();
            $self'receiver = __gen_slice_string_6bffd3d48d93fd1178daec1b81ec09dc4b916716c60bceca753b98c05d8cef79();
            ;; Persist state
            $BinaryBouncedTester$_contract_store(($self'receiver));
            return ();
        }
        
        ;; Bounced handler for Empty message
        if (op == 101) {
            var $msg = in_msg~$Empty$_load_without_opcode();
            $self'receiver = __gen_slice_string_731bf3ae6da9503140a97e120a7c0d79dacd16acb261e1a8a26c8bb4a03160b6();
            ;; Persist state
            $BinaryBouncedTester$_contract_store(($self'receiver));
            return ();
        }
        
        return ();
    }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive SendCellToAddress message
        if (op == 2141069065) {
            var ($msg'address, $msg'body) = in_msg~$SendCellToAddress$_load_without_opcode();
            $global_send($SendParameters$_constructor_to_bounce_value_body($msg'address, true, 5000000000, $msg'body));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "reset" message
    if (text_op == 0x43a8d49a55e18b55f2f39958a76c5127278b9a2cde82e274d2612097fdc3ba44) {
        $self'receiver = __gen_slice_string_b6f92ccfff6c9fa74f28aae6587957d4014fab2558ee73a78d6f6052f018d262();
        ;; Persist state
        $BinaryBouncedTester$_contract_store(($self'receiver));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}