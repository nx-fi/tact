#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; ordering_A.headers.fc
;;
;; Header files for A
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $Deploy$_load_without_opcode
(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $A$_store
builder $A$_store(builder build_0, (slice) v) inline;

;; $A$_load
(slice, ((slice))) $A$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $S$_to_external
(int, int, int) $S$_to_external(((int, int, int)) v) inline;

;; $A$init$_load
(slice, ((slice))) $A$init$_load(slice sc_0) inline;

;; $A$_contract_init
(slice) $A$_contract_init(slice $owner) impure inline;

;; $A$_contract_load
(slice) $A$_contract_load() impure inline_ref;

;; $A$_contract_store
() $A$_contract_store((slice) v) impure inline;

;; $Int$_fun_inc
(int, int) $Int$_fun_inc(int $self) impure inline_ref;

;; $S$_constructor_v3_v2_v1
((int, int, int)) $S$_constructor_v3_v2_v1(int $v3, int $v2, int $v1) inline;

;; $A$_fun_create
((slice), (int, int, int)) $A$_fun_create((slice) $self, int $v) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $A$_fun_forward
((slice), ()) $A$_fun_forward((slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $A$_fun_notify
((slice), ()) $A$_fun_notify((slice) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; ordering_A.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

((slice), ()) $A$_fun_forward((slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'owner)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'owner), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'owner), ());
}

((slice), ()) $A$_fun_notify((slice) $self, cell $body) impure inline {
    var (($self'owner)) = $self;
    ($self'owner)~$A$_fun_forward(__tact_context_get_sender(), $body, false, null());
    return (($self'owner), ());
}

;; ordering_A.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: S
;; TLB: _ v1:int257 v2:int257 v3:int257 = S
;;

(int, int, int) $S$_to_external(((int, int, int)) v) inline {
    var (v'v1, v'v2, v'v3) = v; 
    return (v'v1, v'v2, v'v3);
}

((int, int, int)) $S$_constructor_v3_v2_v1(int $v3, int $v2, int $v1) inline {
    return ($v1, $v2, $v3);
}

;;
;; Type: A
;;

builder $A$_store(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = build_0.store_slice(v'owner);
    return build_0;
}

(slice, ((slice))) $A$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'owner));
}

(slice, ((slice))) $A$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    return (sc_0, (v'owner));
}

(slice) $A$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$A$_load();
    } else {
        (slice $owner) = $sc~$A$init$_load();
        $sc.end_parse();
        return $A$_contract_init($owner);
    }
}

() $A$_contract_store((slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $A$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract A functions
;;

(slice) $A$_contract_init(slice $owner) impure inline {
    var (($self'owner)) = (null());
    $self'owner = $owner;
    return ($self'owner);
}

(int, int) $Int$_fun_inc(int $self) impure inline_ref {
    var ($self) = $self;
    $self = ($self + 1);
    var $fresh$ret_669 = $self;
    return ($self, $fresh$ret_669);
}

((slice), (int, int, int)) $A$_fun_create((slice) $self, int $v) impure inline_ref {
    var (($self'owner)) = $self;
    var $fresh$ret_670 = $S$_constructor_v3_v2_v1($v~$Int$_fun_inc(), $v~$Int$_fun_inc(), $v~$Int$_fun_inc());
    return (($self'owner), $fresh$ret_670);
}

;;
;; Get methods of a Contract A
;;

_ %create(int $v) method_id(96687) {
    int $v = $v;
    var self = $A$_contract_load();
    var res = self~$A$_fun_create($v);
    return $S$_to_external(res);
}

;;
;; Routing of a Contract A
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner) = $A$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var (op, _) = in_msg~load_uint_quiet(32);
    ;; Receive Deploy message
    if (op == 2490013878) {
        var ($deploy'queryId) = in_msg~$Deploy$_load_without_opcode();
        ($self'owner)~$A$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
        ;; Persist state
        $A$_contract_store(($self'owner));
        return ();
    }
    
    throw(130);
}
