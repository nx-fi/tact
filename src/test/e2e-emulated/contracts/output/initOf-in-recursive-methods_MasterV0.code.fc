#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; initOf-in-recursive-methods_MasterV0.headers.fc
;;
;; Header files for MasterV0
;; NOTE: declarations are sorted for optimal order
;;

;; $MasterV0$_load
(slice, ((int))) $MasterV0$_load(slice sc_0) inline;

;; $MasterV0$_contract_init
(int) $MasterV0$_contract_init() impure inline;

;; $MasterV0$_contract_load
(int) $MasterV0$_contract_load() impure inline;

;; $MasterV0$_fun_state
((int), int) $MasterV0$_fun_state((int) $self) impure inline_ref;


;; initOf-in-recursive-methods_MasterV0.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; initOf-in-recursive-methods_MasterV0.storage.fc
;;
;; Type: MasterV0
;; TLB: _ state:int257 = MasterV0
;;

(slice, ((int))) $MasterV0$_load(slice sc_0) inline {
    var v'state = sc_0~load_int(257);
    return (sc_0, (v'state));
}

(int) $MasterV0$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MasterV0$_load();
    } else {
        return $MasterV0$_contract_init();
    }
}

;;
;; Contract MasterV0 functions
;;

(int) $MasterV0$_contract_init() impure inline {
    var (($self'state)) = (0);
    return ($self'state);
}

((int), int) $MasterV0$_fun_state((int) $self) impure inline_ref {
    var (($self'state)) = $self;
    var $fresh$ret_347 = $self'state;
    return (($self'state), $fresh$ret_347);
}

;;
;; Get methods of a Contract MasterV0
;;

_ %state() method_id(77589) {
    var self = $MasterV0$_contract_load();
    var res = self~$MasterV0$_fun_state();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract MasterV0
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'state) = $MasterV0$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}