// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/e2e-emulated/contracts/output/receiver-precedence_ReceiverTester.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_slice_eq
  DECLPROC $Message$_load_without_opcode
  DECLPROC $BinaryIntOperation$_store
  DECLPROC $BinaryIntOperation$_store_cell
  DECLPROC $BinaryIntOperation$_load_bounced
  DECLPROC $SendCellToAddress$_load_without_opcode
  DECLPROC $ReceiverTester$_store
  DECLPROC $ReceiverTester$_load
  DECLPROC $Calculator$init$_store
  DECLPROC $ReceiverTester$_contract_init
  DECLPROC $ReceiverTester$_contract_load
  DECLPROC $ReceiverTester$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $Calculator$_init_child
  DECLPROC $ReceiverTester$_fun_receiverKind
  DECLPROC $SendParameters$_constructor_to_bounce_value_body
  DECLPROC $MessageParameters$_constructor_to_bounce_value_body
  DECLPROC $BinaryIntOperation$_constructor_op_val1_val2
  87389 DECLMETHOD %receiverKind
  DECLPROC recv_internal
  DECLPROC recv_external
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_slice_eq PROCINLINE:<{
    SWAP
    HASHSU
    SWAP
    HASHSU
    EQUAL
  }>
  $Message$_load_without_opcode PROCINLINE:<{
    LDREF
    SWAP
    CTOS
  }>
  $BinaryIntOperation$_store PROCINLINE:<{
    829886522 PUSHINT
    s0 s4 XCHG2
    32 STU
    NEWC
    s0 s3 XCHG2
    STSLICER
    ENDC
    ROT
    STREF
    257 PUSHINT
    STIX
    257 PUSHINT
    STIX
  }>
  $BinaryIntOperation$_store_cell PROCINLINE:<{
    NEWC
    3 -ROLL
    $BinaryIntOperation$_store INLINECALLDICT
    ENDC
  }>
  $BinaryIntOperation$_load_bounced PROCINLINE:<{
    PUSHNULL
  }>
  $SendCellToAddress$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    LDREF
    -ROT
  }>
  $ReceiverTester$_store PROCINLINE:<{
    NEWC
    SWAP
    STSLICER
    ENDC
    SWAP
    STREF
  }>
  $ReceiverTester$_load PROCINLINE:<{
    LDREF
    SWAP
    CTOS
  }>
  $Calculator$init$_store PROCINLINE:<{
    DROP
  }>
  $ReceiverTester$_contract_init PROCINLINE:<{
        B{b5ee9c7241010101000900000e756e6b6e6f776e86bcd037} B>boc <s PUSHSLICE
  }>
  $ReceiverTester$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $ReceiverTester$_load INLINECALLDICT
      NIP
    }>ELSE<{
      DROP
      $ReceiverTester$_contract_init INLINECALLDICT
    }>
  }>
  $ReceiverTester$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    SWAP
    $ReceiverTester$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $Calculator$_init_child PROCINLINE:<{
        B{b5ee9c720101020100dd0001d4ff00208edc30eda2edfb01d072d721d200d200fa4021103450666f04f86102f862ed44d0d20030916d916de230019130e020d749c21fe300f90182f0d95abec808516815126b60e61ee97798fa369d80938fd6e58a862d5789af459cbadcf2c082e16d8013f4bcf2c80b0100dcd31f0182103177103aba8e61d401d001810101d700810101d7005520338200bc238b12f8500301f90101f901ba12f2f401a904f8427082103b9aca0003c8018210fc63281058cb1f810101cf00c9413070504403c8cf8580ca00cf8440ce01fa02806acf40f400c901fb00db31e0} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    PUSHNULL
    $Calculator$init$_store INLINECALLDICT
    ENDC
  }>
  $ReceiverTester$_fun_receiverKind PROCREF:<{
    DUP
  }>
  $SendParameters$_constructor_to_bounce_value_body PROCINLINE:<{
    0 PUSHINT
    s3 s4 XCHG2
    PUSHNULL
    s0 s3 XCHG
    PUSHNULL
    s2 s3 XCHG2
  }>
  $MessageParameters$_constructor_to_bounce_value_body PROCINLINE:<{
    0 PUSHINT
    s4 s4 XCHG2
    s0 s3 XCHG
  }>
  $BinaryIntOperation$_constructor_op_val1_val2 PROCINLINE:<{
  }>
  %receiverKind PROC:<{
    $ReceiverTester$_contract_load INLINECALLDICT
    $ReceiverTester$_fun_receiverKind INLINECALLDICT
    NIP
  }>
  recv_internal PROC:<{
    c2 SAVE
    SAMEALTSAVE
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $ReceiverTester$_contract_load INLINECALLDICT
    DROP
    SWAP
    IFJMP:<{
      32 PUSHINT
      SDSKIPFIRST
      0 PUSHINT
      OVER
      SBITS
      31 GTINT
      IF:<{
        DROP
        DUP
        32 PLDU
        NIP
      }>ELSE<{
        NIP
      }>
      829886522 PUSHINT
      EQUAL
      IFJMP:<{
            B{b5ee9c7241010101001800002c626f756e6365645f62696e6172795f6d657373616765ffb8eadf} B>boc <s PUSHSLICE
        $ReceiverTester$_contract_store INLINECALLDICT
      }>
          B{b5ee9c72410101010012000020626f756e6365645f66616c6c6261636bd137f014} B>boc <s PUSHSLICE
      $ReceiverTester$_contract_store INLINECALLDICT
    }>
    0 PUSHINT
    OVER
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      OVER
      32 PLDU
      DUP
      100 EQINT
      IFJMP:<{
        3 BLKDROP
            B{b5ee9c7241010101001000001c62696e6172795f6d657373616765182fa7f8} B>boc <s PUSHSLICE
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
      DUP
      2141069065 PUSHINT
      EQUAL
      IFJMP:<{
        2DROP
        32 PUSHINT
        SDSKIPFIRST
        $SendCellToAddress$_load_without_opcode INLINECALLDICT
        s2 POP
        FALSE
        ROT
        5000000000 PUSHINT
        SWAP
        $SendParameters$_constructor_to_bounce_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            MUL // note that -1 * -1 wraps back to -1
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        RETALT
      }>
      SWAP
    }>
    OVER
    0 EQINT
    OVER
    33 LESSINT
    AND
    IFJMP:<{
      3 BLKDROP
          B{b5ee9c7241010101000700000a656d707479cd50d7fb} B>boc <s PUSHSLICE
      $ReceiverTester$_contract_store INLINECALLDICT
    }>
    SWAP
    0 EQINT
    IF:<{
      OVER
      HASHSU
      DUP
      12496330766740334683121779060496447633951178410392124241047263068897257131789 PUSHINT
      EQUAL
      IFJMP:<{
        3 BLKDROP
            B{b5ee9c7241010101000900000e636f6d6d656e747870e97e} B>boc <s PUSHSLICE
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
      DUP
      50310498008596633650102356769568115813761657779049951357489928776873755419564 PUSHINT
      EQUAL
      IFJMP:<{
        3 BLKDROP
        $Calculator$_init_child INLINECALLDICT
        $global_contractAddress INLINECALLDICT
        TRUE
        1000000000 PUSHINT
            B{b5ee9c724101010100030000022b3642e8f8} B>boc <s PUSHSLICE
        1 PUSHINT
        DUP
        $BinaryIntOperation$_constructor_op_val1_val2 INLINECALLDICT
        $BinaryIntOperation$_store_cell INLINECALLDICT
        $MessageParameters$_constructor_to_bounce_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
            STZEROES
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            STDICT
            ENDC
            SWAP
            SENDRAWMSG
        RETALT
      }>
      DUP
      95501955124415379859150650777714219744490232591208358022843214551788406310828 PUSHINT
      EQUAL
      IFJMP:<{
        3 BLKDROP
        $Calculator$_init_child INLINECALLDICT
        $global_contractAddress INLINECALLDICT
        TRUE
        1000000000 PUSHINT
            B{b5ee9c724101010100030000022f29d5723f} B>boc <s PUSHSLICE
        10 PUSHINT
        0 PUSHINT
        $BinaryIntOperation$_constructor_op_val1_val2 INLINECALLDICT
        $BinaryIntOperation$_store_cell INLINECALLDICT
        $MessageParameters$_constructor_to_bounce_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
            STZEROES
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            STDICT
            ENDC
            SWAP
            SENDRAWMSG
        RETALT
      }>
      DUP
      6609206721444000144232657614106760506227503899882306062988124590934564245662 PUSHINT
      EQUAL
      IFJMP:<{
        3 BLKDROP
        $Calculator$_init_child INLINECALLDICT
        $global_contractAddress INLINECALLDICT
        TRUE
        1000000000 PUSHINT
            B{b5ee9c724101010100030000022f29d5723f} B>boc <s PUSHSLICE
        10 PUSHINT
        2 PUSHINT
        $BinaryIntOperation$_constructor_op_val1_val2 INLINECALLDICT
        $BinaryIntOperation$_store_cell INLINECALLDICT
        $MessageParameters$_constructor_to_bounce_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
            STZEROES
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            STDICT
            ENDC
            SWAP
            SENDRAWMSG
        RETALT
      }>
      27642598477908756472025125924569589908187307287383522950041954374625389517519 PUSHINT
      EQUAL
      IFJMP:<{
        2DROP
        $Calculator$_init_child INLINECALLDICT
        $global_contractAddress INLINECALLDICT
        TRUE
        1000000000 PUSHINT
            B{b5ee9c7241010101001200002000000000646f5f736f6d657468696e67a4f18b86} B>boc PUSHREF
        $MessageParameters$_constructor_to_bounce_value_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
            STZEROES
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            STDICT
            ENDC
            SWAP
            SENDRAWMSG
        RETALT
      }>
      31 GTINT
      IFJMP:<{
        32 PUSHINT
        SDSKIPFIRST
            B{b5ee9c7241010101000900000e6d6573736167650cd9b20d} B>boc <s PUSHSLICE
        SWAP
        __tact_slice_eq INLINECALLDICT
        IF:<{
              B{b5ee9c7241010101000f00001a6572726f725f636f6d6d656e74c0780ab2} B>boc <s PUSHSLICE
        }>ELSE<{
              B{b5ee9c72410101010012000020636f6d6d656e745f66616c6c6261636bc5e99174} B>boc <s PUSHSLICE
        }>
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
    }>ELSE<{
      DROP
    }>
    32 LDU
    NIP
        B{b5ee9c7241010101000900000e6d6573736167650cd9b20d} B>boc <s PUSHSLICE
    SWAP
    __tact_slice_eq INLINECALLDICT
    IF:<{
          B{b5ee9c7241010101000f00001a6d6573736167655f736c6963658f8e6ed5} B>boc <s PUSHSLICE
    }>ELSE<{
          B{b5ee9c7241010101000a00001066616c6c6261636bbfcb7b68} B>boc <s PUSHSLICE
    }>
    $ReceiverTester$_contract_store INLINECALLDICT
  }>
  recv_external PROC:<{
    c2 SAVE
    SAMEALTSAVE
    $ReceiverTester$_contract_load INLINECALLDICT
    DROP
    0 PUSHINT
    OVER
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      OVER
      32 PLDU
      DUP
      100 EQINT
      IFJMP:<{
        3 BLKDROP
            ACCEPT
            B{b5ee9c7241010101001900002e65787465726e616c5f62696e6172795f6d6573736167650f6f52c8} B>boc <s PUSHSLICE
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
      SWAP
    }>
    OVER
    0 EQINT
    OVER
    33 LESSINT
    AND
    IFJMP:<{
      3 BLKDROP
          ACCEPT
          B{b5ee9c7241010101001000001c65787465726e616c5f656d7074798ec2e3da} B>boc <s PUSHSLICE
      $ReceiverTester$_contract_store INLINECALLDICT
    }>
    SWAP
    0 EQINT
    IF:<{
      OVER
      HASHSU
      12496330766740334683121779060496447633951178410392124241047263068897257131789 PUSHINT
      EQUAL
      IFJMP:<{
        2DROP
            ACCEPT
            B{b5ee9c7241010101001200002065787465726e616c5f636f6d6d656e7456d763e7} B>boc <s PUSHSLICE
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
      31 GTINT
      IFJMP:<{
        32 PUSHINT
        SDSKIPFIRST
            ACCEPT
            B{b5ee9c7241010101000900000e6d6573736167650cd9b20d} B>boc <s PUSHSLICE
        SWAP
        __tact_slice_eq INLINECALLDICT
        IF:<{
              B{b5ee9c7241010101001800002c65787465726e616c5f6572726f725f636f6d6d656e745937491d} B>boc <s PUSHSLICE
        }>ELSE<{
              B{b5ee9c7241010101001b00003265787465726e616c5f636f6d6d656e745f66616c6c6261636b07dfd144} B>boc <s PUSHSLICE
        }>
        $ReceiverTester$_contract_store INLINECALLDICT
        RETALT
      }>
    }>ELSE<{
      DROP
    }>
        ACCEPT
    32 LDU
    NIP
        B{b5ee9c7241010101000900000e6d6573736167650cd9b20d} B>boc <s PUSHSLICE
    SWAP
    __tact_slice_eq INLINECALLDICT
    IF:<{
          B{b5ee9c7241010101001800002c65787465726e616c5f6d6573736167655f736c69636516c12d7a} B>boc <s PUSHSLICE
    }>ELSE<{
          B{b5ee9c7241010101001300002265787465726e616c5f66616c6c6261636b100c4b5a} B>boc <s PUSHSLICE
    }>
    $ReceiverTester$_contract_store INLINECALLDICT
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
        execute current@ context@ current!
        {
            }END> b>
            
            <{
                SETCP0 DUP
                IFNOTJMP:<{
                    DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
                }>
    DUP -1 EQINT IFJMP:<{
                    DROP over <s ref@ -1 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
                }>
    swap <s ref@
                0 swap @procdictkeylen idict- drop
                -1 swap @procdictkeylen idict- drop
                65535 swap @procdictkeylen idict- drop
                @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
  }>
}END>c
