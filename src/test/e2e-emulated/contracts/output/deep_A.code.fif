// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/e2e-emulated/contracts/output/deep_A.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC $StateInit$_to_external
  DECLPROC $B$init$_store
  DECLPROC $A$_contract_init
  DECLPROC $A$_contract_load
  DECLPROC $A$_contract_store
  DECLPROC $B$_init_child
  DECLPROC $A$_fun_getNext
  DECLPROC $DeployParameters$_constructor_init_value_mode_bounce_body
  74105 DECLMETHOD %getNext
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  $StateInit$_to_external PROCINLINE:<{
  }>
  $B$init$_store PROCINLINE:<{
    STSLICER
  }>
  $A$_contract_init PROCINLINE:<{
    PUSHNULL
  }>
  $A$_contract_load PROCREF:<{
    c4 PUSH
    CTOS
    1 LDI
    DROP
    IFJMP:<{
      PUSHNULL
    }>
    $A$_contract_init INLINECALLDICT
  }>
  $A$_contract_store PROCINLINE:<{
    DROP
    NEWC
    TRUE
    SWAP
    1 STI
    ENDC
    c4 POP
  }>
  $B$_init_child PROCREF:<{
        B{b5ee9c7201020f0100025f000114ff00f4a413f4bcf2c80b01020162020302a6d001d072d721d200d200fa4021103450666f04f86102f862db3c02915be020d749c21f93d31f31def90182f02796bd8dcb3155bf85d91ad1db643a3759a7209173fd2c1959d190a66b7aaf38bae30230f2c0820a040211a042f3b679b678d8250a0602faf828db3c5c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0007080427f885e234430121046445503c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00c87f01ca0001cf16c9ed5407050016000000004d6573736167650108f828db3c07011488c87001ca0058cf16c9080114ff00f4a413f4bcf2c80b0903f2d301d072d721d200d200fa4021103450666f04f86102f862db3c02915be020d749c21f93d31f31def9012082f02796bd8dcb3155bf85d91ad1db643a3759a7209173fd2c1959d190a66b7aaf38bae30282f05d83a38f50c03d8297a4969a4525917e026c6a16582eb8cf31e5777855e3d71dbae30230f2c0820a0b0c0022ed44d0d2000194fa400131e0fa400101d102fa3020db3c5c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d0007080427f885e234430121046445503c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00c87f01ca0001cf16c9ed540d0e0016c87f01ca0001cf16c9ed540016f82ac87001ca0058cf16c90018000000004d65737361676532} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    ROT
    $B$init$_store INLINECALLDICT
    ENDC
  }>
  $A$_fun_getNext PROCREF:<{
        MYADDR
    $B$_init_child INLINECALLDICT
  }>
  $DeployParameters$_constructor_init_value_mode_bounce_body PROCINLINE:<{
    s1 s5 s4 XCHG3
  }>
  %getNext PROC:<{
    $A$_contract_load INLINECALLDICT
    $A$_fun_getNext INLINECALLDICT
    1 2 BLKDROP2
    $StateInit$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $A$_contract_load INLINECALLDICT
    s0 s2 XCHG
    IFJMP:<{
      2DROP
    }>
    DUP
    SBITS
    31 GTINT
    IF:<{
      32 LDU
      NIP
    }>
    HASHSU
    17906536407274860712279605252355888328213352419534283283354847319154734313272 PUSHINT
    EQUAL
    IFJMP:<{
          MYADDR
      $B$_init_child INLINECALLDICT
      0 PUSHINT
      66 PUSHINT
      TRUE
          B{b5ee9c7241010101000d000016000000004d6573736167652e559ef2} B>boc PUSHREF
      $DeployParameters$_constructor_init_value_mode_bounce_body INLINECALLDICT
          4 1 BLKPUSH // pushes 2 copies of `init.code` and `init.data`
          HASHCU // `init.data` hash
          SWAP
          HASHCU // `init.code` hash
          SWAP2
          CDEPTH // `init.data` depth
          SWAP
          CDEPTH // `init.code` depth
          // Group 2: Calculating destination address
          // For almost identical logic and instructions,
          // see comments inside `contractHash()` function in contract.tact
          131380 INT // (2 << 16) | (1 << 8) | 0x34
          NEWC
          24 STU
          16 STU
          16 STU
          256 STU
          256 STU
          ONE HASHEXT_SHA256 // obtains hash part (account id) of the address
          // → Stack state
          // s0: destAddr(hash part)
          // s1: `init.data`
          // s2: `init.code`
          // s3 and below: `bounce`, `value`, `body`, `mode`
          // Group 3: Building a message (CommonMsgInfoRelaxed)
          s3 XCHG0           // swaps `bounce` with destAddr(hash part)
          NEWC
          b{01} STSLICECONST // store tag = $0 and ihr_disabled = true
          1 STI              // store `bounce`
          s1 s2 XCHG         // swap `init.data` with `init.code`, placing code on s1
          STREF              // store `init.code`
          STREF              // store `init.data`
          // Inline StateInit:
          b{00010000000000} STSLICECONST
          // 0 + 00 + 10 + 0 + 00000000
          // 1) 0 - bounced = false
          // 2) 00 - src = addr_none
          // 3) 10 - tag of addr_std (part of dest)
          // 4) 0 - Maybe Anycast = false
          // 5) 00000000 - workchain_id (part of dest)
          //
          256 STU     // store destAddr(hash part)
          SWAP        // Builder on top, `value` below
          STGRAMS     // store `value`
          105 PUSHINT // 1 + 4 + 4 + 64 + 32
          STZEROES    // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // Group 4: Continue building a message (CommonMsgInfoRelaxed into MessageRelaxed)
          // Remaining bits of MessageRelaxed:
          b{1000110} STSLICECONST
          // 10 + 0 + 0 + 1 + 1 + 0
          // 10 - Maybe (Either StateInit ^StateInit) = true false
          // 0 - split_depth:(Maybe (## 5)) = false
          // 0 = special:(Maybe TickTock) = false
          // 1 = code:(Maybe ^Cell) = true
          // 1 = data:(Maybe ^Cell) = true
          // 0 = library:(Maybe ^Cell) = false
          //
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC   // finalize the message
          // → Stack state
          // s0: Cell
          // s1: params.`mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG
      $A$_contract_store INLINECALLDICT
    }>
    DROP
    130 THROW
  }>
}END>c
