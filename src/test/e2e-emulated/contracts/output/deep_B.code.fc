#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; deep_B.headers.fc
;;
;; Header files for B
;; NOTE: declarations are sorted for optimal order
;;

;; $B$_load
(slice, ((slice))) $B$_load(slice sc_0) inline;

;; $StateInit$_to_external
(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline;

;; $B$init$_load
(slice, ((slice))) $B$init$_load(slice sc_0) inline;

;; $C$init$_store
builder $C$init$_store(builder build_0, (slice) v) inline;

;; $B$_contract_init
(slice) $B$_contract_init(slice $parent) impure inline;

;; $B$_contract_load
(slice) $B$_contract_load() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $C$_init_child
(cell, cell) $C$_init_child(slice $parent) inline;

;; $B$_fun_getNext
((slice), (cell, cell)) $B$_fun_getNext((slice) $self) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_bounce_code_data_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int $value, slice $to, int $mode, int $bounce, cell $code, cell $data, cell $body) inline;


;; deep_B.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

;; deep_B.constants.fc
;; Cell tBqZMzAcHXKOZOI2hf46nHVAq5NZ73MYlDwO5eCRDV0=
cell __gen_cell_cell_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d() asm """
    B{b5ee9c7241010101000d000016000000004d6573736167652e559ef2} B>boc PUSHREF
""";

;; deep_B.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

(cell, cell) $StateInit$_to_external(((cell, cell)) v) inline {
    var (v'code, v'data) = v; 
    return (v'code, v'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_value_to_mode_bounce_code_data_body(int $value, slice $to, int $mode, int $bounce, cell $code, cell $data, cell $body) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

;;
;; Type: B
;; TLB: _ parent:address = B
;;

(slice, ((slice))) $B$_load(slice sc_0) inline {
    var v'parent = sc_0~load_msg_addr();
    return (sc_0, (v'parent));
}

(slice, ((slice))) $B$init$_load(slice sc_0) inline {
    var v'parent = sc_0~load_msg_addr();
    return (sc_0, (v'parent));
}

(slice) $B$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$B$_load();
    } else {
        (slice $parent) = $sc~$B$init$_load();
        $sc.end_parse();
        return $B$_contract_init($parent);
    }
}

;;
;; Type: C
;; TLB: _ parent:address = C
;;

builder $C$init$_store(builder build_0, (slice) v) inline {
    var (v'parent) = v;
    build_0 = build_0.store_slice(v'parent);
    return build_0;
}

cell $C$_child_get_code() impure asm """
    B{b5ee9c72010204010001260002deff00208f613001d072d721d200d200fa4021103450666f04f86102f862ed44d0d2000194fa40013195fa400101d1e202915be020d749c21f93d31f31def9012082f02796bd8dcb3155bf85d91ad1db643a3759a7209173fd2c1959d190a66b7aaf38bae30231e16d8013f4bcf2c80b010201f230f82ac87001ca0058cf16c95c705920f90022f9005ad76501d76582020134c8cb17cb0fcb0fcbffcbff71f90400c87401cb0212ca07cbffc9d07080427f885e234430121046445503c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb0003004e82f05d83a38f50c03d8297a4969a4525917e026c6a16582eb8cf31e5777855e3d71dbadcf2c0820018000000004d65737361676532} B>boc PUSHREF
""";

(cell, cell) $C$_init_child(slice $parent) inline {
    ;; Build init code cell

    ;; Contract Code: C
    cell init_code = $C$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $C$init$_store(b, ($parent));
    return (init_code, b.end_cell());
}

;;
;; Contract B functions
;;

(slice) $B$_contract_init(slice $parent) impure inline {
    var (($self'parent)) = (null());
    $self'parent = $parent;
    return ($self'parent);
}

((slice), (cell, cell)) $B$_fun_getNext((slice) $self) impure inline_ref {
    var (($self'parent)) = $self;
    var $fresh$ret_279 = $C$_init_child($global_myAddress());
    return (($self'parent), $fresh$ret_279);
}

;;
;; Get methods of a Contract B
;;

_ %getNext() method_id(74105) {
    var self = $B$_contract_load();
    var res = self~$B$_fun_getNext();
    return $StateInit$_to_external(res);
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract B
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'parent) = $B$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Empty Receiver and Text Receivers
    var text_op = slice_hash(in_msg);
    ;; Receive "Message" message
    if (text_op == 0x2796bd8dcb3155bf85d91ad1db643a3759a7209173fd2c1959d190a66b7aaf38) {
        var ($init'code, $init'data) = $C$_init_child($global_myAddress());
        slice $address = $global_contractAddress(($init'code, $init'data));
        $global_send($SendParameters$_constructor_value_to_mode_bounce_code_data_body(0, $address, 66, true, $init'code, $init'data, __gen_cell_cell_b41a9933301c1d728e64e23685fe3a9c7540ab9359ef7318943c0ee5e0910d5d()));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}