{"name":"SemanticsTester","code":"","abi":"{\"name\":\"SemanticsTester\",\"types\":[{\"name\":\"DataSize\",\"header\":null,\"fields\":[{\"name\":\"cells\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"bits\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"refs\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},{\"name\":\"StateInit\",\"header\":null,\"fields\":[{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":false}}]},{\"name\":\"Context\",\"header\":null,\"fields\":[{\"name\":\"bounceable\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"sender\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"raw\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"SendParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"code\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"data\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"MessageParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"to\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]},{\"name\":\"DeployParameters\",\"header\":null,\"fields\":[{\"name\":\"mode\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"body\",\"type\":{\"kind\":\"simple\",\"type\":\"cell\",\"optional\":true}},{\"name\":\"value\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"bounce\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"init\",\"type\":{\"kind\":\"simple\",\"type\":\"StateInit\",\"optional\":false}}]},{\"name\":\"StdAddress\",\"header\":null,\"fields\":[{\"name\":\"workchain\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":8}},{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"uint\",\"optional\":false,\"format\":256}}]},{\"name\":\"VarAddress\",\"header\":null,\"fields\":[{\"name\":\"workchain\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":32}},{\"name\":\"address\",\"type\":{\"kind\":\"simple\",\"type\":\"slice\",\"optional\":false}}]},{\"name\":\"BasechainAddress\",\"header\":null,\"fields\":[{\"name\":\"hash\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":true,\"format\":257}}]},{\"name\":\"SA\",\"header\":null,\"fields\":[{\"name\":\"a1\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}},{\"name\":\"a2\",\"type\":{\"kind\":\"simple\",\"type\":\"SB\",\"optional\":false}}]},{\"name\":\"SB\",\"header\":null,\"fields\":[{\"name\":\"b1\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"b2\",\"type\":{\"kind\":\"simple\",\"type\":\"SC\",\"optional\":false}},{\"name\":\"b3\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},{\"name\":\"SC\",\"header\":null,\"fields\":[{\"name\":\"c1\",\"type\":{\"kind\":\"simple\",\"type\":\"int\",\"optional\":false,\"format\":257}}]},{\"name\":\"MapWrapper\",\"header\":null,\"fields\":[{\"name\":\"m\",\"type\":{\"kind\":\"dict\",\"key\":\"int\",\"value\":\"SA\",\"valueFormat\":\"ref\"}}]},{\"name\":\"SemanticsTester$Data\",\"header\":null,\"fields\":[{\"name\":\"sC\",\"type\":{\"kind\":\"simple\",\"type\":\"SC\",\"optional\":false}},{\"name\":\"sB\",\"type\":{\"kind\":\"simple\",\"type\":\"SB\",\"optional\":false}},{\"name\":\"sA\",\"type\":{\"kind\":\"simple\",\"type\":\"SA\",\"optional\":false}},{\"name\":\"uB\",\"type\":{\"kind\":\"simple\",\"type\":\"SB\",\"optional\":false}},{\"name\":\"mA\",\"type\":{\"kind\":\"dict\",\"key\":\"int\",\"value\":\"SA\",\"valueFormat\":\"ref\"}},{\"name\":\"mB\",\"type\":{\"kind\":\"dict\",\"key\":\"int\",\"value\":\"bool\"}},{\"name\":\"mC\",\"type\":{\"kind\":\"dict\",\"key\":\"int\",\"value\":\"MapWrapper\",\"valueFormat\":\"ref\"}},{\"name\":\"mutateContractStateResult\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}]}],\"receivers\":[{\"receiver\":\"internal\",\"message\":{\"kind\":\"empty\"}},{\"receiver\":\"internal\",\"message\":{\"kind\":\"text\",\"text\":\"mutate\"}}],\"getters\":[{\"name\":\"checkAllContractFieldsAreUnchanged\",\"methodId\":89972,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"structAssign1\",\"methodId\":126129,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"structAssign2\",\"methodId\":122066,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"paramStruct1\",\"methodId\":101710,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"paramStruct2\",\"methodId\":113965,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateParamStruct1\",\"methodId\":122731,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateParamStruct2\",\"methodId\":126728,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testReturnedStructs\",\"methodId\":120944,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct1\",\"methodId\":111427,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct2\",\"methodId\":99104,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct3\",\"methodId\":103169,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct4\",\"methodId\":123878,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct5\",\"methodId\":127943,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainStruct6\",\"methodId\":115620,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mapAssign1\",\"methodId\":116618,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mapAssign2\",\"methodId\":129001,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"paramMap1\",\"methodId\":94790,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"paramMap2\",\"methodId\":82469,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateParamMap1\",\"methodId\":78185,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateParamMap2\",\"methodId\":65802,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testReturnedMaps1\",\"methodId\":110855,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateNestedMap1\",\"methodId\":118490,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"contractAssign1\",\"methodId\":127255,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"contractAssign2\",\"methodId\":115060,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"paramContract\",\"methodId\":92093,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateParamContract\",\"methodId\":79882,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"address\",\"methodId\":69216,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"testReturnedContracts\",\"methodId\":113327,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutateContractStateFlag\",\"methodId\":67465,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"changesPersisted\",\"methodId\":76822,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt1\",\"methodId\":119936,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt2\",\"methodId\":124131,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt3\",\"methodId\":128194,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt4\",\"methodId\":99365,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt5\",\"methodId\":103428,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"mutatesChainInt6\",\"methodId\":107623,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"andMutateShortCircuit\",\"methodId\":119163,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"andInfiniteLoopShortCircuit\",\"methodId\":110116,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"andExceptionShortCircuit\",\"methodId\":68264,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"orMutateShortCircuit\",\"methodId\":127918,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"orInfiniteLoopShortCircuit\",\"methodId\":66777,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"orExceptionShortCircuit\",\"methodId\":67804,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"ternaryMutateShortCircuit\",\"methodId\":73382,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"ternaryInfiniteLoopShortCircuit\",\"methodId\":115599,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"ternaryExceptionShortCircuit\",\"methodId\":90901,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testAddressEquality\",\"methodId\":92871,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testInversesParseStdAddressAndNewAddress\",\"methodId\":109118,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testSliceEquality1\",\"methodId\":83228,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testSliceEquality2\",\"methodId\":95615,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testCellEquality1\",\"methodId\":91507,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testCellEquality2\",\"methodId\":87312,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"testCellEquality3\",\"methodId\":83249,\"arguments\":[],\"returnType\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}}],\"errors\":{\"2\":{\"message\":\"Stack underflow\"},\"3\":{\"message\":\"Stack overflow\"},\"4\":{\"message\":\"Integer overflow\"},\"5\":{\"message\":\"Integer out of expected range\"},\"6\":{\"message\":\"Invalid opcode\"},\"7\":{\"message\":\"Type check error\"},\"8\":{\"message\":\"Cell overflow\"},\"9\":{\"message\":\"Cell underflow\"},\"10\":{\"message\":\"Dictionary error\"},\"11\":{\"message\":\"'Unknown' error\"},\"12\":{\"message\":\"Fatal error\"},\"13\":{\"message\":\"Out of gas error\"},\"14\":{\"message\":\"Virtualization error\"},\"32\":{\"message\":\"Action list is invalid\"},\"33\":{\"message\":\"Action list is too long\"},\"34\":{\"message\":\"Action is invalid or not supported\"},\"35\":{\"message\":\"Invalid source address in outbound message\"},\"36\":{\"message\":\"Invalid destination address in outbound message\"},\"37\":{\"message\":\"Not enough Toncoin\"},\"38\":{\"message\":\"Not enough extra currencies\"},\"39\":{\"message\":\"Outbound message does not fit into a cell after rewriting\"},\"40\":{\"message\":\"Cannot process a message\"},\"41\":{\"message\":\"Library reference is null\"},\"42\":{\"message\":\"Library change action error\"},\"43\":{\"message\":\"Exceeded maximum number of cells in the library or the maximum depth of the Merkle tree\"},\"50\":{\"message\":\"Account state size exceeded limits\"},\"128\":{\"message\":\"Null reference exception\"},\"129\":{\"message\":\"Invalid serialization prefix\"},\"130\":{\"message\":\"Invalid incoming message\"},\"131\":{\"message\":\"Constraints error\"},\"132\":{\"message\":\"Access denied\"},\"133\":{\"message\":\"Contract stopped\"},\"134\":{\"message\":\"Invalid argument\"},\"135\":{\"message\":\"Code of a contract was not found\"},\"136\":{\"message\":\"Invalid standard address\"}},\"interfaces\":[\"org.ton.introspection.v0\",\"org.ton.abi.ipfs.v0\",\"org.ton.deploy.lazy.v0\",\"org.ton.debug.v0\"]}","init":{"kind":"direct","args":[],"prefix":{"bits":1,"value":0},"deployment":{"kind":"system-cell","system":null}},"sources":{"e2e-emulated/contracts/semantics.tact":""},"compiler":{"name":"tact","version":"invalid","parameters":"{\"entrypoint\":\"e2e-emulated/contracts/semantics.tact\",\"options\":{\"debug\":true,\"external\":true}}"}}