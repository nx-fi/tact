#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; optionals_Opt3.headers.fc
;;
;; Header files for Opt3
;; NOTE: declarations are sorted for optimal order
;;

;; $Struct2$_load
(slice, ((int))) $Struct2$_load(slice sc_0) inline;

;; $Struct2$_as_optional
tuple $Struct2$_as_optional((int) v) inline;

;; $Opt3$init$_load
(slice, ((tuple))) $Opt3$init$_load(slice sc_0) inline;

;; $Opt3$_contract_init
tuple $Opt3$_contract_init(tuple $arg) impure inline;

;; $Opt3$_contract_load
tuple $Opt3$_contract_load() impure inline_ref;


;; optionals_Opt3.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X0 -> tuple __tact_tuple_create_1((X0) v) asm """
    1 TUPLE
""";

;; optionals_Opt3.storage.fc
;;
;; Type: Struct2
;; Header: 0xb119629a
;; TLB: struct2#b119629a v:int257 = Struct2
;;

(slice, ((int))) $Struct2$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2971230874);
    var v'v = sc_0~load_int(257);
    return (sc_0, (v'v));
}

tuple $Struct2$_as_optional((int) v) inline {
    var (v'v) = v;
    return __tact_tuple_create_1(v'v);
}

;;
;; Type: Opt3
;;

(slice, ((tuple))) $Opt3$init$_load(slice sc_0) inline {
    var v'arg = sc_0~load_int(1) ? $Struct2$_as_optional(sc_0~$Struct2$_load()) : null();
    return (sc_0, (v'arg));
}

tuple $Opt3$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        (tuple $arg) = $sc~$Opt3$init$_load();
        $sc.end_parse();
        return $Opt3$_contract_init($arg);
    }
}

;;
;; Contract Opt3 functions
;;

tuple $Opt3$_contract_init(tuple $arg) impure inline {
    var ($arg) = $arg;
    tuple $self = null();
    return $self;
}

;;
;; Get methods of a Contract Opt3
;;

;;
;; Routing of a Contract Opt3
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Opt3$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    throw(130);
}
