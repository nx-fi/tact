#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; codeOf_ChildContract.headers.fc
;;
;; Header files for ChildContract
;; NOTE: declarations are sorted for optimal order
;;

;; $ChildContract$_store
builder $ChildContract$_store(builder build_0, (int) v) inline;

;; $ChildContract$_load
(slice, ((int))) $ChildContract$_load(slice sc_0) inline;

;; $ChildContract$init$_load
(slice, ((int))) $ChildContract$init$_load(slice sc_0) inline;

;; $ChildContract$_contract_init
(int) $ChildContract$_contract_init(int $value) impure inline;

;; $ChildContract$_contract_load
(int) $ChildContract$_contract_load() impure inline_ref;

;; $ChildContract$_contract_store
() $ChildContract$_contract_store((int) v) impure inline;

;; $ChildContract$_fun_value
((int), int) $ChildContract$_fun_value((int) $self) impure inline_ref;


;; codeOf_ChildContract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; codeOf_ChildContract.storage.fc
;;
;; Type: ChildContract
;;

builder $ChildContract$_store(builder build_0, (int) v) inline {
    var (v'value) = v;
    build_0 = build_0.store_int(v'value, 257);
    return build_0;
}

(slice, ((int))) $ChildContract$_load(slice sc_0) inline {
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'value));
}

(slice, ((int))) $ChildContract$init$_load(slice sc_0) inline {
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'value));
}

(int) $ChildContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ChildContract$_load();
    } else {
        (int $value) = $sc~$ChildContract$init$_load();
        $sc.end_parse();
        return $ChildContract$_contract_init($value);
    }
}

() $ChildContract$_contract_store((int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $ChildContract$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract ChildContract functions
;;

(int) $ChildContract$_contract_init(int $value) impure inline {
    var (($self'value)) = (0);
    $self'value = $value;
    return ($self'value);
}

((int), int) $ChildContract$_fun_value((int) $self) impure inline_ref {
    var (($self'value)) = $self;
    var $fresh$ret_179 = $self'value;
    return (($self'value), $fresh$ret_179);
}

;;
;; Get methods of a Contract ChildContract
;;

_ %value() method_id(121536) {
    var self = $ChildContract$_contract_load();
    var res = self~$ChildContract$_fun_value();
    return res;
}

;;
;; Routing of a Contract ChildContract
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'value) = $ChildContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        ;; Persist state
        $ChildContract$_contract_store(($self'value));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
