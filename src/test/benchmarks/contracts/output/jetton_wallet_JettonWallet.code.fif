// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/src/test/benchmarks/contracts/output/jetton_wallet_JettonWallet.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_load_address_opt
  DECLPROC __tact_store_address_opt
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $JettonTransfer$_load_without_opcode
  DECLPROC $JettonTransferInternal$_store
  DECLPROC $JettonTransferInternal$_store_cell
  DECLPROC $JettonTransferInternal$_load_without_opcode
  DECLPROC $JettonTransferInternal$_load_bounced
  DECLPROC $JettonNotification$_store
  DECLPROC $JettonNotification$_store_cell
  DECLPROC $JettonBurn$_load_without_opcode
  DECLPROC $JettonBurnNotification$_store
  DECLPROC $JettonBurnNotification$_store_cell
  DECLPROC $JettonBurnNotification$_load_bounced
  DECLPROC $JettonExcesses$_store
  DECLPROC $JettonExcesses$_store_cell
  DECLPROC $JettonWallet$_store
  DECLPROC $JettonWallet$_load
  DECLPROC $StdAddress$_get_workchain
  DECLPROC $JettonWalletData$_to_external
  DECLPROC $JettonWallet$init$_store
  DECLPROC $JettonWallet$init$_load
  DECLPROC $JettonWallet$_contract_init
  DECLPROC $JettonWallet$_contract_load
  DECLPROC $JettonWallet$_contract_store
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $JettonWallet$_init_child
  DECLPROC $JettonWalletData$_constructor_balance_owner_master_code
  DECLPROC $JettonWallet$_fun_get_wallet_data
  DECLPROC $DeployParameters$_constructor_value_mode_bounce_body_init
  DECLPROC $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload
  DECLPROC $SendParameters$_constructor_to_value_mode_bounce_body
  DECLPROC $JettonNotification$_constructor_queryId_amount_sender_forwardPayload
  DECLPROC $JettonExcesses$_constructor_queryId
  DECLPROC $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination
  97026 DECLMETHOD %get_wallet_data
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_load_address_opt PROCINLINE:<{
    DUP
    2 PLDU
    0 NEQINT
    IF:<{
      LDMSGADDR
      SWAP
    }>ELSE<{
      2 PUSHINT
      SDSKIPFIRST
      PUSHNULL
    }>
  }>
  __tact_store_address_opt PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      0 PUSHINT
      SWAP
      2 STU
    }>ELSE<{
      STSLICER
    }>
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $JettonTransfer$_load_without_opcode PROCREF:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    __tact_load_address_opt INLINECALLDICT
    SWAP
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    LDVARUINT16
    s6 s6 XCPU
    s1 s6 XCHG
    s1 s5 XCHG
    s1 s4 XCHG
    s3 s3 s0 XCHG3
  }>
  $JettonTransferInternal$_store PROCREF:<{
    395134233 PUSHINT
    s0 s7 XCHG2
    32 STU
    s1 s5 XCHG
    64 STU
    s0 s3 XCHG2
    STVARUINT16
    SWAP
    STSLICER
    SWAP
    __tact_store_address_opt INLINECALLDICT
    SWAP
    STVARUINT16
    SWAP
    STSLICER
  }>
  $JettonTransferInternal$_store_cell PROCINLINE:<{
    NEWC
    6 -ROLL
    $JettonTransferInternal$_store INLINECALLDICT
    ENDC
  }>
  $JettonTransferInternal$_load_without_opcode PROCREF:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    __tact_load_address_opt INLINECALLDICT
    SWAP
    LDVARUINT16
    s5 s5 XCPU
    s1 s5 XCHG
    s1 s4 XCHG
    s3 s3 s0 XCHG3
  }>
  $JettonTransferInternal$_load_bounced PROCINLINE:<{
    64 LDU
    LDVARUINT16
    -ROT
  }>
  $JettonNotification$_store PROCINLINE:<{
    1935855772 PUSHINT
    s0 s5 XCHG2
    32 STU
    s1 s3 XCHG
    64 STU
    SWAP
    STVARUINT16
    SWAP
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonNotification$_store_cell PROCINLINE:<{
    NEWC
    4 -ROLL
    $JettonNotification$_store INLINECALLDICT
    ENDC
  }>
  $JettonBurn$_load_without_opcode PROCINLINE:<{
    64 LDU
    LDVARUINT16
    LDMSGADDR
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    4 -ROLL
  }>
  $JettonBurnNotification$_store PROCINLINE:<{
    2078119902 PUSHINT
    s0 s5 XCHG2
    32 STU
    s1 s3 XCHG
    64 STU
    SWAP
    STVARUINT16
    SWAP
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonBurnNotification$_store_cell PROCINLINE:<{
    NEWC
    4 -ROLL
    $JettonBurnNotification$_store INLINECALLDICT
    ENDC
  }>
  $JettonBurnNotification$_load_bounced PROCINLINE:<{
    64 LDU
    LDVARUINT16
    -ROT
  }>
  $JettonExcesses$_store PROCINLINE:<{
    3576854235 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $JettonExcesses$_store_cell PROCINLINE:<{
    NEWC
    SWAP
    $JettonExcesses$_store INLINECALLDICT
    ENDC
  }>
  $JettonWallet$_store PROCINLINE:<{
    2SWAP
    STVARUINT16
    ROT
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonWallet$_load PROCINLINE:<{
    LDVARUINT16
    LDMSGADDR
    LDMSGADDR
    3 -ROLL
  }>
  $StdAddress$_get_workchain PROCINLINE:<{
    DROP
  }>
  $JettonWalletData$_to_external PROCINLINE:<{
  }>
  $JettonWallet$init$_store PROCINLINE:<{
    -ROT
    STSLICER
    SWAP
    STSLICER
  }>
  $JettonWallet$init$_load PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    -ROT
  }>
  $JettonWallet$_contract_init PROCINLINE:<{
    0 PUSHINT
    -ROT
  }>
  $JettonWallet$_contract_load PROCREF:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IFJMP:<{
      $JettonWallet$_load INLINECALLDICT
      1 3 BLKDROP2
    }>
    $JettonWallet$init$_load INLINECALLDICT
    s0 s2 XCHG
    ENDS
    SWAP
    $JettonWallet$_contract_init INLINECALLDICT
  }>
  $JettonWallet$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    3 -ROLL
    $JettonWallet$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
        NOP
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $JettonWallet$_init_child PROCREF:<{
    MYCODE
    NEWC
    FALSE
    SWAP
    1 STI
    2SWAP
    $JettonWallet$init$_store INLINECALLDICT
    ENDC
  }>
  $JettonWalletData$_constructor_balance_owner_master_code PROCINLINE:<{
  }>
  $JettonWallet$_fun_get_wallet_data PROCREF:<{
        MYCODE
    s3 s2 s(-2) PU2XC
    s3 s(-1) PUXC
    $JettonWalletData$_constructor_balance_owner_master_code INLINECALLDICT
  }>
  $DeployParameters$_constructor_value_mode_bounce_body_init PROCINLINE:<{
    s4 s5 XCHG
    s2 s4 XCHG
    s2 s3 XCHG
  }>
  $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload PROCINLINE:<{
  }>
  $SendParameters$_constructor_to_value_mode_bounce_body PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s0 s3 XCHG
  }>
  $JettonNotification$_constructor_queryId_amount_sender_forwardPayload PROCINLINE:<{
  }>
  $JettonExcesses$_constructor_queryId PROCINLINE:<{
  }>
  $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination PROCINLINE:<{
  }>
  %get_wallet_data PROC:<{
    $JettonWallet$_contract_load INLINECALLDICT
    $JettonWallet$_fun_get_wallet_data INLINECALLDICT
    3 4 BLKDROP2
    $JettonWalletData$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $JettonWallet$_contract_load INLINECALLDICT
    s0 s4 XCHG
    IFJMP:<{
      s0 s2 XCHG
      32 PUSHINT
      SDSKIPFIRST
      0 PUSHINT
      OVER
      SBITS
      31 GTINT
      IF:<{
        DROP
        32 LDU
        SWAP
      }>
      DUP
      395134233 PUSHINT
      EQUAL
      IFJMP:<{
        DROP
        $JettonTransferInternal$_load_bounced INLINECALLDICT
        2 1 BLKDROP2
        ADD
        s0 s2 XCHG
        $JettonWallet$_contract_store INLINECALLDICT
      }>
      2078119902 PUSHINT
      EQUAL
      IFJMP:<{
        $JettonBurnNotification$_load_bounced INLINECALLDICT
        2 1 BLKDROP2
        ADD
        s0 s2 XCHG
        $JettonWallet$_contract_store INLINECALLDICT
      }>
      4 BLKDROP
    }>
    s0 s2 XCHG
    32 PUSHINT
    LDUXQ NULLROTRIFNOT
    DROP
    OVER
    260734629 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $JettonTransfer$_load_without_opcode INLINECALLDICT
      s2 POP
      s6 POP
      __tact_context_get_sender INLINECALLDICT
      s8 s(-1) PUXC
      SDEQ
      705 THROWIFNOT
      __tact_context_get INLINECALLDICT
          LDMSGADDR   // load dest:MsgAddressInt
          LDGRAMS     // load value:CurrencyCollection
          ONE
          SDSKIPFIRST // skip extra currency collection
          LDGRAMS     // load ihr_fee
          LDGRAMS     // load fwd_fee, we'll be using this!
          DROP        // drop remaining Slice (with created_lt and created_at)
          // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
          // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
          6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context
          ZERO              // not masterchain
          GETORIGINALFWDFEE // (fwd_fee * 2^16) / first_frac, where
                            // first_frac is a value listed in config param 25
                            // of the blockchain: https://tonscan.org/config#25
      DROP
      s6 s3 XCPU
      SUB
      62972 PUSHINT
      OVER
      -1 GTINT
      THROWANYIFNOT
      60555 PUSHINT
      s3 PUSH
          NOP
          REWRITESTDADDR
      $StdAddress$_get_workchain INLINECALLDICT
      0 EQINT
      THROWANYIFNOT
      s4 s3 XCHG2
      0 PUSHINT
      64 PUSHINT
      TRUE
      s10 PUSH
      s8 s1 s3 XCHG3
      s9 s10 XCHG2
      $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload INLINECALLDICT
      $JettonTransferInternal$_store_cell INLINECALLDICT
      s1 s7 XCPU
      $JettonWallet$_init_child INLINECALLDICT
      s5 s6 XCHG
      s3 s6 XCHG
      $DeployParameters$_constructor_value_mode_bounce_body_init INLINECALLDICT
          4 1 BLKPUSH // pushes 2 copies of `init.code` and `init.data`
          HASHCU // `init.data` hash
          SWAP
          HASHCU // `init.code` hash
          SWAP2
          CDEPTH // `init.data` depth
          SWAP
          CDEPTH // `init.code` depth
          // Group 2: Calculating destination address
          // For almost identical logic and instructions,
          // see comments inside `contractHash()` function in contract.tact
          131380 INT // (2 << 16) | (1 << 8) | 0x34
          NEWC
          24 STU
          16 STU
          16 STU
          256 STU
          256 STU
          ONE HASHEXT_SHA256 // obtains hash part (account id) of the address
          // → Stack state
          // s0: destAddr(hash part)
          // s1: `init.data`
          // s2: `init.code`
          // s3 and below: `bounce`, `value`, `body`, `mode`
          // Group 3: Building a message (CommonMsgInfoRelaxed)
          s3 XCHG0           // swaps `bounce` with destAddr(hash part)
          NEWC
          b{01} STSLICECONST // store tag = $0 and ihr_disabled = true
          1 STI              // store `bounce`
          s1 s2 XCHG         // swap `init.data` with `init.code`, placing code on s1
          STREF              // store `init.code`
          STREF              // store `init.data`
          // Inline StateInit:
          b{00010000000000} STSLICECONST
          // 0 + 00 + 10 + 0 + 00000000
          // 1) 0 - bounced = false
          // 2) 00 - src = addr_none
          // 3) 10 - tag of addr_std (part of dest)
          // 4) 0 - Maybe Anycast = false
          // 5) 00000000 - workchain_id (part of dest)
          //
          256 STU     // store destAddr(hash part)
          SWAP        // Builder on top, `value` below
          STGRAMS     // store `value`
          105 PUSHINT // 1 + 4 + 4 + 64 + 32
          STZEROES    // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // Group 4: Continue building a message (CommonMsgInfoRelaxed into MessageRelaxed)
          // Remaining bits of MessageRelaxed:
          b{1000110} STSLICECONST
          // 10 + 0 + 0 + 1 + 1 + 0
          // 10 - Maybe (Either StateInit ^StateInit) = true false
          // 0 - split_depth:(Maybe (## 5)) = false
          // 0 = special:(Maybe TickTock) = false
          // 1 = code:(Maybe ^Cell) = true
          // 1 = data:(Maybe ^Cell) = true
          // 0 = library:(Maybe ^Cell) = false
          //
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC   // finalize the message
          // → Stack state
          // s0: Cell
          // s1: params.`mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG
      s0 s2 XCHG
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    OVER
    395134233 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $JettonTransferInternal$_load_without_opcode INLINECALLDICT
      s6 POP
      __tact_context_get_sender INLINECALLDICT
      s9 s(-1) PUXC
      SDEQ
      NOT
      IF:<{
        s2 s8 PUSH2
        $JettonWallet$_init_child INLINECALLDICT
        30948 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        2SWAP
        $global_contractAddress INLINECALLDICT
        SDEQ
        THROWANYIFNOT
      }>
      s6 s3 XCPU
      ADD
      __tact_context_get INLINECALLDICT
      OVER
          BALANCE FIRST
      OVER
      SUB
      15000000 PUSHINT
      TUCK
          MIN
      SUB
      15000000 PUSHINT
      ADD
      SUB
      4 -ROLL
          LDMSGADDR   // load dest:MsgAddressInt
          LDGRAMS     // load value:CurrencyCollection
          ONE
          SDSKIPFIRST // skip extra currency collection
          LDGRAMS     // load ihr_fee
          LDGRAMS     // load fwd_fee, we'll be using this!
          DROP        // drop remaining Slice (with created_lt and created_at)
          // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
          // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
          6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context
          ZERO              // not masterchain
          GETORIGINALFWDFEE // (fwd_fee * 2^16) / first_frac, where
                            // first_frac is a value listed in config param 25
                            // of the blockchain: https://tonscan.org/config#25
      s8 PUSH
      0 GTINT
      IF:<{
        s1 s8 XCPU
        SUB
        SWAP
        SUB
        1 PUSHINT
        FALSE
        s7 PUSH
        s7 s1 s3 XCHG3
        s6 s9 XCHG2
        $JettonNotification$_constructor_queryId_amount_sender_forwardPayload INLINECALLDICT
        $JettonNotification$_store_cell INLINECALLDICT
        s8 PUSH
        s0 s4 XCHG
        s3 s8 XCHG
        s5 s0 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            MUL // note that -1 * -1 wraps back to -1
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        s2 s3 XCHG
      }>ELSE<{
        DROP
        s7 POP
        s3 POP
        s4 POP
        DROP
      }>
      s2 PUSH
      ISNULL
      NOT
      IF:<{
        s3 PUSH
        0 GTINT
      }>ELSE<{
        FALSE
      }>
      IF:<{
        2 PUSHINT
        FALSE
        s0 s3 XCHG
        $JettonExcesses$_constructor_queryId INLINECALLDICT
        $JettonExcesses$_store_cell INLINECALLDICT
        s3 s5 XCHG
        s1 s5 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            MUL // note that -1 * -1 wraps back to -1
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        3 1 BLKDROP2
      }>
      s0 s2 XCHG
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    SWAP
    1499400124 PUSHINT
    EQUAL
    IFJMP:<{
      $JettonBurn$_load_without_opcode INLINECALLDICT
      DROP
      s3 POP
      __tact_context_get_sender INLINECALLDICT
      s5 s(-1) PUXC
      SDEQ
      705 THROWIFNOT
      s3 s3 XCPU
      SUB
      57978 PUSHINT
      OVER
      -1 GTINT
      THROWANYIFNOT
      0 PUSHINT
      64 PUSHINT
      s3 s5 s6 XC2PU
      TRUE
      s0 s6 XCHG
      $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination INLINECALLDICT
      $JettonBurnNotification$_store_cell INLINECALLDICT
      s6 PUSH
      s5 s4 s4 XCHG3
      $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          MUL // note that -1 * -1 wraps back to -1
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s2 XCHG
      $JettonWallet$_contract_store INLINECALLDICT
    }>
    4 BLKDROP
    130 THROW
  }>
}END>c
