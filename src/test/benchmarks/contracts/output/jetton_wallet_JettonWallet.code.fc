#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; jetton_wallet_JettonWallet.headers.fc
;;
;; Header files for JettonWallet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $JettonTransfer$_load_without_opcode
(slice, ((int, int, slice, slice, cell, int, slice))) $JettonTransfer$_load_without_opcode(slice sc_0) inline_ref;

;; $JettonTransferInternal$_store
builder $JettonTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $JettonTransferInternal$_store_cell
cell $JettonTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $JettonTransferInternal$_load_without_opcode
(slice, ((int, int, slice, slice, int, slice))) $JettonTransferInternal$_load_without_opcode(slice sc_0) inline_ref;

;; $JettonTransferInternal$_load_bounced
(slice, ((int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline;

;; $JettonNotification$_store
builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonNotification$_store_cell
cell $JettonNotification$_store_cell((int, int, slice, slice) v) inline;

;; $JettonBurn$_load_without_opcode
(slice, ((int, int, slice, cell))) $JettonBurn$_load_without_opcode(slice sc_0) inline;

;; $JettonBurnNotification$_store
builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonBurnNotification$_store_cell
cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v) inline;

;; $JettonBurnNotification$_load_bounced
(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline;

;; $JettonExcesses$_store
builder $JettonExcesses$_store(builder build_0, (int) v) inline;

;; $JettonExcesses$_store_cell
cell $JettonExcesses$_store_cell((int) v) inline;

;; $JettonWallet$_store
builder $JettonWallet$_store(builder build_0, (int, slice, slice) v) inline;

;; $JettonWallet$_load
(slice, ((int, slice, slice))) $JettonWallet$_load(slice sc_0) inline;

;; $StdAddress$_get_workchain
_ $StdAddress$_get_workchain((int, int) v) inline;

;; $JettonWalletData$_to_external
(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline;

;; $JettonWallet$init$_store
builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $JettonWallet$init$_load
(slice, ((slice, slice))) $JettonWallet$init$_load(slice sc_0) inline;

;; $JettonWallet$_contract_init
(int, slice, slice) $JettonWallet$_contract_init(slice $owner, slice $master) impure inline;

;; $JettonWallet$_contract_load
(int, slice, slice) $JettonWallet$_contract_load() impure inline_ref;

;; $JettonWallet$_contract_store
() $JettonWallet$_contract_store((int, slice, slice) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $JettonWallet$_init_child
(cell, cell) $JettonWallet$_init_child(slice $owner, slice $master) inline_ref;

;; $JettonWalletData$_constructor_balance_owner_master_code
((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_master_code(int $balance, slice $owner, slice $master, cell $code) inline;

;; $JettonWallet$_fun_get_wallet_data
((int, slice, slice), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((int, slice, slice) $self) impure inline_ref;

;; $DeployParameters$_constructor_value_mode_bounce_body_init
((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_bounce_body_init(int $value, int $mode, int $bounce, cell $body, (cell, cell) $init) inline;

;; $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload
((int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $JettonNotification$_constructor_queryId_amount_sender_forwardPayload
((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonExcesses$_constructor_queryId
((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline;

;; $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination
((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline;


;; jetton_wallet_JettonWallet.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) inline {
    if (cs.preload_uint(2) != 0) {
        slice raw = cs~load_msg_addr();
        return (cs, raw);
    } else {
        cs~skip_bits(2);
        return (cs, null());
    }
}

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        b = b.store_uint(0, 2);
        return b;
    } else {
        return b.store_slice(address);
    }
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_min(int $x, int $y) impure asm """
    MIN
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm """
    NOP
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

cell $global_myCode() impure asm """
    MYCODE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

() $global_deploy((int, cell, int, int, (cell, cell)) $params) impure asm """
    4 1 BLKPUSH // pushes 2 copies of `init.code` and `init.data`
    HASHCU // `init.data` hash
    SWAP
    HASHCU // `init.code` hash
    SWAP2
    CDEPTH // `init.data` depth
    SWAP
    CDEPTH // `init.code` depth

    // Group 2: Calculating destination address
    // For almost identical logic and instructions,
    // see comments inside `contractHash()` function in contract.tact
    131380 INT // (2 << 16) | (1 << 8) | 0x34
    NEWC
    24 STU
    16 STU
    16 STU
    256 STU
    256 STU
    ONE HASHEXT_SHA256 // obtains hash part (account id) of the address
    // → Stack state
    // s0: destAddr(hash part)
    // s1: `init.data`
    // s2: `init.code`
    // s3 and below: `bounce`, `value`, `body`, `mode`

    // Group 3: Building a message (CommonMsgInfoRelaxed)
    s3 XCHG0           // swaps `bounce` with destAddr(hash part)
    NEWC
    b{01} STSLICECONST // store tag = $0 and ihr_disabled = true
    1 STI              // store `bounce`
    s1 s2 XCHG         // swap `init.data` with `init.code`, placing code on s1
    STREF              // store `init.code`
    STREF              // store `init.data`
    // Inline StateInit:
    b{00010000000000} STSLICECONST
    // 0 + 00 + 10 + 0 + 00000000
    // 1) 0 - bounced = false
    // 2) 00 - src = addr_none
    // 3) 10 - tag of addr_std (part of dest)
    // 4) 0 - Maybe Anycast = false
    // 5) 00000000 - workchain_id (part of dest)
    //
    256 STU     // store destAddr(hash part)
    SWAP        // Builder on top, `value` below
    STGRAMS     // store `value`
    105 PUSHINT // 1 + 4 + 4 + 64 + 32
    STZEROES    // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at

    // Group 4: Continue building a message (CommonMsgInfoRelaxed into MessageRelaxed)
    // Remaining bits of MessageRelaxed:
    b{1000110} STSLICECONST
    // 10 + 0 + 0 + 1 + 1 + 0
    // 10 - Maybe (Either StateInit ^StateInit) = true false
    // 0 - split_depth:(Maybe (## 5)) = false
    // 0 = special:(Maybe TickTock) = false
    // 1 = code:(Maybe ^Cell) = true
    // 1 = data:(Maybe ^Cell) = true
    // 0 = library:(Maybe ^Cell) = false
    //
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC   // finalize the message
    // → Stack state
    // s0: Cell
    // s1: params.`mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG
""";

(int, int) $global_parseStdAddress(slice $slice) impure asm """
    REWRITESTDADDR
""";

slice $Address$_fun_asSlice(slice $self) impure asm """
    NOP
""";

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack — first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // (fwd_fee * 2^16) / first_frac, where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonscan.org/config#25
""";

;; jetton_wallet_JettonWallet.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: DeployParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 bounce:bool init:StateInit{code:^cell,data:^cell} = DeployParameters
;;

((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_bounce_body_init(int $value, int $mode, int $bounce, cell $body, (cell, cell) $init) inline {
    return ($mode, $body, $value, $bounce, $init);
}

;;
;; Type: StdAddress
;; TLB: _ workchain:int8 address:uint256 = StdAddress
;;

_ $StdAddress$_get_workchain((int, int) v) inline {
    var (v'workchain, v'address) = v;
    return v'workchain;
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:int257 owner:address master:address code:^cell = JettonWalletData
;;

(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline {
    var (v'balance, v'owner, v'master, v'code) = v; 
    return (v'balance, v'owner, v'master, v'code);
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_master_code(int $balance, slice $owner, slice $master, cell $code) inline {
    return ($balance, $owner, $master, $code);
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address responseDestination:Maybe address customPayload:Maybe ^cell forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransfer
;;

(slice, ((int, int, slice, slice, cell, int, slice))) $JettonTransfer$_load_without_opcode(slice sc_0) inline_ref {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'destination = sc_0~load_msg_addr();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'customPayload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forwardTonAmount = sc_0~load_varuint16();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'destination, v'responseDestination, v'customPayload, v'forwardTonAmount, v'forwardPayload));
}

;;
;; Type: JettonTransferInternal
;; Header: 0x178d4519
;; TLB: jetton_transfer_internal#178d4519 queryId:uint64 amount:coins sender:address responseDestination:Maybe address forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransferInternal
;;

builder $JettonTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'queryId, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = build_0.store_varuint16(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $JettonTransferInternal$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, slice, int, slice))) $JettonTransferInternal$_load_without_opcode(slice sc_0) inline_ref {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'sender = sc_0~load_msg_addr();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'forwardTonAmount = sc_0~load_varuint16();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload));
}

(slice, ((int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'amount));
}

((int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline {
    return ($queryId, $amount, $sender, $responseDestination, $forwardTonAmount, $forwardPayload);
}

;;
;; Type: JettonNotification
;; Header: 0x7362d09c
;; TLB: jetton_notification#7362d09c queryId:uint64 amount:coins sender:address forwardPayload:remainder<slice> = JettonNotification
;;

builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 1935855772, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonNotification$_store_cell((int, int, slice, slice) v) inline {
    return $JettonNotification$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline {
    return ($queryId, $amount, $sender, $forwardPayload);
}

;;
;; Type: JettonBurn
;; Header: 0x595f07bc
;; TLB: jetton_burn#595f07bc queryId:uint64 amount:coins responseDestination:address customPayload:Maybe ^cell = JettonBurn
;;

(slice, ((int, int, slice, cell))) $JettonBurn$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'responseDestination = sc_0~load_msg_addr();
    var v'customPayload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'queryId, v'amount, v'responseDestination, v'customPayload));
}

;;
;; Type: JettonBurnNotification
;; Header: 0x7bdd97de
;; TLB: jetton_burn_notification#7bdd97de queryId:uint64 amount:coins sender:address responseDestination:address = JettonBurnNotification
;;

builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'responseDestination) = v;
    build_0 = store_uint(build_0, 2078119902, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'responseDestination);
    return build_0;
}

cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v) inline {
    return $JettonBurnNotification$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'amount));
}

((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline {
    return ($queryId, $amount, $sender, $responseDestination);
}

;;
;; Type: JettonExcesses
;; Header: 0xd53276db
;; TLB: jetton_excesses#d53276db queryId:uint64 = JettonExcesses
;;

builder $JettonExcesses$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $JettonExcesses$_store_cell((int) v) inline {
    return $JettonExcesses$_store(begin_cell(), v).end_cell();
}

((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: JettonWallet
;;

builder $JettonWallet$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'balance, v'owner, v'master) = v;
    build_0 = build_0.store_varuint16(v'balance);
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'master);
    return build_0;
}

(slice, ((int, slice, slice))) $JettonWallet$_load(slice sc_0) inline {
    var v'balance = sc_0~load_varuint16();
    var v'owner = sc_0~load_msg_addr();
    var v'master = sc_0~load_msg_addr();
    return (sc_0, (v'balance, v'owner, v'master));
}

builder $JettonWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'master) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'master);
    return build_0;
}

(slice, ((slice, slice))) $JettonWallet$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'master = sc_0~load_msg_addr();
    return (sc_0, (v'owner, v'master));
}

(int, slice, slice) $JettonWallet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonWallet$_load();
    } else {
        (slice $owner, slice $master) = $sc~$JettonWallet$init$_load();
        $sc.end_parse();
        return $JettonWallet$_contract_init($owner, $master);
    }
}

() $JettonWallet$_contract_store((int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $JettonWallet$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $JettonWallet$_init_child(slice $owner, slice $master) inline_ref {
    ;; Build init code cell

    ;; Contract Code: JettonWallet
    cell init_code = my_code();

    ;; Build init data cell

    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $JettonWallet$init$_store(b, ($owner, $master));
    return (init_code, b.end_cell());
}

;;
;; Contract JettonWallet functions
;;

(int, slice, slice) $JettonWallet$_contract_init(slice $owner, slice $master) impure inline {
    var (($self'balance, $self'owner, $self'master)) = (null(), null(), null());
    $self'balance = 0;
    $self'owner = $owner;
    $self'master = $master;
    return ($self'balance, $self'owner, $self'master);
}

((int, slice, slice), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((int, slice, slice) $self) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = $self;
    var $fresh$ret_23 = $JettonWalletData$_constructor_balance_owner_master_code($self'balance, $self'owner, $self'master, $global_myCode());
    return (($self'balance, $self'owner, $self'master), $fresh$ret_23);
}

;;
;; Get methods of a Contract JettonWallet
;;

_ %get_wallet_data() method_id(97026) {
    var self = $JettonWallet$_contract_load();
    var res = self~$JettonWallet$_fun_get_wallet_data();
    return $JettonWalletData$_to_external(res);
}

;;
;; Routing of a Contract JettonWallet
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'balance, $self'owner, $self'master) = $JettonWallet$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF prefix of a bounced message
        in_msg~skip_bits(32);
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }
        ;; Bounced handler for JettonTransferInternal message
        if (op == 0x178d4519) {
            var ($msg'queryId, $msg'amount) = in_msg~$JettonTransferInternal$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            ;; Persist state
            $JettonWallet$_contract_store(($self'balance, $self'owner, $self'master));
            return ();
        }
        
        ;; Bounced handler for JettonBurnNotification message
        if (op == 0x7bdd97de) {
            var ($msg'queryId, $msg'amount) = in_msg~$JettonBurnNotification$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            ;; Persist state
            $JettonWallet$_contract_store(($self'balance, $self'owner, $self'master));
            return ();
        }
        
        return ();
    }
    var (op, _) = in_msg~load_uint_quiet(32);
    ;; Receive JettonTransfer message
    if (op == 0xf8a7ea5) {
        var ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload) = in_msg~$JettonTransfer$_load_without_opcode();
        throw_unless(705, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        int $totalFees = (((2 * ($Context$_fun_readForwardFee(__tact_context_get()) + 15000000)) + 15000000) + $msg'forwardTonAmount);
        $self'balance = $self'balance - $msg'amount;
        throw_unless(62972, ($self'balance >= 0));
        throw_unless(60555, ($StdAddress$_get_workchain($global_parseStdAddress($Address$_fun_asSlice($msg'destination))) == 0));
        $global_deploy($DeployParameters$_constructor_value_mode_bounce_body_init(0, 64, true, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload($msg'queryId, $msg'amount, $self'owner, $msg'responseDestination, $msg'forwardTonAmount, $msg'forwardPayload)), $JettonWallet$_init_child($msg'destination, $self'master)));
        ;; Persist state
        $JettonWallet$_contract_store(($self'balance, $self'owner, $self'master));
        return ();
    }
    
    ;; Receive JettonTransferInternal message
    if (op == 0x178d4519) {
        var ($msg'queryId, $msg'amount, $msg'sender, $msg'responseDestination, $msg'forwardTonAmount, $msg'forwardPayload) = in_msg~$JettonTransferInternal$_load_without_opcode();
        if (( ~ equal_slices_bits($self'master, __tact_context_get_sender()) )) {
            var ($init'code, $init'data) = $JettonWallet$_init_child($msg'sender, $self'master);
            throw_unless(30948, ( equal_slices_bits(__tact_context_get_sender(), $global_contractAddress(($init'code, $init'data))) ));
        }
        $self'balance = $self'balance + $msg'amount;
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $msgValue = $ctx'value;
        int $tonBalanceBeforeMsg = ($global_myBalance() - $msgValue);
        int $storageFee = (15000000 - $global_min($tonBalanceBeforeMsg, 15000000));
        $msgValue = $msgValue - ($storageFee + 15000000);
        int $fwd_fee = $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw));
        if (($msg'forwardTonAmount > 0)) {
            $msgValue = (($msgValue - $msg'forwardTonAmount) - $fwd_fee);
            $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'owner, $msg'forwardTonAmount, 1, false, $JettonNotification$_store_cell($JettonNotification$_constructor_queryId_amount_sender_forwardPayload($msg'queryId, $msg'amount, $msg'sender, $msg'forwardPayload))));
        }
        if (( ((~ null?($msg'responseDestination))) ? (($msgValue > 0)) : (false) )) {
            $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'responseDestination, $msgValue, 2, false, $JettonExcesses$_store_cell($JettonExcesses$_constructor_queryId($msg'queryId))));
        }
        ;; Persist state
        $JettonWallet$_contract_store(($self'balance, $self'owner, $self'master));
        return ();
    }
    
    ;; Receive JettonBurn message
    if (op == 0x595f07bc) {
        var ($msg'queryId, $msg'amount, $msg'responseDestination, $msg'customPayload) = in_msg~$JettonBurn$_load_without_opcode();
        throw_unless(705, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        $self'balance = $self'balance - $msg'amount;
        throw_unless(57978, ($self'balance >= 0));
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'master, 0, 64, true, $JettonBurnNotification$_store_cell($JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination($msg'queryId, $msg'amount, $self'owner, $msg'responseDestination))));
        ;; Persist state
        $JettonWallet$_contract_store(($self'balance, $self'owner, $self'master));
        return ();
    }
    
    throw(130);
}
