#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; inheritance_Contract.headers.fc
;;
;; Header files for Contract
;; NOTE: declarations are sorted for optimal order
;;

;; $Contract$_contract_init
tuple $Contract$_contract_init() impure inline;

;; $Contract$_contract_load
tuple $Contract$_contract_load() impure inline;

;; $Contract$_fun_executeAbs
(tuple, int) $Contract$_fun_executeAbs(tuple $self) impure inline_ref;

;; $Contract$_fun_execute
(tuple, int) $Contract$_fun_execute(tuple $self) impure inline_ref;

;; $Contract$_fun_ex
(tuple, int) $Contract$_fun_ex(tuple $self) impure inline_ref;

;; $Contract$_fun_ex2
(tuple, int) $Contract$_fun_ex2(tuple $self) impure inline_ref;

;; $Contract$_fun_const1
(tuple, int) $Contract$_fun_const1(tuple $self) impure inline_ref;

;; $Contract$_fun_const2
(tuple, int) $Contract$_fun_const2(tuple $self) impure inline_ref;

;; $Contract$_fun_const3
(tuple, int) $Contract$_fun_const3(tuple $self) impure inline_ref;

;; $Contract$_fun_const4
(tuple, int) $Contract$_fun_const4(tuple $self) impure inline_ref;

;; $Contract$_fun_loadC2
(tuple, int) $Contract$_fun_loadC2(tuple $self) impure inline_ref;

;; $Contract$_fun_const5
(tuple, int) $Contract$_fun_const5(tuple $self) impure inline_ref;


;; inheritance_Contract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

;; inheritance_Contract.storage.fc
;;
;; Type: Contract
;; TLB: _  = Contract
;;

tuple $Contract$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        return $Contract$_contract_init();
    }
}

;;
;; Contract Contract functions
;;

tuple $Contract$_contract_init() impure inline {
    tuple $self = null();
    return $self;
}

(tuple, int) $Contract$_fun_executeAbs(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_5 = 1000;
    return ($self, $fresh$ret_5);
}

(tuple, int) $Contract$_fun_execute(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_6 = 2;
    return ($self, $fresh$ret_6);
}

(tuple, int) $Contract$_fun_ex(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_7 = $self~$Contract$_fun_execute();
    return ($self, $fresh$ret_7);
}

(tuple, int) $Contract$_fun_ex2(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_8 = $self~$Contract$_fun_executeAbs();
    return ($self, $fresh$ret_8);
}

(tuple, int) $Contract$_fun_const1(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_9 = 10;
    return ($self, $fresh$ret_9);
}

(tuple, int) $Contract$_fun_const2(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_10 = 20;
    return ($self, $fresh$ret_10);
}

(tuple, int) $Contract$_fun_const3(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_11 = 30;
    return ($self, $fresh$ret_11);
}

(tuple, int) $Contract$_fun_const4(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_12 = 40;
    return ($self, $fresh$ret_12);
}

(tuple, int) $Contract$_fun_loadC2(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_14 = 50;
    return ($self, $fresh$ret_14);
}

(tuple, int) $Contract$_fun_const5(tuple $self) impure inline_ref {
    var ($self) = $self;
    var $fresh$ret_13 = $self~$Contract$_fun_loadC2();
    return ($self, $fresh$ret_13);
}

;;
;; Get methods of a Contract Contract
;;

_ %ex() method_id(68416) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_ex();
    return res;
}

_ %ex2() method_id(124794) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_ex2();
    return res;
}

_ %const1() method_id(95714) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const1();
    return res;
}

_ %const2() method_id(83329) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const2();
    return res;
}

_ %const3() method_id(87456) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const3();
    return res;
}

_ %const4() method_id(75079) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const4();
    return res;
}

_ %const5() method_id(79206) {
    var self = $Contract$_contract_load();
    var res = self~$Contract$_fun_const5();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract Contract
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var $self = $Contract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}