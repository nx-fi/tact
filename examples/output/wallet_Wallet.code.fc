#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; wallet_Wallet.headers.fc
;;
;; Header files for Wallet
;; NOTE: declarations are sorted for optimal order
;;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, int, slice, int, cell) v) inline;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, int, slice, int, cell) v) inline;

;; $Transfer$_load
(slice, ((int, int, slice, int, cell))) $Transfer$_load(slice sc_0) inline;

;; $TransferMessage$_load_without_opcode
(slice, ((slice, (int, int, slice, int, cell)))) $TransferMessage$_load_without_opcode(slice sc_0) inline;

;; $Wallet$_store
builder $Wallet$_store(builder build_0, (int, int, int) v) inline;

;; $Wallet$_load
(slice, ((int, int, int))) $Wallet$_load(slice sc_0) inline;

;; $Wallet$init$_store
builder $Wallet$init$_store(builder build_0, (int, int) v) inline;

;; $Wallet$init$_load
(slice, ((int, int))) $Wallet$init$_load(slice sc_0) inline;

;; $Wallet$_contract_init
(int, int, int) $Wallet$_contract_init(int $key, int $walletId) impure inline;

;; $Wallet$_contract_load
(int, int, int) $Wallet$_contract_load() impure inline_ref;

;; $Wallet$_contract_store
() $Wallet$_contract_store((int, int, int) v) impure inline;

;; $Wallet$_init_child
(cell, cell) $Wallet$_init_child(int $key, int $walletId) inline_ref;

;; $Wallet$_fun_publicKey
((int, int, int), int) $Wallet$_fun_publicKey((int, int, int) $self) impure inline_ref;

;; $Wallet$_fun_walletId
((int, int, int), int) $Wallet$_fun_walletId((int, int, int) $self) impure inline_ref;

;; $Wallet$_fun_seqno
((int, int, int), int) $Wallet$_fun_seqno((int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_value_to_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_value_to_mode_body(int $value, slice $to, int $mode, cell $body) inline;


;; wallet_Wallet.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

int $global_checkSignature(int $hash, slice $signature, int $public_key) impure asm """
    CHKSIGNU
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

int $Cell$_fun_hash(cell $self) impure asm """
    HASHCU
""";

;; wallet_Wallet.storage.fc
;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_value_to_mode_body(int $value, slice $to, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, true);
}

;;
;; Type: Transfer
;; TLB: _ seqno:uint32 mode:uint8 to:address amount:coins body:Maybe ^cell = Transfer
;;

builder $Transfer$_store(builder build_0, (int, int, slice, int, cell) v) inline {
    var (v'seqno, v'mode, v'to, v'amount, v'body) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'mode, 8);
    build_0 = build_0.store_slice(v'to);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = ~ null?(v'body) ? build_0.store_int(true, 1).store_ref(v'body) : build_0.store_int(false, 1);
    return build_0;
}

cell $Transfer$_store_cell((int, int, slice, int, cell) v) inline {
    return $Transfer$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, int, cell))) $Transfer$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'mode = sc_0~load_uint(8);
    var v'to = sc_0~load_msg_addr();
    var v'amount = sc_0~load_varuint16();
    var v'body = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'seqno, v'mode, v'to, v'amount, v'body));
}

;;
;; Type: TransferMessage
;; Header: 0x0000007b
;; TLB: transfer_message#0000007b signature:^slice transfer:Transfer{seqno:uint32,mode:uint8,to:address,amount:coins,body:Maybe ^cell} = TransferMessage
;;

(slice, ((slice, (int, int, slice, int, cell)))) $TransferMessage$_load_without_opcode(slice sc_0) inline {
    var v'signature = sc_0~load_ref().begin_parse();
    var v'transfer = sc_0~$Transfer$_load();
    return (sc_0, (v'signature, v'transfer));
}

;;
;; Type: Wallet
;;

builder $Wallet$_store(builder build_0, (int, int, int) v) inline {
    var (v'seqno, v'key, v'walletId) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = build_0.store_uint(v'key, 256);
    build_0 = build_0.store_uint(v'walletId, 64);
    return build_0;
}

(slice, ((int, int, int))) $Wallet$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'key = sc_0~load_uint(256);
    var v'walletId = sc_0~load_uint(64);
    return (sc_0, (v'seqno, v'key, v'walletId));
}

builder $Wallet$init$_store(builder build_0, (int, int) v) inline {
    var (v'key, v'walletId) = v;
    build_0 = build_0.store_int(v'key, 257);
    build_0 = build_0.store_int(v'walletId, 257);
    return build_0;
}

(slice, ((int, int))) $Wallet$init$_load(slice sc_0) inline {
    var v'key = sc_0~load_int(257);
    var v'walletId = sc_0~load_int(257);
    return (sc_0, (v'key, v'walletId));
}

(int, int, int) $Wallet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Wallet$_load();
    } else {
        (int $key, int $walletId) = $sc~$Wallet$init$_load();
        $sc.end_parse();
        return $Wallet$_contract_init($key, $walletId);
    }
}

() $Wallet$_contract_store((int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Wallet$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $Wallet$_init_child(int $key, int $walletId) inline_ref {
    ;; Build init code cell

    ;; Contract Code: Wallet
    cell init_code = my_code();

    ;; Build init data cell

    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $Wallet$init$_store(b, ($key, $walletId));
    return (init_code, b.end_cell());
}

;;
;; Contract Wallet functions
;;

(int, int, int) $Wallet$_contract_init(int $key, int $walletId) impure inline {
    var (($self'seqno, $self'key, $self'walletId)) = (0, null(), null());
    $self'key = $key;
    $self'walletId = $walletId;
    return ($self'seqno, $self'key, $self'walletId);
}

((int, int, int), int) $Wallet$_fun_publicKey((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    var $fresh$ret_52 = $self'key;
    return (($self'seqno, $self'key, $self'walletId), $fresh$ret_52);
}

((int, int, int), int) $Wallet$_fun_walletId((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    var $fresh$ret_53 = $self'walletId;
    return (($self'seqno, $self'key, $self'walletId), $fresh$ret_53);
}

((int, int, int), int) $Wallet$_fun_seqno((int, int, int) $self) impure inline_ref {
    var (($self'seqno, $self'key, $self'walletId)) = $self;
    var $fresh$ret_54 = $self'seqno;
    return (($self'seqno, $self'key, $self'walletId), $fresh$ret_54);
}

;;
;; Get methods of a Contract Wallet
;;

_ %publicKey() method_id(86520) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_publicKey();
    return res;
}

_ %walletId() method_id(114762) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_walletId();
    return res;
}

_ %seqno() method_id(85143) {
    var self = $Wallet$_contract_load();
    var res = self~$Wallet$_fun_seqno();
    return res;
}

;;
;; Routing of a Contract Wallet
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'seqno, $self'key, $self'walletId) = $Wallet$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Fallback bounce receiver
        ;; Skip 0xFFFFFFFF prefix of the bounced message
        in_msg~skip_bits(32);
        slice $msg = in_msg;
        ;; Persist state
        $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
        return ();
    }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg.preload_uint(32);
        ;; Receive TransferMessage message
        if (op == 123) {
            in_msg~skip_bits(32);
            var ($msg'signature, ($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)) = in_msg~$TransferMessage$_load_without_opcode();
            int $op_hash = $Cell$_fun_hash($Transfer$_store_cell(($msg'transfer'seqno, $msg'transfer'mode, $msg'transfer'to, $msg'transfer'amount, $msg'transfer'body)));
            throw_unless(48401, $global_checkSignature($op_hash, $msg'signature, $self'key));
            throw_unless(17654, ($msg'transfer'seqno == $self'seqno));
            $self'seqno = ($self'seqno + 1);
            $global_send($SendParameters$_constructor_value_to_mode_body($msg'transfer'amount, $msg'transfer'to, $msg'transfer'mode, $msg'transfer'body));
            ;; Persist state
            $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
            return ();
        }
        
    }
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $self'seqno = ($self'seqno + 1);
        ;; Persist state
        $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
        return ();
    }
    ;; Empty Receiver and Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            ;; Persist state
            $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
            return ();
        }
        ;; Receive "notify" message
        if (text_op == 0x0e235726108b5700d0369dd7167f6affb806a7e04059375dd0e0fb24971e72b2) {
            $self'seqno = ($self'seqno + 1);
            ;; Persist state
            $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
            return ();
        }
        ;; Receive "你好ж" message
        if (text_op == 0x7443c448982f5b8edf2b2d034b316f96dc6a7c2ab79598a43348c152d4cadd26) {
            $self'seqno = ($self'seqno + 1);
            ;; Persist state
            $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
            return ();
        }
        ;; Receive "duplicate" message
        if (text_op == 0x9ca0f1855174e32e8fd378df56a6e4f6c40e4dfcb6090e49812f7b1e26214bf9) {
            var ($walletInit'code, $walletInit'data) = $Wallet$_init_child($self'key, ($self'walletId + 1));
            ;; Persist state
            $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
            return ();
        }
    }
    ;; Receiver fallback
    slice $msg = in_msg;
    $self'seqno = ($self'seqno + 1);
    ;; Persist state
    $Wallet$_contract_store(($self'seqno, $self'key, $self'walletId));
    return ();
}
