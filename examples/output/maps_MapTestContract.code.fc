#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; maps_MapTestContract.headers.fc
;;
;; Header files for MapTestContract
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_uint_uint
int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_uint_uint
(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $SetIntMap1$_load_without_opcode
(slice, ((int, int))) $SetIntMap1$_load_without_opcode(slice sc_0) inline;

;; $SetIntMap2$_load_without_opcode
(slice, ((int, int))) $SetIntMap2$_load_without_opcode(slice sc_0) inline;

;; $SetIntMap3$_load_without_opcode
(slice, ((int, cell))) $SetIntMap3$_load_without_opcode(slice sc_0) inline;

;; $SomeStruct$_store
builder $SomeStruct$_store(builder build_0, (int) v) inline;

;; $SomeStruct$_store_cell
cell $SomeStruct$_store_cell((int) v) inline;

;; $SomeStruct$_not_null
((int)) $SomeStruct$_not_null(tuple v) inline;

;; $SomeStruct$_store_opt
cell $SomeStruct$_store_opt(tuple v) inline;

;; $SomeStruct$_load
(slice, ((int))) $SomeStruct$_load(slice sc_0) inline;

;; $SomeStruct$_as_optional
tuple $SomeStruct$_as_optional((int) v) inline;

;; $SomeStruct$_load_opt
tuple $SomeStruct$_load_opt(cell cl) inline;

;; $SetIntMap4$_load_without_opcode
(slice, ((int, tuple))) $SetIntMap4$_load_without_opcode(slice sc_0) inline;

;; $SetAddrMap1$_load_without_opcode
(slice, ((slice, int))) $SetAddrMap1$_load_without_opcode(slice sc_0) inline;

;; $SetAddrMap2$_load_without_opcode
(slice, ((slice, int))) $SetAddrMap2$_load_without_opcode(slice sc_0) inline;

;; $SetAddrMap3$_load_without_opcode
(slice, ((slice, cell))) $SetAddrMap3$_load_without_opcode(slice sc_0) inline;

;; $SetAddrMap4$_load_without_opcode
(slice, ((slice, tuple))) $SetAddrMap4$_load_without_opcode(slice sc_0) inline;

;; $MapTestContract$_store
builder $MapTestContract$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell) v) inline;

;; $MapTestContract$_load
(slice, ((cell, cell, cell, cell, cell, cell, cell, cell))) $MapTestContract$_load(slice sc_0) inline;

;; $SomeStruct$_to_tuple
tuple $SomeStruct$_to_tuple(((int)) v) inline;

;; $SomeStruct$_to_opt_tuple
tuple $SomeStruct$_to_opt_tuple(tuple v) inline;

;; $SomeStruct$_to_opt_external
tuple $SomeStruct$_to_opt_external(tuple v) inline;

;; $MapTestContract$_contract_init
(cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_init() impure inline;

;; $MapTestContract$_contract_load
(cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_load() impure inline_ref;

;; $MapTestContract$_contract_store
() $MapTestContract$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline;

;; $MapTestContract$_fun_intMap1
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap1((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_intMap1Value
((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_intMap1Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref;

;; $MapTestContract$_fun_intMap2
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap2((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_intMap2Value
((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_intMap2Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref;

;; $MapTestContract$_fun_intMap3
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap3((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_intMap3Value
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap3Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref;

;; $MapTestContract$_fun_intMap4
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap4((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_intMap4Value
((cell, cell, cell, cell, cell, cell, cell, cell), tuple) $MapTestContract$_fun_intMap4Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref;

;; $MapTestContract$_fun_addrMap1
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap1((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_addrMap1Value
((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_addrMap1Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref;

;; $MapTestContract$_fun_addrMap2
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap2((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_addrMap2Value
((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_addrMap2Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref;

;; $MapTestContract$_fun_addrMap3
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap3((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_addrMap3Value
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap3Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref;

;; $MapTestContract$_fun_addrMap4
((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap4((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $MapTestContract$_fun_addrMap4Value
((cell, cell, cell, cell, cell, cell, cell, cell), tuple) $MapTestContract$_fun_addrMap4Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref;


;; maps_MapTestContract.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

((cell), ()) __tact_dict_set_ref(cell dict, int key_len, slice index, cell value) asm(value index dict key_len) """
    DICTSETREF
""";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGET NULLSWAPIFNOT
""";

(cell, int) __tact_dict_get_ref(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGETREF NULLSWAPIFNOT
""";

forall X0 -> tuple __tact_tuple_create_1((X0) v) asm """
    1 TUPLE
""";

forall X0 -> (X0) __tact_tuple_destroy_1(tuple v) asm """
    1 UNTUPLE
""";

int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get_ref(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return __tact_dict_set_ref(d, kl, k, v);
    }
}

int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline {
    var (r, ok) = udict_get?(d, kl, k);
    if (ok) {
        return r~load_uint(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = udict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (udict_set_builder(d, kl, k, begin_cell().store_uint(v, vl)), ());
    }
}

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

;; maps_MapTestContract.storage.fc
;;
;; Type: SetIntMap1
;; Header: 0x5a04a318
;; TLB: set_int_map1#5a04a318 key:int257 value:Maybe int257 = SetIntMap1
;;

(slice, ((int, int))) $SetIntMap1$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap2
;; Header: 0x6125cef6
;; TLB: set_int_map2#6125cef6 key:int257 value:Maybe bool = SetIntMap2
;;

(slice, ((int, int))) $SetIntMap2$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetIntMap3
;; Header: 0xd7689249
;; TLB: set_int_map3#d7689249 key:int257 value:Maybe ^cell = SetIntMap3
;;

(slice, ((int, cell))) $SetIntMap3$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SomeStruct
;; TLB: _ value:int257 = SomeStruct
;;

builder $SomeStruct$_store(builder build_0, (int) v) inline {
    var (v'value) = v;
    build_0 = build_0.store_int(v'value, 257);
    return build_0;
}

cell $SomeStruct$_store_cell((int) v) inline {
    return $SomeStruct$_store(begin_cell(), v).end_cell();
}

((int)) $SomeStruct$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'value) = __tact_tuple_destroy_1(v);
    return (vvv'value);
}

cell $SomeStruct$_store_opt(tuple v) inline {
    if (null?(v)) {
        return null();
    }
    return $SomeStruct$_store_cell($SomeStruct$_not_null(v));
}

(slice, ((int))) $SomeStruct$_load(slice sc_0) inline {
    var v'value = sc_0~load_int(257);
    return (sc_0, (v'value));
}

tuple $SomeStruct$_as_optional((int) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $SomeStruct$_as_optional(sc~$SomeStruct$_load());
}

tuple $SomeStruct$_to_tuple(((int)) v) inline {
    var (v'value) = v;
    return __tact_tuple_create_1(v'value);
}

tuple $SomeStruct$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $SomeStruct$_to_tuple($SomeStruct$_not_null(v)); 
}

tuple $SomeStruct$_to_opt_external(tuple v) inline {
    var loaded = $SomeStruct$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: SetIntMap4
;; Header: 0x16d453c5
;; TLB: set_int_map4#16d453c5 key:int257 value:Maybe SomeStruct{value:int257} = SetIntMap4
;;

(slice, ((int, tuple))) $SetIntMap4$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_int(257);
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap1
;; Header: 0x684e5e4d
;; TLB: set_addr_map1#684e5e4d key:address value:Maybe int257 = SetAddrMap1
;;

(slice, ((slice, int))) $SetAddrMap1$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_msg_addr();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(257) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap2
;; Header: 0x2533e390
;; TLB: set_addr_map2#2533e390 key:address value:Maybe bool = SetAddrMap2
;;

(slice, ((slice, int))) $SetAddrMap2$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_msg_addr();
    var v'value = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap3
;; Header: 0xfee42706
;; TLB: set_addr_map3#fee42706 key:address value:Maybe ^cell = SetAddrMap3
;;

(slice, ((slice, cell))) $SetAddrMap3$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_msg_addr();
    var v'value = sc_0~load_int(1) ? sc_0~load_ref() : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: SetAddrMap4
;; Header: 0x645c6979
;; TLB: set_addr_map4#645c6979 key:address value:Maybe SomeStruct{value:int257} = SetAddrMap4
;;

(slice, ((slice, tuple))) $SetAddrMap4$_load_without_opcode(slice sc_0) inline {
    var v'key = sc_0~load_msg_addr();
    var v'value = sc_0~load_int(1) ? $SomeStruct$_as_optional(sc_0~$SomeStruct$_load()) : null();
    return (sc_0, (v'key, v'value));
}

;;
;; Type: MapTestContract
;;

builder $MapTestContract$_store(builder build_0, (cell, cell, cell, cell, cell, cell, cell, cell) v) inline {
    var (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4) = v;
    build_0 = build_0.store_dict(v'intMap1);
    var build_1 = begin_cell();
    build_1 = build_1.store_dict(v'intMap2);
    build_1 = build_1.store_dict(v'intMap3);
    build_1 = build_1.store_dict(v'intMap4);
    var build_2 = begin_cell();
    build_2 = build_2.store_dict(v'addrMap1);
    build_2 = build_2.store_dict(v'addrMap2);
    build_2 = build_2.store_dict(v'addrMap3);
    build_2 = build_2.store_dict(v'addrMap4);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((cell, cell, cell, cell, cell, cell, cell, cell))) $MapTestContract$_load(slice sc_0) inline {
    var v'intMap1 = sc_0~load_dict();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'intMap2 = sc_1~load_dict();
    var v'intMap3 = sc_1~load_dict();
    var v'intMap4 = sc_1~load_dict();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'addrMap1 = sc_2~load_dict();
    var v'addrMap2 = sc_2~load_dict();
    var v'addrMap3 = sc_2~load_dict();
    var v'addrMap4 = sc_2~load_dict();
    return (sc_0, (v'intMap1, v'intMap2, v'intMap3, v'intMap4, v'addrMap1, v'addrMap2, v'addrMap3, v'addrMap4));
}

(cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MapTestContract$_load();
    } else {
        return $MapTestContract$_contract_init();
    }
}

() $MapTestContract$_contract_store((cell, cell, cell, cell, cell, cell, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $MapTestContract$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract MapTestContract functions
;;

(cell, cell, cell, cell, cell, cell, cell, cell) $MapTestContract$_contract_init() impure inline {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = (null(), null(), null(), null(), null(), null(), null(), null());
    return ($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap1((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_15 = $self'intMap1;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_15);
}

((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_intMap1Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_16 = __tact_dict_get_uint_uint($self'intMap1, 8, $key, 8);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_16);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap2((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_17 = $self'intMap2;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_17);
}

((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_intMap2Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_18 = __tact_dict_get_int_int($self'intMap2, 257, $key, 1);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_18);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap3((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_19 = $self'intMap3;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_19);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap3Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_20 = __tact_dict_get_int_cell($self'intMap3, 257, $key);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_20);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_intMap4((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_21 = $self'intMap4;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_21);
}

((cell, cell, cell, cell, cell, cell, cell, cell), tuple) $MapTestContract$_fun_intMap4Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, int $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_22 = $SomeStruct$_load_opt(__tact_dict_get_int_cell($self'intMap4, 257, $key));
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_22);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap1((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_23 = $self'addrMap1;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_23);
}

((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_addrMap1Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_24 = __tact_dict_get_slice_int($self'addrMap1, 267, $key, 257);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_24);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap2((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_25 = $self'addrMap2;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_25);
}

((cell, cell, cell, cell, cell, cell, cell, cell), int) $MapTestContract$_fun_addrMap2Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_26 = __tact_dict_get_slice_int($self'addrMap2, 267, $key, 1);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_26);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap3((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_27 = $self'addrMap3;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_27);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap3Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_28 = __tact_dict_get_slice_cell($self'addrMap3, 267, $key);
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_28);
}

((cell, cell, cell, cell, cell, cell, cell, cell), cell) $MapTestContract$_fun_addrMap4((cell, cell, cell, cell, cell, cell, cell, cell) $self) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_29 = $self'addrMap4;
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_29);
}

((cell, cell, cell, cell, cell, cell, cell, cell), tuple) $MapTestContract$_fun_addrMap4Value((cell, cell, cell, cell, cell, cell, cell, cell) $self, slice $key) impure inline_ref {
    var (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4)) = $self;
    var $fresh$ret_30 = $SomeStruct$_load_opt(__tact_dict_get_slice_cell($self'addrMap4, 267, $key));
    return (($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4), $fresh$ret_30);
}

;;
;; Get methods of a Contract MapTestContract
;;

_ %intMap1() method_id(67207) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap1();
    return res;
}

_ %intMap1Value(int $key) method_id(103396) {
    int $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap1Value($key);
    return res;
}

_ %intMap2() method_id(79588) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap2();
    return res;
}

_ %intMap2Value(int $key) method_id(89348) {
    int $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap2Value($key);
    return res;
}

_ %intMap3() method_id(75461) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap3();
    return res;
}

_ %intMap3Value(int $key) method_id(71844) {
    int $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap3Value($key);
    return res;
}

_ %intMap4() method_id(87586) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap4();
    return res;
}

_ %intMap4Value(int $key) method_id(119013) {
    int $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_intMap4Value($key);
    return $SomeStruct$_to_opt_external(res);
}

_ %addrMap1() method_id(93537) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap1();
    return res;
}

_ %addrMap1Value(slice $key) method_id(116148) {
    slice $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap1Value($key);
    return res;
}

_ %addrMap2() method_id(89346) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap2();
    return res;
}

_ %addrMap2Value(slice $key) method_id(68436) {
    slice $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap2Value($key);
    return res;
}

_ %addrMap3() method_id(85283) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap3();
    return res;
}

_ %addrMap3Value(slice $key) method_id(85748) {
    slice $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap3Value($key);
    return res;
}

_ %addrMap4() method_id(81348) {
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap4();
    return res;
}

_ %addrMap4Value(slice $key) method_id(100021) {
    slice $key = $key;
    var self = $MapTestContract$_contract_load();
    var res = self~$MapTestContract$_fun_addrMap4Value($key);
    return $SomeStruct$_to_opt_external(res);
}

;;
;; Routing of a Contract MapTestContract
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4) = $MapTestContract$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    var (op, _) = in_msg~load_uint_quiet(32);
    ;; Receive SetIntMap1 message
    if (op == 1510253336) {
        var ($msg'key, $msg'value) = in_msg~$SetIntMap1$_load_without_opcode();
        $self'intMap1~__tact_dict_set_uint_uint(8, $msg'key, $msg'value, 8);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetIntMap2 message
    if (op == 1629867766) {
        var ($msg'key, $msg'value) = in_msg~$SetIntMap2$_load_without_opcode();
        $self'intMap2~__tact_dict_set_int_int(257, $msg'key, $msg'value, 1);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetIntMap3 message
    if (op == 3613954633) {
        var ($msg'key, $msg'value) = in_msg~$SetIntMap3$_load_without_opcode();
        $self'intMap3~__tact_dict_set_int_cell(257, $msg'key, $msg'value);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetIntMap4 message
    if (op == 383013829) {
        var ($msg'key, $msg'value) = in_msg~$SetIntMap4$_load_without_opcode();
        $self'intMap4~__tact_dict_set_int_cell(257, $msg'key, $SomeStruct$_store_opt($msg'value));
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetAddrMap1 message
    if (op == 1749966413) {
        var ($msg'key, $msg'value) = in_msg~$SetAddrMap1$_load_without_opcode();
        $self'addrMap1~__tact_dict_set_slice_int(267, $msg'key, $msg'value, 257);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetAddrMap2 message
    if (op == 624157584) {
        var ($msg'key, $msg'value) = in_msg~$SetAddrMap2$_load_without_opcode();
        $self'addrMap2~__tact_dict_set_slice_int(267, $msg'key, $msg'value, 1);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetAddrMap3 message
    if (op == 4276365062) {
        var ($msg'key, $msg'value) = in_msg~$SetAddrMap3$_load_without_opcode();
        $self'addrMap3~__tact_dict_set_slice_cell(267, $msg'key, $msg'value);
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    ;; Receive SetAddrMap4 message
    if (op == 1683777913) {
        var ($msg'key, $msg'value) = in_msg~$SetAddrMap4$_load_without_opcode();
        $self'addrMap4~__tact_dict_set_slice_cell(267, $msg'key, $SomeStruct$_store_opt($msg'value));
        ;; Persist state
        $MapTestContract$_contract_store(($self'intMap1, $self'intMap2, $self'intMap3, $self'intMap4, $self'addrMap1, $self'addrMap2, $self'addrMap3, $self'addrMap4));
        return ();
    }
    
    throw(130);
}
