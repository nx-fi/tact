#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; payouts_Payouts.headers.fc
;;
;; Header files for Payouts
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $ChangeOwner$_load_without_opcode
(slice, ((int, slice))) $ChangeOwner$_load_without_opcode(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $CanPayout$_store
builder $CanPayout$_store(builder build_0, (int) v) inline;

;; $CanPayout$_store_cell
cell $CanPayout$_store_cell((int) v) inline;

;; $CanPayoutResponse$_load_without_opcode
(slice, ((int, slice, int))) $CanPayoutResponse$_load_without_opcode(slice sc_0) inline;

;; $Payouts$_store
builder $Payouts$_store(builder build_0, (slice, int) v) inline;

;; $Payouts$_load
(slice, ((slice, int))) $Payouts$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Beacon$init$_store
builder $Beacon$init$_store(builder build_0, (slice, slice) v) inline;

;; $Payouts$init$_load
(slice, ((slice, int))) $Payouts$init$_load(slice sc_0) inline;

;; $Payouts$_contract_init
(slice, int) $Payouts$_contract_init(slice $owner, int $publicKey) impure inline;

;; $Payouts$_contract_load
(slice, int) $Payouts$_contract_load() impure inline;

;; $Payouts$_contract_store
() $Payouts$_contract_store((slice, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_newAddress
slice $global_newAddress(int $chain, int $hash) impure inline;

;; $global_contractAddressExt
slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Builder$_fun_asCell
cell $Builder$_fun_asCell(builder $self) impure inline;

;; $Slice$_fun_fromBase64
slice $Slice$_fun_fromBase64(slice $self) impure inline_ref;

;; $String$_fun_fromBase64
slice $String$_fun_fromBase64(slice $self) impure inline;

;; $Beacon$_init_child
(cell, cell) $Beacon$_init_child(slice $master, slice $owner) inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Payouts$_fun_forward
((slice, int), ()) $Payouts$_fun_forward((slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Payouts$_fun_reply
((slice, int), ()) $Payouts$_fun_reply((slice, int) $self, cell $body) impure inline;

;; $Payouts$_fun_requireOwner
((slice, int), ()) $Payouts$_fun_requireOwner((slice, int) $self) impure inline_ref;

;; $Payouts$_fun_owner
((slice, int), slice) $Payouts$_fun_owner((slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline;

;; $CanPayout$_constructor_amount
((int)) $CanPayout$_constructor_amount(int $amount) inline;


;; payouts_Payouts.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_checkSignature(int $hash, slice $signature, int $public_key) impure asm """
    CHKSIGNU
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

slice $Slice$_fun_asAddressUnsafe(slice $self) impure asm "NOP";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $global_newAddress(int $chain, int $hash) impure inline {
    return $Slice$_fun_asAddressUnsafe($Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_int(store_uint($global_beginCell(), 4, 3), $chain, 8), $hash, 256))));
}

slice $global_contractAddressExt(int $chain, cell $code, cell $data) impure inline {
    int $hash = $global_contractHash($code, $data);
    return $global_newAddress($chain, $hash);
}

slice $global_contractAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    return $global_contractAddressExt(0, $s'code, $s'data);
}

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    MUL // note that -1 * -1 wraps back to -1
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

int $Builder$_fun_bits(builder $self) impure asm """
    BBITS
""";

slice $Builder$_fun_asSlice(builder $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($Builder$_fun_endCell($self));
}

cell $Builder$_fun_asCell(builder $self) impure inline {
    var ($self) = $self;
    return $Builder$_fun_endCell($self);
}

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

(slice, int) $Slice$_fun_loadCoins(slice $self) impure asm( -> 1 0) """
    LDVARUINT16
""";

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

slice $Slice$_fun_fromBase64(slice $self) impure inline_ref {
    var ($self) = $self;
    int $size = ($Slice$_fun_bits($self) / 8);
    builder $result = $global_beginCell();
    repeat ($size) {
        int $code = $self~load_uint(8);
        if (( (($code >= 65)) ? (($code <= 90)) : (false) )) {
            $result = store_uint($result, ($code - 65), 6);
        } elseif (( (($code >= 97)) ? (($code <= 122)) : (false) )) {
            $result = store_uint($result, ($code - 71), 6);
        } elseif (( (($code >= 48)) ? (($code <= 57)) : (false) )) {
            $result = store_uint($result, ($code + 4), 6);
        } elseif (( (($code == 45)) ? (true) : (($code == 43)) )) {
            $result = store_uint($result, 62, 6);
        } elseif (( (($code == 95)) ? (true) : (($code == 47)) )) {
            $result = store_uint($result, 63, 6);
        } elseif (($code == 61)) {
        } else {
            throw(134);
        }
    }
    int $total = $Builder$_fun_bits($result);
    int $padding = ($total % 8);
    if (($padding != 0)) {
        slice $s = $Builder$_fun_asSlice($result);
        return $s~load_bits(($total - $padding));
    } else {
        return $Builder$_fun_asSlice($result);
    }
}

int $Cell$_fun_hash(cell $self) impure asm """
    HASHCU
""";

slice $String$_fun_fromBase64(slice $self) impure inline {
    var ($self) = $self;
    return $Slice$_fun_fromBase64(__tact_str_to_slice($self));
}

((slice, int), ()) $Payouts$_fun_forward((slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {
    var (($self'owner, $self'publicKey)) = $self;
    var ($init) = $init;
    cell $code = null();
    cell $data = null();
    if ((~ null?($init))) {
        var ($init2'code, $init2'data) = $StateInit$_not_null($init);
        $code = $init2'code;
        $data = $init2'data;
    }
    if (false) {
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $ctx'value);
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 130, $body, $code, $data));
            return (($self'owner, $self'publicKey), ());
        }
    }
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, 66, $body, $code, $data));
    return (($self'owner, $self'publicKey), ());
}

((slice, int), ()) $Payouts$_fun_reply((slice, int) $self, cell $body) impure inline {
    var (($self'owner, $self'publicKey)) = $self;
    ($self'owner, $self'publicKey)~$Payouts$_fun_forward(__tact_context_get_sender(), $body, true, null());
    return (($self'owner, $self'publicKey), ());
}

((slice, int), ()) $Payouts$_fun_requireOwner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'publicKey)) = $self;
    throw_unless(132, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'publicKey), ());
}

((slice, int), slice) $Payouts$_fun_owner((slice, int) $self) impure inline_ref {
    var (($self'owner, $self'publicKey)) = $self;
    var $fresh$ret_44 = $self'owner;
    return (($self'owner, $self'publicKey), $fresh$ret_44);
}

;; payouts_Payouts.constants.fc
;; Cell N+kNudH3cl3AEo7mutIDX7UEeeCaSIopJXvtAaIwUKA=
cell __gen_cell_cell_37e90db9d1f7725dc0128ee6bad2035fb50479e09a488a29257bed01a23050a0() asm """
    B{b5ee9c7241010101000d00001600000000537563636573738a3a2a2a} B>boc PUSHREF
""";

;; Cell UaYKiVRCvTMf51FhMFsq++BNM/HNbPihZJ4Cj5kuszw=
cell __gen_cell_cell_51a60a895442bd331fe75161305b2afbe04d33f1cd6cf8a1649e028f992eb33c() asm """
    B{b5ee9c7241010101001200002000000000416c72656164792070616964feced6d9} B>boc PUSHREF
""";

;; payouts_Payouts.storage.fc
;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($mode, $body, $code, $data, $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: ChangeOwner
;; Header: 0x819dbe99
;; TLB: change_owner#819dbe99 queryId:uint64 newOwner:address = ChangeOwner
;;

(slice, ((int, slice))) $ChangeOwner$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'newOwner = sc_0~load_msg_addr();
    return (sc_0, (v'queryId, v'newOwner));
}

;;
;; Type: ChangeOwnerOk
;; Header: 0x327b2b4a
;; TLB: change_owner_ok#327b2b4a queryId:uint64 newOwner:address = ChangeOwnerOk
;;

builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline {
    var (v'queryId, v'newOwner) = v;
    build_0 = store_uint(build_0, 846932810, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_slice(v'newOwner);
    return build_0;
}

cell $ChangeOwnerOk$_store_cell((int, slice) v) inline {
    return $ChangeOwnerOk$_store(begin_cell(), v).end_cell();
}

((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int $queryId, slice $newOwner) inline {
    return ($queryId, $newOwner);
}

;;
;; Type: CanPayout
;; Header: 0xc41949df
;; TLB: can_payout#c41949df amount:int257 = CanPayout
;;

builder $CanPayout$_store(builder build_0, (int) v) inline {
    var (v'amount) = v;
    build_0 = store_uint(build_0, 3289991647, 32);
    build_0 = build_0.store_int(v'amount, 257);
    return build_0;
}

cell $CanPayout$_store_cell((int) v) inline {
    return $CanPayout$_store(begin_cell(), v).end_cell();
}

((int)) $CanPayout$_constructor_amount(int $amount) inline {
    return ($amount);
}

;;
;; Type: CanPayoutResponse
;; Header: 0xffeb40de
;; TLB: can_payout_response#ffeb40de amount:int257 address:address ok:bool = CanPayoutResponse
;;

(slice, ((int, slice, int))) $CanPayoutResponse$_load_without_opcode(slice sc_0) inline {
    var v'amount = sc_0~load_int(257);
    var v'address = sc_0~load_msg_addr();
    var v'ok = sc_0~load_int(1);
    return (sc_0, (v'amount, v'address, v'ok));
}

;;
;; Type: Beacon
;; TLB: _ master:address owner:address completed:bool = Beacon
;;

builder $Beacon$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'master, v'owner) = v;
    build_0 = build_0.store_slice(v'master);
    build_0 = build_0.store_slice(v'owner);
    return build_0;
}

cell $Beacon$_child_get_code() impure asm """
    B{b5ee9c72010205010001360002e2ff00208ee33001d072d721d200d200fa4021103450666f04f86102f862ed44d0d200019afa40fa40d20055206c1399fa40fa405902d10170e2048e156c2270c87f01ca0055205acf1658cf16ca00c9ed54e002d70d1ff2e082018210c41949dfbae3025f04f2c082e1f4a413f4bcf2c80b01020184810101d700013181114df8425230c705f2f4821005f5e10070fb0254633158c855208210ffeb40de5004cb1f12810101cf0001cf16ca00c913f842017f6ddb3c5f03030147a651477b513434800066be903e90348015481b04e67e903e901640b4405c38b6cf1b0c600400a06d6d226eb3995b206ef2d0806f22019132e21024700304804250231036552212c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e2f400c901fb00000221} B>boc PUSHREF
""";

(cell, cell) $Beacon$_init_child(slice $master, slice $owner) inline {
    ;; Build init code cell

    ;; Contract Code: Beacon
    cell init_code = $Beacon$_child_get_code();


    builder b = begin_cell();
    b = b.store_int(false, 1);
    b = $Beacon$init$_store(b, ($master, $owner));
    return (init_code, b.end_cell());
}

;;
;; Type: Payouts
;; TLB: _ owner:address publicKey:int257 = Payouts
;;

builder $Payouts$_store(builder build_0, (slice, int) v) inline {
    var (v'owner, v'publicKey) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_int(v'publicKey, 257);
    return build_0;
}

(slice, ((slice, int))) $Payouts$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'publicKey = sc_0~load_int(257);
    return (sc_0, (v'owner, v'publicKey));
}

(slice, ((slice, int))) $Payouts$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'publicKey = sc_0~load_int(257);
    return (sc_0, (v'owner, v'publicKey));
}

(slice, int) $Payouts$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Payouts$_load();
    } else {
        (slice $owner, int $publicKey) = $sc~$Payouts$init$_load();
        $sc.end_parse();
        return $Payouts$_contract_init($owner, $publicKey);
    }
}

() $Payouts$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $Payouts$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract Payouts functions
;;

(slice, int) $Payouts$_contract_init(slice $owner, int $publicKey) impure inline {
    var (($self'owner, $self'publicKey)) = (null(), null());
    $self'owner = $owner;
    $self'publicKey = $publicKey;
    return ($self'owner, $self'publicKey);
}

;;
;; Get methods of a Contract Payouts
;;

_ %owner() method_id(83229) {
    var self = $Payouts$_contract_load();
    var res = self~$Payouts$_fun_owner();
    return res;
}

;; message opcode reader utility
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";
;;
;; Routing of a Contract Payouts
;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'publicKey) = $Payouts$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
        ;; Receive CanPayoutResponse message
        if (op == 4293607646) {
            var ($msg'amount, $msg'address, $msg'ok) = in_msg~$CanPayoutResponse$_load_without_opcode();
            var ($init'code, $init'data) = $Beacon$_init_child($global_myAddress(), $msg'address);
            slice $address = $global_contractAddress(($init'code, $init'data));
            throw_unless(4429, ( equal_slices_bits($address, __tact_context_get_sender()) ));
            if ($msg'ok) {
                var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
                throw_unless(62972, (((($global_myBalance() - $ctx'value) - 1000000000) - $msg'amount) > 0));
                $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'address, $msg'amount, 66, false, __gen_cell_cell_37e90db9d1f7725dc0128ee6bad2035fb50479e09a488a29257bed01a23050a0()));
            } else {
                $global_send($SendParameters$_constructor_to_value_mode_bounce_body($msg'address, 0, 66, false, __gen_cell_cell_51a60a895442bd331fe75161305b2afbe04d33f1cd6cf8a1649e028f992eb33c()));
            }
            return ();
        }
        
        ;; Receive ChangeOwner message
        if (op == 2174598809) {
            var ($msg'queryId, $msg'newOwner) = in_msg~$ChangeOwner$_load_without_opcode();
            ($self'owner, $self'publicKey)~$Payouts$_fun_requireOwner();
            $self'owner = $msg'newOwner;
            ($self'owner, $self'publicKey)~$Payouts$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner)));
            ;; Persist state
            $Payouts$_contract_store(($self'owner, $self'publicKey));
            return ();
        }
        
    }
    ;; Empty Receiver and Text Receivers
    if (op == 0) {
        ;; Fallback Text Receiver
        if (in_msg_length >= 32) {
            slice $msg = in_msg;
            var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
            throw_unless(16059, ($ctx'value >= 1000000000));
            slice $data = $String$_fun_fromBase64($msg);
            int $amount = $data~$Slice$_fun_loadCoins();
            slice $signature = $data~load_bits(512);
            int $hash = $Cell$_fun_hash($Builder$_fun_asCell($Builder$_fun_storeCoins($Builder$_fun_storeAddress($global_beginCell(), $ctx'sender), $amount)));
            throw_unless(48401, $global_checkSignature($hash, $signature, $self'publicKey));
            var ($init'code, $init'data) = $Beacon$_init_child($global_myAddress(), $ctx'sender);
            slice $address = $global_contractAddress(($init'code, $init'data));
            $global_send($SendParameters$_constructor_to_value_mode_bounce_body($address, 0, 66, true, $CanPayout$_store_cell($CanPayout$_constructor_amount($amount))));
            return ();
        }
    }
    ;; Throw if not handled
    throw(130);
}

() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
    execute current@ context@ current!
    {
        }END> b>
        
        <{
            SETCP0 DUP
            IFNOTJMP:<{
                DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
            }>
swap <s ref@
            0 swap @procdictkeylen idict- drop
            -1 swap @procdictkeylen idict- drop
            65535 swap @procdictkeylen idict- drop

            @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
        }> b>
    } : }END>c
    current@ context! current!
} does @atend !
""";
() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}