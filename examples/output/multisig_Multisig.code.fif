// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/examples/output/multisig_Multisig.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_slice_int
  DECLPROC $Request$_store
  DECLPROC $Request$_load
  DECLPROC $Request$_load_without_opcode
  DECLPROC $Signed$_load_without_opcode
  DECLPROC $Multisig$_load
  DECLPROC $MultisigSigner$init$_store
  DECLPROC $Multisig$init$_load
  DECLPROC $Multisig$_contract_init
  DECLPROC $Multisig$_contract_load
  DECLPROC $Cell$_fun_asSlice
  DECLPROC $global_newAddress
  DECLPROC $global_contractAddressExt
  DECLPROC $global_contractAddress
  DECLPROC $MultisigSigner$_init_child
  DECLPROC $Multisig$_fun_member
  DECLPROC $Multisig$_fun_members
  DECLPROC $SendParameters$_constructor_value_to_mode_bounce_code_data
  DECLPROC $SendParameters$_constructor_to_value_mode_bounce_body
  70789 DECLMETHOD %member
  104769 DECLMETHOD %members
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_slice_int PROCINLINE:<{
    s1 s3 s3 XCHG3
        DICTGET NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  $Request$_store PROCINLINE:<{
    4266760323 PUSHINT
    s0 s8 XCHG2
    32 STU
    s0 s6 XCHG2
    STSLICER
    s0 s4 XCHG2
    STSLICER
    ROT
    STVARUINT16
    32 STU
    1 STI
    8 STU
    OVER
    ISNULL
    NOT
    IF:<{
      TRUE
      SWAP
      1 STI
      STREF
    }>ELSE<{
      FALSE
      s2 POP
      1 STI
    }>
  }>
  $Request$_load PROCINLINE:<{
    32 LDU
    SWAP
    4266760323 PUSHINT
    EQUAL
    129 THROWIFNOT
    LDMSGADDR
    LDMSGADDR
    LDVARUINT16
    32 LDU
    1 LDI
    8 LDU
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    7 -ROLL
  }>
  $Request$_load_without_opcode PROCINLINE:<{
    LDMSGADDR
    LDMSGADDR
    LDVARUINT16
    32 LDU
    1 LDI
    8 LDU
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    7 -ROLL
  }>
  $Signed$_load_without_opcode PROCINLINE:<{
    $Request$_load INLINECALLDICT
  }>
  $Multisig$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDDICT
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    4 -ROLL
  }>
  $MultisigSigner$init$_store PROCINLINE:<{
    s10 s9 XCHG2
    STSLICER
    s1 s7 XCHG
    STDICT
    s1 s5 XCHG
    257 PUSHINT
    STIX
    NEWC
    s0 s7 XCHG
    s4 s6 XCHG
    s3 s5 XCHG
    s4 s8 s0 XCHG3
    $Request$_store INLINECALLDICT
    ENDC
    SWAP
    STREF
  }>
  $Multisig$init$_load PROCINLINE:<{
    LDDICT
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    3 -ROLL
  }>
  $Multisig$_contract_init PROCINLINE:<{
    NIP
    0 PUSHINT
    s2 s0 s2 XCPUXC
  }>
  $Multisig$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Multisig$_load INLINECALLDICT
      1 4 BLKDROP2
    }>ELSE<{
      $Multisig$init$_load INLINECALLDICT
      s0 s3 XCHG
      ENDS
      ROT
      $Multisig$_contract_init INLINECALLDICT
    }>
  }>
  $Cell$_fun_asSlice PROCINLINE:<{
        CTOS
  }>
  $global_newAddress PROCINLINE:<{
        NEWC
    4 PUSHINT
    SWAP
    3 STU
    s1 s2 XCHG
    8 STI
    256 STU
        ENDC
    $Cell$_fun_asSlice INLINECALLDICT
  }>
  $global_contractAddressExt PROCINLINE:<{
        s0 PUSH HASHCU // `data` hash
        s2 PUSH HASHCU // `code` hash
        SWAP2
        CDEPTH         // `data` depth
        SWAP
        CDEPTH         // `code` depth
        131380 INT     // (2 << 16) | (1 << 8) | 0x34
        // Group 2: Composition of the Builder
        NEWC
        24 STU  // store refs_descriptor | bits_descriptor | data
        16 STU  // store depth_descriptor for `code`
        16 STU  // store depth_descriptor for `data`
        256 STU // store `code` hash
        256 STU // store `data` hash
        // Group 3: SHA256 hash of the resulting Builder
        ONE HASHEXT_SHA256
    $global_newAddress INLINECALLDICT
  }>
  $global_contractAddress PROCINLINE:<{
    0 PUSHINT
    -ROT
    $global_contractAddressExt INLINECALLDICT
  }>
  $MultisigSigner$_init_child PROCINLINE:<{
        B{b5ee9c72010209010002590003e6ff00208f653001d072d721d200d200fa4021103450666f04f86102f862db3c0d925f0de0702cd74920c21f95310cd31f0dde01c00001c121b0925f0de00bf90182f08fb8a03d9cbc969d34600eea833ce02fd8a9d4c56aa07f9d5827ecc8426a5789bae3025f0cf2c082e1f4a413f4bcf2c80b060102029e811293f8235230bcf2f482009f6a26b3f2f4f8422981010b228101014133f40a6fa19401d70030925b6de2206ef2d0800a81010bf459305089a05306bee300109b108a09106810571046103544301203040213a668bfb6cf36cf1b31e0060701fc357f7081008270547765537d56125614c85560821083ea55995008cb1f078210fe5198835008cb1f5006cf165004cf1658fa02cb1fca00cb07216eb3957f01ca00cc947032ca00e2c92d552010246d50436d5023c8cf8580ca00cf8440ce01fa028069cf40025c6e016ea8935bcf819d58cf8680cf8480f400f400cf81e20500a6c87f01ca0055b050cbcf1619f40017810101cf0015810101cf0013ca00c846171035188210fe5198835008cb1f5006cf165004cf1658fa02cb1fca00cb07216eb3957f01ca00cc947032ca00e2c901ccc9ed54000ef400c901fb0005019eed44d0d200018e46fa40f404810101d700810101d700d200d401d0d31f018210fe519883baf2e081fa40fa40fa00d31fd200d307d2000191d4926d01e2556037107c107b107a1079107855056c1ce008000e547654547654260088fa40f404810101d700d401d0d31f018210fe519883baf2e081fa40fa40fa00d31fd200d307d2000191d4926d01e2556037107a1079107855050ad1550870080770075541} B>boc PUSHREF
    NEWC
    FALSE
    SWAP
    1 STI
    10 2 BLKSWAP
    $MultisigSigner$init$_store INLINECALLDICT
    ENDC
  }>
  $Multisig$_fun_member PROCREF:<{
    267 PUSHINT
    s4 PUSH
    s0 s2 XCHG
    257 PUSHINT
    __tact_dict_get_slice_int INLINECALLDICT
  }>
  $Multisig$_fun_members PROCREF:<{
    s2 PUSH
  }>
  $SendParameters$_constructor_value_to_mode_bounce_code_data PROCINLINE:<{
    s3 s5 XCHG
    PUSHNULL
    s4 s5 s5 XCHG3
    s0 s3 XCHG
  }>
  $SendParameters$_constructor_to_value_mode_bounce_body PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s0 s3 XCHG
  }>
  %member PROC:<{
    $Multisig$_contract_load INLINECALLDICT
    4 ROLL
    $Multisig$_fun_member INLINECALLDICT
    4 1 BLKDROP2
  }>
  %members PROC:<{
    $Multisig$_contract_load INLINECALLDICT
    $Multisig$_fun_members INLINECALLDICT
    4 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Multisig$_contract_load INLINECALLDICT
    NIP
    s2 POP
    s0 s3 XCHG
    IFJMP:<{
      3 BLKDROP
    }>
    SWAP
    32 LDUQ 130 THROWIFNOT
    OVER
    4266760323 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      $Request$_load_without_opcode INLINECALLDICT
      s7 POP
      __tact_context_get_sender INLINECALLDICT
      267 PUSHINT
      s10 PUSH
      s0 s2 XCHG
      257 PUSHINT
      __tact_dict_get_slice_int INLINECALLDICT
      __tact_not_null INLINECALLDICT
      46307 PUSHINT
      SWAP
      0 GTINT
      THROWANYIFNOT
          MYADDR
      s0 s9 XCHG
      s0 s8 XCHG
      s0 s7 XCHG
      $MultisigSigner$_init_child INLINECALLDICT
      2DUP
      $global_contractAddress INLINECALLDICT
      0 PUSHINT
      s0 s3 XCHG
      66 PUSHINT
      s0 s1 s3 XCHG3
      TRUE
      -ROT
      $SendParameters$_constructor_value_to_mode_bounce_code_data INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          MUL // note that -1 * -1 wraps back to -1
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    }>
    SWAP
    2213172633 PUSHINT
    EQUAL
    IFJMP:<{
      $Signed$_load_without_opcode INLINECALLDICT
      s7 POP
      __tact_context_get_sender INLINECALLDICT
          MYADDR
      s10 s1 s3 XCHG3
      s9 s7 s6 XC2PU
      s6 s5 s8 PUSH3
      s14 s12 PUSH2
      $MultisigSigner$_init_child INLINECALLDICT
      $global_contractAddress INLINECALLDICT
      s0 s6 XCHG
      4429 PUSHINT
      s0 s7 XCHG
      SDEQ
      s1 s6 XCHG
      THROWANYIFNOT
      4755 PUSHINT
          NOW
      s1 s6 XCHG
      GREATER
      s1 s5 XCHG
      THROWANYIFNOT
      s4 s1 s4 XCHG3
      $SendParameters$_constructor_to_value_mode_bounce_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          MUL // note that -1 * -1 wraps back to -1
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
    }>
    3 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
        execute current@ context@ current!
        {
            }END> b>
            
            <{
                SETCP0 DUP
                IFNOTJMP:<{
                    DROP over <s ref@ 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot @addop
                }>
    swap <s ref@
                0 swap @procdictkeylen idict- drop
                -1 swap @procdictkeylen idict- drop
                65535 swap @procdictkeylen idict- drop
                @procdictkeylen DICTPUSHCONST DICTIGETJMPZ 11 THROWARG
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
  }>
}END>c
