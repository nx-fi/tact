// automatically generated from `@stdlib/std/stdlib.fc` `@stdlib/std/stdlib_ex.fc` `/home/benji/proj/ton/tact/examples/output/multisig_MultisigSigner.code.fc` 
PROGRAM{
  DECLPROC __tact_sha256
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_dict_get_slice_int
  DECLPROC __tact_dict_set_slice_int
  DECLPROC $Request$_store
  DECLPROC $Request$_load
  DECLPROC $Signed$_store
  DECLPROC $Signed$_store_cell
  DECLPROC $MultisigSigner$_store
  DECLPROC $MultisigSigner$_load
  DECLPROC $Request$_to_external
  DECLPROC $MultisigSigner$init$_load
  DECLPROC $MultisigSigner$_contract_init
  DECLPROC $MultisigSigner$_contract_load
  DECLPROC $MultisigSigner$_contract_store
  DECLPROC $MultisigSigner$_fun_request
  DECLPROC $SendParameters$_constructor_value_to_mode_bounce_body
  DECLPROC $Signed$_constructor_request
  107262 DECLMETHOD %request
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_sha256 PROC:<{
    ONE
    WHILE:<{
      OVER SREFS 0 NEQINT
    }>DO<{
      OVER LDREF s0 POP CTOS s0 s1 XCHG INC
    }>
    HASHEXT_SHA256
  }>
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_dict_get_slice_int PROCINLINE:<{
    s1 s3 s3 XCHG3
        DICTGET NULLSWAPIFNOT
    IF:<{
      SWAP
      LDIX
      DROP
    }>ELSE<{
      2DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_slice_int PROCINLINE:<{
    OVER
    ISNULL
    IF:<{
      2DROP
      -ROT
          DICTDEL
      DROP
    }>ELSE<{
      NEWC
      SWAP
      STIX
      s1 s3 s3 XCHG3
      DICTSETB
    }>
  }>
  $Request$_store PROCREF:<{
    4266760323 PUSHINT
    s0 s8 XCHG2
    32 STU
    s0 s6 XCHG2
    STSLICER
    s0 s4 XCHG2
    STSLICER
    ROT
    STVARUINT16
    32 STU
    1 STI
    8 STU
    OVER
    ISNULL
    NOT
    IF:<{
      TRUE
      SWAP
      1 STI
      STREF
    }>ELSE<{
      FALSE
      s2 POP
      1 STI
    }>
  }>
  $Request$_load PROCREF:<{
    32 LDU
    SWAP
    4266760323 PUSHINT
    EQUAL
    129 THROWIFNOT
    LDMSGADDR
    LDMSGADDR
    LDVARUINT16
    32 LDU
    1 LDI
    8 LDU
    1 LDI
    SWAP
    IF:<{
      LDREF
    }>ELSE<{
      PUSHNULL
      SWAP
    }>
    7 -ROLL
  }>
  $Signed$_store PROCINLINE:<{
    2213172633 PUSHINT
    s0 s8 XCHG2
    32 STU
    s0 s7 XCHG
    $Request$_store INLINECALLDICT
  }>
  $Signed$_store_cell PROCINLINE:<{
    NEWC
    7 -ROLL
    $Signed$_store INLINECALLDICT
    ENDC
  }>
  $MultisigSigner$_store PROCINLINE:<{
    s12 s11 XCHG2
    STSLICER
    s1 s9 XCHG
    STDICT
    s1 s7 XCHG
    257 PUSHINT
    STIX
    s1 s5 XCHG
    257 PUSHINT
    STIX
    s1 s3 XCHG
    1 STI
    NEWC
    s6 s1 s7 XCHG3
    s3 s5 XCHG
    s1 s8 XCHG
    $Request$_store INLINECALLDICT
    ENDC
    SWAP
    STREF
  }>
  $MultisigSigner$_load PROCINLINE:<{
    LDMSGADDR
    LDDICT
    257 PUSHINT
    LDIX
    257 PUSHINT
    LDIX
    1 LDI
    LDREF
    SWAP
    CTOS
    $Request$_load INLINECALLDICT
    s7 POP
    s7 s12 XCHG
    s7 s11 XCHG
    s7 s10 XCHG
    s7 s9 XCHG
    s7 s8 XCHG
    6 ROLL
  }>
  $Request$_to_external PROCINLINE:<{
  }>
  $MultisigSigner$init$_load PROCINLINE:<{
    LDMSGADDR
    LDDICT
    257 PUSHINT
    LDIX
    LDREF
    SWAP
    CTOS
    $Request$_load INLINECALLDICT
    s7 POP
    s7 s10 XCHG
    s7 s9 XCHG
    s7 s8 XCHG
    6 ROLL
  }>
  $MultisigSigner$_contract_init PROCINLINE:<{
    0 PUSHINT
    s0 s8 XCHG
    s0 s7 XCHG
    FALSE
    s0 s7 XCHG
    5 2 BLKSWAP
  }>
  $MultisigSigner$_contract_load PROCREF:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IFJMP:<{
      $MultisigSigner$_load INLINECALLDICT
      1 12 BLKDROP2
    }>
    $MultisigSigner$init$_load INLINECALLDICT
    s0 s10 XCHG
    ENDS
    9 ROLL
    $MultisigSigner$_contract_init INLINECALLDICT
  }>
  $MultisigSigner$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    12 -ROLL
    $MultisigSigner$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $MultisigSigner$_fun_request PROCREF:<{
    s6 s5 s4 PUSH3
    s6 s5 s4 PUSH3
    s6 PUSH
  }>
  $SendParameters$_constructor_value_to_mode_bounce_body PROCINLINE:<{
    s2 s4 XCHG
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s2 s3 XCHG2
  }>
  $Signed$_constructor_request PROCINLINE:<{
  }>
  %request PROC:<{
    $MultisigSigner$_contract_load INLINECALLDICT
    $MultisigSigner$_fun_request INLINECALLDICT
    12 7 BLKDROP2
    $Request$_to_external INLINECALLDICT
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $MultisigSigner$_contract_load INLINECALLDICT
    s0 s13 XCHG
    IFJMP:<{
      13 BLKDROP
    }>
    0 PUSHINT
    s12 PUSH
    SBITS
    DUP
    31 GTINT
    IF:<{
      NIP
      s0 s12 XCHG
      32 LDU
      s0 s13 XCHG
    }>
    SWAP
    0 EQINT
    SWAP
    33 LESSINT
    AND
    IFJMP:<{
      s11 POP
      s9 s11 XCHG
      2 9 BLKSWAP
      $MultisigSigner$_contract_store INLINECALLDICT
    }>
    s0 s11 XCHG
    HASHSU
    65006943147804847682408564640074151311175010682458417540680140148447386425225 PUSHINT
    EQUAL
    IFJMP:<{
      4755 PUSHINT
          NOW
      s3 s(-1) PUXC
      GREATER
      THROWANYIFNOT
      40810 PUSHINT
      s6 PUSH
      NOT
      THROWANYIFNOT
      __tact_context_get_sender INLINECALLDICT
      s9 PUSH
      267 PUSHINT
      s2 PUSH
      257 PUSHINT
      __tact_dict_get_slice_int INLINECALLDICT
      __tact_not_null INLINECALLDICT
      s1 s10 XCHG
      267 PUSHINT
      s0 s11 XCHG2
      PUSHNULL
      257 PUSHINT
      __tact_dict_set_slice_int INLINECALLDICT
      s8 s9 XCHG2
      ADD
      s0 s6 PUSH2
      GEQ
      IF:<{
        s5 POP
        TRUE
        0 PUSHINT
        130 PUSHINT
        FALSE
        s7 s6 s5 PUSH3
        s7 s13 PUSH2
        18 s() PUSH
        20 s() PUSH
        $Signed$_constructor_request INLINECALLDICT
        $Signed$_store_cell INLINECALLDICT
        s13 PUSH
        3 -ROLL
        $SendParameters$_constructor_value_to_mode_bounce_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            MUL // note that -1 * -1 wraps back to -1
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        s0 s5 XCHG
      }>
      s9 s11 XCHG
      s8 s10 XCHG
      s0 s9 XCHG
      s6 s8 XCHG
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $MultisigSigner$_contract_store INLINECALLDICT
    }>
    12 BLKDROP
    130 THROW
  }>
}END>c
